#!/usr/bin/env bash
#
## The Magical Surfer Gem Box
##
SECONDS=0
##
## TODO add ability to kill by pid (need intelligent ps aux matching)
## TODO read file created from job submission script to know when recon started (to calculate elapsed time)
## TODO MAKE FASTER
## TODO Average DEFECT size
## TODO this would be so much better with JSON databasing (maybe with mongodb?)
## 		-- create regularly updating JSON file with job information upon SGE submission
##		-- build JSON file with subject recon information (edited? if so where? which commands run? CNR? etc)
##		-- build JSON file with subject demographic information

####################################################################################################################
### DEFINE FUNCTION
####################################################################################################################
# TODO make main menu
function surfergems_main(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_main $@"
	echo 'main menu'
	# read user input
}
export -f surfergems_main
####################################################################################################################
### DEFINE FUNCTION
#   figure out where function is being called from (follow symlinks)
####################################################################################################################
function surfergems_whereami(){
	# >&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_whereami $@"
	while [ -h "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
		SOURCE="$(readlink "${SOURCE}")"
		[[ ${SOURCE} != /* ]] && SOURCE="${DIR}/${SOURCE}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	export DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"	

	# get where this script lives
	SOURCEPATH="`dirname \"$0\"`"              # relative
	export SOURCEPATH="`( cd \"${SOURCEPATH}\" && pwd )`"	
}
export -f surfergems_whereami
####################################################################################################################
### DEFINE FUNCTION
##  preallocate arrays and default values
####################################################################################################################
function surfergems_defaults(){
	# Default Options
	export DEBUG=''
	export OPTS="--no-colors --plain -nc --status -v --verbose --convert -f --files --web-report --web-report-dir -wrd --detail --kill-jobs -h --help --usage -sd --subjects-dir -s --subjects"
	[ ! ${VERBOSE} ] && export VERBOSE=''
	export AVERAGENAME='average'
	export OVERWRITE=''
	export EDITSUMMARY=''
	# KILL PATTERN
	[ ! "${KILLPATTERN}" ] && export KILLPATTERN='recon-all -s'
	## Arrays 
	[ ! ${STATUS} ] && declare -g STATUS=()						# init STATUS if it doesn't exist 
	[ ! "${RECONSTATS}" ] && declare -g RECONSTATS=() 			# array of status outputs across subjects
	[ ! ${MEASURES} ] && declare -g MEASURES=()					# measures for statistics
	[ ! ${ATLAS} ] && declare -g ATLAS=()
	declare -g FINISHEDSUBJECTS=() && declare -g FINISHTIMES=() && declare -g STARTTIMES=() 	# array of subjects, completion times and start times of finished jobs
	declare -g RUNNINGSUBJECTS=() && declare -g RUNNINGSTATUS=() && declare -g RUNNINGTIME=() 	# array of subjects, statuses and last reported run time of active jobs
	declare -g FAILEDSUBJECTS=() && declare -g FAILTIMES=() && declare -g FAILPOINT=()			# array of subjects, exit times and last reported step of failed jobs
	declare -g RUNNINGHOSTS=() && declare -g FAILEDHOSTS=() && declare -g FINISHEDHOSTS=()
	declare -g RUNNINGID=()
	## stats arrays for table detail
	declare -g hname=() && declare -g talqa=() && declare -g bcnr=() && declare -g acnr=()
	declare -g ndef=() && declare -g leno=() && declare -g reno=() && declare -g bmedits=() && declare -g runtime=()
	declare -g wmerased=() && declare -g wmfilled=()	
	## manifest check list
	declare -g MISSING=() && declare -g EXISTS=() && declare -g RERUNSUB=() && declare -g COMPLETESUB=() 	# array for subjects with missing/existing/complete data or those needing rerun
	## Pretty Colors
	[ ! ${PRETTY} ] && export PRETTY='paintitpretty'
	#  make things pretty by default unless user asks
	if [ ${PRETTY} = 'paintitpretty' ]; then
		export RED='\033[0;31m'
		export BRED='\033[1;31m'
		export YELLOW='\033[1;33m'
		export GREEN='\033[1;32m'
		export BLUE='\033[1;34m'
		export GREY='\033[1;37m'
		export NC='\033[0m' 
		export BBLUE='\033[1;40m'
		export NBC='\033[49m'
		export GGREY='\033[1;30m'
		export YBC='\033[47m'
		export LRED='\033[1;31m'
	else
		export RED='' && export BRED='' && export YELLOW=''
		export GREEN='' && export BLUE='' && export GREY=''
		export NC='' && export BBLUE='' && export NBC=''
		export GGREY='' && export YBC='' && export LRED=''
	fi	
	## Table Preallocation
	export TAB=$'\t' && declare -g TABLE=("SubjectID${TAB}Machine${TAB}JobStatus${TAB}TotalRunTime${TAB}ReconStage${TAB}NumBrainMaskEdits${TAB}NumWhiteMaskDel${TAB}NumWhiteMaskFill${TAB}TalCorr${TAB}OrigCNR${TAB}BrainMaskCNR${TAB}NumDefects${TAB}LEulerNo${TAB}REulerNo\n")
	# HTML Web Report
	export REPORTREPO_TEMPLATE="https://github.com/seldamat/Surfer-webgems.git"
	export REPORTREPO=''
	## Files for Webreports
	export IEXT='mgz' && export OEXT='nii.gz'
	declare -g SURFs=("lh.pial" "lh.white" "lh.inflated" "rh.pial" "rh.white" "rh.inflated")
	declare -g MGZs=("T1" "brainmask" "wm" "aseg" "aparc+aseg" "aparc.DKTatlas+aseg" "aparc.a2009s+aseg" "wmparc")
	[ ! "${DEFACEFILES}" ] && declare -g DEFACEFILES=("orig" "T1" "001")
	[ ! "${CONVERTSURFFILES}" ] && declare -g CONVERTSURFFILES=("")
	[ ! "${CONVERTVOLFILES}" ] && declare -g CONVERTVOLFILES=("")
	#  pre-allocate variables here to fill later
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_defaults $@"
}
export -f surfergems_defaults
####################################################################################################################
#
# DATASET & JOB MANAGEMENT
#
####################################################################################################################
### DEFINE FUNCTION
#   check all files are present for subject
####################################################################################################################
##  TODO figure out longitudinal manifest...
##       distinguish between autorecon1, 2 and 3 completion (maybe use # of files present) - 20 for ar1
##       parallelize this :: 
###							write sub-function surfergems_files.subject
###							call surfergems_files.subject with gnu parallel & capture vars
### check status ---> running, successful jobs, failed jobs
function surfergems_files(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_files $@"	
	local status=""
	export MANIFEST=$(cat ${SOURCEPATH}/fs-files-manifest.txt) && export NUMFILES=$(echo "${MANIFEST}" | wc -l)	
	# build list of active/success/failed jobs (all inclusive)
	if [ -z "${RUNNINGSUBJECTS[*]}" ] && [ -z "${FINISHEDSUBJECTS[*]}" ] && [ -z "${FAILEDSUBJECTS[*]}" ];
	then
		surfergems_status
		return 0
	fi		
	# iterate and check subjects for status and against manifest
	for SUBJECT in ${SUBJECTS[@]}; do
		[ "$(echo ${RUNNINGSUBJECTS[@]} | grep ${SUBJECT})" ] && status=$(echo "🏃‍♂️  ${BLUE}${SUBJECT}${GREY} (running)")
		[ "$(echo ${FAILEDSUBJECTS[@]} | grep ${SUBJECT})" ] && status=$(echo "🚧  ${BLUE}${SUBJECT}${YELLOW} (failed)")
		[ "$(echo ${FINISHEDSUBJECTS[@]} | grep ${SUBJECT})" ] && status=$(echo "🏁  ${BLUE}${SUBJECT}${GREEN} (success)")
		for FILE in ${MANIFEST}; do
			if [ "$(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name ${FILE} )" ]; then
				printf "\r %s \r${GREEN} ✔ ${BLUE}${SUBJECT} :: ${FILE} ${GREY}(ok)${NC}\r" $(tput el)
				declare -g EXISTS+=("${SUBJECT} ${FILE}")
			else
				# >&2 echo -e "${LRED}⨯ ${BLUE}${SUBJECT} :: ${FILE} ${YELLOW}(missing)${NC}\n" 
				declare -g MISSING+=("${SUBJECT} ${FILE}")
			fi
		done
		NUMSUBFILES=$(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed "s|${SUBJECT}||g" | wc -w)
		# NUMFOUND=${#EXISTS} && NUMMISSING=${#MISSING} && PERCENTFOUND=$(echo "scale=2; ${NUMFOUND} / ${NUMFILES} * 100" | bc)
		if [ "${NUMSUBFILES}" != "${NUMFILES}" ]; then
			declare -g RERUNSUB+=("${SUBJECT}")
			# report manifest
			echo -e "${status} - ${YELLOW}${NUMSUBFILES} / ${NUMFILES} manifest files found${LRED} (incomplete)${NC}"
			# >&2 echo -e "${SUBJECT} incomplete file manifest ${NUMSUBFILES} / ${NUMFILES}"
		else
			echo -e "${status}  ${GREEN}✔ all files ${GREY}(ok)${NC}"
			declare -g COMPLETESUB+=("${SUBJECT}")
		fi
			## TODO - more elegant solution rather than brute text stream editing
			if [ ${VERBOSE} ]; then
				## missing volumes
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.mgz'))" ] && echo -e "${RED}x ${YELLOW}$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.mgz' | sed "s|${SUBJECT} ||g") | wc -w) volumes missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.mgz' | sed "s|${SUBJECT} ||g"))"
				## missing talairach
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE 'tal.*'))" ] && echo -e "${RED}x ${YELLOW}$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE 'tal.*' | sed "s|${SUBJECT} ||g") | wc -w) talairach files missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE 'tal.*' | sed "s|${SUBJECT} ||g"))"
				## missing nu
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE 'nu.*'))" ] && echo -e "${RED}x ${YELLOW}$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE 'nu.*' | sed "s|${SUBJECT} ||g") | wc -w) non-uniform intensity correction files missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE 'nu.*' | sed "s|${SUBJECT} ||g"))"
				## missing lh surfs
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'lh.*'))" ] && echo -e "${RED}x ${YELLOW}$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'lh.*') | wc -w) lh surfaces missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'lh.*'))"
				## missing rh surfs
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'rh.*'))" ] && echo -e "${RED}x ${YELLOW}$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'rh.*') | wc -w) rh surfaces missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'rh.*'))"
				## missing stats
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.stats'))" ] && echo -e "${RED}x ${YELLOW} $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.stats' | wc -w) stats files missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.stats' | sed "s|${SUBJECT}||g")))"
				## missing annot
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.annot'))" ] && echo -e "${RED}x ${YELLOW} $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.annot' | wc -w) annotations missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.annot' | sed "s|${SUBJECT}||g")))"
				## missing ctab
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.ctab'))" ] && echo -e "${RED}x ${YELLOW} $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.ctab' | wc -w) color lookup tables missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.ctab' | sed "s|${SUBJECT}||g")))"
				## missing labels
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.label'))" ] && echo -e "${RED}x ${YELLOW} $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.label' | wc -w) labels missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.label' | sed "s|${SUBJECT}||g")))"
				## missing text files
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.txt'))" ] && echo -e "${RED}x ${BRED} $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.txt' | wc -w) txt files missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.txt' | sed "s|${SUBJECT}||g")))"
				## missing logs
				[ "$(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep -oE '.*.log'))" ] && echo -e "${RED}x ${BRED} $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.log' | wc -w) log files missing ${NC}:: $(echo $(printf '%s %s\n' ${MISSING[@]} | grep "${SUBJECT}" | grep '.*.log' | sed "s|${SUBJECT}||g")))"
				## present volumes
				[ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.mgz'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.mgz' | sed "s|${SUBJECT} ||g") | wc -w) volumes ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.mgz' | sed "s|${SUBJECT} ||g"))"
				## present talairach
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE 'tal.*'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE 'tal.*' | sed "s|${SUBJECT} ||g") | wc -w) talairach files ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE 'tal.*' | sed "s|${SUBJECT} ||g"))"
				## present nu
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE 'nu.*'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE 'nu.*' | sed "s|${SUBJECT} ||g") | wc -w) talairach files ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE 'nu.*' | sed "s|${SUBJECT} ||g"))"
				## present lh surfs
				[ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'lh.*'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'lh.*') | wc -w) lh surfaces ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'lh.*'))"
				## present rh surfs
				[ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'rh.*'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'rh.*') | wc -w) rh surfaces ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | sed 's|.*.label||g' | sed 's|.*.txt||g' | sed 's|.*.stats||g' | sed 's|.*.mgz||g' | sed 's|.*.dat||g' | sed 's|.*annot||g' | sed 's|.*mgh||g' | grep -oE 'rh.*'))"
				## present stats
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.stats'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.stats' | wc -w) stats files ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.stats' | sed "s|${SUBJECT}||g")))"
				## present annot
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.annot'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.annot' | wc -w) annotations ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.annot' | sed "s|${SUBJECT}||g")))"
				## present ctab
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.ctab'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.ctab' | wc -w) color lookup tables ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.ctab' | sed "s|${SUBJECT}||g")))"
				## present labels
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.label'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.label' | wc -w) labels ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.label' | sed "s|${SUBJECT}||g")))"
				## present text files
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.txt'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.txt' | wc -w) txt files ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.txt' | sed "s|${SUBJECT}||g")))"
				## present log
				# [ "$(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep -oE '.*.log'))" ] && echo -e "${GREEN}✔ $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.log' | wc -w) log files ok ${NC}:: $(echo $(printf '%s %s\n' ${EXISTS[@]} | grep "${SUBJECT}" | grep '.*.log' | sed "s|${SUBJECT}||g")))"
			fi		
	done
	# echo -e "\n${GREEN}EXISTING FILE MANIFEST:${NC} $(printf '%s ' ${EXISTS[@]})" >&2
	# echo -e "\n${YELLOW}MISSING FILE MANIFEST:${NC} $(printf '%s ' ${MISSING[@]})" >&2
	declare -g FILECHECK='done'
	return 0
}
export -f surfergems_files
####################################################################################################################
### DEFINE FUNCTION
#   Get Arrays of Subjects, Runtimes and Status for Active, Completed and Failed Recons
####################################################################################################################
##  TODO this can be parallelized with a major rewrite (subfunctions with serial input and concat output)
##		 sometimes subjects aren't running but have isrunning
##		 need to distinguish between local and remote running jobs
function surfergems_status(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_status $@"
	# declare vars for status check & printing
	[ ! "${STATUS}" ] && declare -g STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${GREEN}done${NC}" "${YELLOW}failed${NC}" "${RED}incomplete${NC}")	
	echo -e "\nFinding FreeSurfer Jobs with Status: ${STATUS[@]} \n\n   🔦 Searching Dataset\n   ⤷ ${GGREY}${YBC}${SUBJECTS_DIR}${NC}\n"
	# Find all subjects with IsRunning file, get current status, time and host
	if [ "$(echo ${STATUS[*]} | grep 'active')" ]; then
	    for SUBJECT in ${SUBJECTS[@]}; do
		    declare -g RUNNINGSUBJECTS+=($(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'IsRunning*' 2> /dev/null | sed "s|${SUBJECTS_DIR}||g" | sed "s|scripts/IsRunning.*||g" | sed "s|/||g"))
		done
		for SUBJECT in ${RUNNINGSUBJECTS[@]}; do
			declare -g RUNNINGSTATUS+=("$(tail -n 1 ${SUBJECTS_DIR}/${SUBJECT}/scripts/recon-all-status.log | sed "s|#@#|⦿|g" | awk '{i = 6; for (--i; i>=0; i--){$(NF-i)=""}print}'| awk '{{$NF=""}print}')")
			declare -g RUNNINGTIME+=("$(egrep -o '[A-Z][a-z]{1,2}.[A-Z][a-z]{1,2}.{1,2}[1-9]{1,2}.{1,2}[0-2][0-9]:[0-9][0-9]:[0-9][0-9].[A-Z]{1,3}.[0-9]{2,4}' ${SUBJECTS_DIR}/${SUBJECT}/scripts/recon-all-status.log | tail -n 1)")
			declare -g RUNNINGID+=("${SUBJECT} $(grep "PROCESSID" ${SUBJECTS_DIR}/${SUBJECT}/scripts/IsRunning* | awk '{print $NF}')")
			declare -g RUNNINGHOSTS+=("$(grep "HOST" ${SUBJECTS_DIR}/${SUBJECT}/scripts/IsRunning* | awk '{print $NF}' | sed 's/.local//')")
		done
	fi
	# Find all subjects with recon-all.log file and list those with finished message at end of log
	if [ "$(echo ${STATUS[*]} | grep 'success')" ]; then
		RECONS=""
		for SUBJECT in ${SUBJECTS[@]}; do
		    RECONS+="$(find ${SUBJECTS_DIR}/${SUBJECT}/scripts \( ! -regex '.*/\..*' \)  -name 'recon-all.log' -not -iwholename '*fsaverage*' 2> /dev/null) "
		done
		for RECON in ${RECONS}; do
			if [ "$(tail -n 5 ${RECON} | grep -B 0 "finished without error")" ]; then
				declare -g FINISHEDSUBJECTS+=("$(tail -n 5 ${RECON} | grep -B 0 "finished without error" | awk '{print $3}')")
				# FINISHTIMES+=("$(tail -n 5 ${RECON} | grep -B 0 "finished without error" | sed 's|\\n| |g' | awk '{i = 6; for (--i; i >= 0; i--){ printf "%s ",$(NF-i)} print ""}';)")
				declare -g FINISHTIMES+=("$(tail -n 5 ${RECON} | grep -B 0 "finished without error" | sed 's|\\n| |g' | egrep -o '[A-Z][a-z]{1,2}.[A-Z][a-z]{1,2}.{1,2}[1-9]{1,2}.{1,2}[0-2][0-9]:[0-9][0-9]:[0-9][0-9].[A-Z]{1,3}.[0-9]{2,4}' | tail -n 1)")
				declare -g FINISHEDHOSTS+=("$(grep "hostname" ${RECON} | tail -n 1 | awk '{print $NF}' | sed 's/.local//')")
				declare -g STARTTIMES+=("$(tail -n 5 ${RECON} | grep -B 0 "Started at" | head -n 1 | sed 's/Started at //g')")
			fi
		done
	fi
	if [ "$(echo ${STATUS[*]} | grep 'failed')" ]; then
		RECONS=""
		for SUBJECT in ${SUBJECTS[@]}; do
			RECONS+="$(find ${SUBJECTS_DIR}/${SUBJECT}/scripts \( ! -regex '.*/\..*' \)  -name 'recon-all.log' -not -iwholename '*fsaverage*' 2> /dev/null) "			
		done
		for RECON in ${RECONS}; do
			SUBJECT=$(echo ${RECON} | sed "s|${SUBJECTS_DIR}/||g" | sed 's|/scripts/recon-all.log||g' | sed 's|/||g')
			if [ "$(tail -n 10 ${RECON} | grep -B 0 "exited with ERRORS at")" ]; then
				declare -g FAILEDSUBJECTS+=("$(tail -n 5 ${RECON} | grep -B 0 "exited with ERRORS at" | awk '{print $3}')")
				declare -g FAILPOINT+=("$(tail -n 5 "${SUBJECTS_DIR}/${SUBJECT}/scripts/recon-all-status.log" | grep '#@#' | tail -n 1 | sed "s|#@#|⦿|g" | awk '{i = 6; for (--i; i>=0; i--){$(NF-i)=""}print}'| awk '{{$NF=""}print}')")
				declare -g FAILTIMES+=("$(tail -n 5 ${RECON} | grep -B 0 "exited with ERRORS at" | egrep -o '[A-Z][a-z]{1,2}.[A-Z][a-z]{1,2}.{1,2}[1-9]{1,2}.{1,2}[0-2][0-9]:[0-9][0-9]:[0-9][0-9].[A-Z]{1,3}.[0-9]{2,4}' | tail -n 1)")
				declare -g FAILEDHOSTS+=("$(grep 'hostname' ${RECON} | tail -1 | awk '{print $NF}' | sed 's/.local//')")
			fi
			# Collect any other subjects that don't show running files, a fail message at end of log OR
			if [ ! "$(find ${SUBJECTS_DIR}/${SUBJECT}/scripts \( ! -regex '.*/\..*' \) -name 'IsRunning*' 2> /dev/null)" ] && [ ! "$(tail -n 5 ${RECON} | grep -B 0 "finished without error")" ] && [ ! "$(tail -n 10 ${RECON} | grep -B 0 "exited with ERRORS at")" ]; then
				declare -g FAILEDSUBJECTS+=("$(echo ${SUBJECT})")
				declare -g FAILPOINT+=("$(tail -n 5 "${SUBJECTS_DIR}/${SUBJECT}/scripts/recon-all-status.log" | grep '#@#' | tail -n 1 | sed "s|#@#|⦿|g" | awk '{i = 6; for (--i; i>=0; i--){$(NF-i)=""}print}'| awk '{{$NF=""}print}')")
				declare -g FAILTIMES+=("$(egrep -o '[A-Z][a-z]{1,2}.[A-Z][a-z]{1,2}.{1,2}[1-9]{1,2}.{1,2}[0-2][0-9]:[0-9][0-9]:[0-9][0-9].[A-Z]{1,3}.[0-9]{2,4}' ${SUBJECTS_DIR}/${SUBJECT}/scripts/recon-all-status.log | tail -n 1)")
				declare -g FAILEDHOSTS+=("$(grep 'hostname' ${RECON} | tail -1 | awk '{print $NF}' | sed 's/.local//')")
			fi
		done
	fi
	# SUBJECT can either be running, finished running or failed running
	declare -g SUBJECTS=("${RUNNINGSUBJECTS[@]}" "${FINISHEDSUBJECTS[@]}" "${FAILEDSUBJECTS[@]}")
	#	
	if [ "$(echo ${STATUS[*]} | grep 'incomplete')" ] || [ "$(echo ${STATUS[*]} | grep 'done')" ]; then
		surfergems_files
	fi
	# signal that the status has been checked (prevents this from being run twice when called to populate an empty subjects variable that may be empty anyway bc none satisfy conditions (i.e. failed))
	export STATUSCHECK='done'
	export SUBJECTS
	export RUNNINGSUBJECTS
	export FINISHEDSUBJECTS
	export FAILEDSUBJECTS
	surfergems_printstatus
	return 0
}
export -f surfergems_status
####################################################################################################################
### DEFINE FUNCTION
#	get individual subject status (inactive, not used anywhere yet)
####################################################################################################################
## TODO
function surfergems_status_subject(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_status_subject $@"		
	# get last reported recon status
	echo "$(tail -n 5 ${SUBJECTS_DIR}/${1}/scripts/recon-all-status.log | grep "#@#" | tail -n 1 | sed "s|#@#||g" | awk '{i = 6; for (--i; i>=0; i--){$(NF-i)=""}print}' | awk '{{$NF=""}print}')"
}
export -f surfergems_status_subject
####################################################################################################################
### DEFINE FUNCTION
#   stop all current recon jobs using either SGE (if available) or KILL command
####################################################################################################################
##  TODO can use host information to kill remote jobs
function surfergems_killJobs(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_killJobs $@"
	[ -z ${STATUSCHECK} ] && STATUS=('active') && surfergems_status
	echo -e "\n 🗑  Hanging Up Active Processes: ${SUBJECTS[@]}\n"
	for subject in ${SUBJECTS[@]}; do
		kill -9 $(echo $(printf '%s %s\n' ${RUNNINGID[@]} | grep "${SUBJECT}") | awk '{print $NF}')
		find ${SUBJECTS_DIR}/${subject} \( ! -regex '.*/\..*' \)  -name 'IsRunning*' -exec rm -v {} \;
	done
	## TODO this is dangerous
	# [ $(which qdel) ] && echo -e '\n\t Deleting GRID jobs... for ' $(whoami) && qdel -u $(whoami)
	# [ ! $(which qdel) ] && echo -e "🖐  ${YELLOW}Hanging up all local processes matching ${GREY}'${KILLPATTERN}'${YELLOW} pattern${NC}" && kill -9 $(echo $(ps aux | grep ${KILLPATTERN} | tail -n +2 | awk '{print $2}')) 2> /dev/null
	# [ "$(find ${SUBJECTS_DIR}/ \( ! -regex '.*/\..*' \)  -name 'IsRunning*' 2> /dev/null)" ] && parallel -k --link rm -v {} ::: $(find ${SUBJECTS_DIR}/  -name 'IsRunning*' 2> /dev/null)
	# [ -z "${STATUS}" ] && exit
}
export -f surfergems_killJobs
####################################################################################################################
### DEFINE FUNCTION
#   rerun failed / incomplete
####################################################################################################################
##  TODO run with -make all by default, allow user to specify flags	
##   	 create SGE script if sge detected
##   	 otherwise run with gnu parallel
function surfergems_rerun(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_rerun $@"
	echo 'work in progress'
}
export -f surfergems_rerun
####################################################################################################################
#
# PRINTING TO FILE
#
####################################################################################################################
### DEFINE FUNCTION
#   parse output files for stats
####################################################################################################################
## TODO make individual functions for each of the stats and make them option accessible 
##		must update TABLE header based on this
function surfergems_stats(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_stats $@"		
	local subject="$@"
	# declare vars for status check & printing
	[ ! "${STATUS}" ] && declare -g STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${YELLOW}failed${NC}" "${GREEN}done${NC}" "${RED}incomplete${NC}")		
	# check for subject input
	if [ ! "${subject}" ]
	then
		if [ ! "$(echo ${SUBJECTS[@]})" ]
		then
			# find finished subjects and create global var if not already existing
			# -- only convert finished subjects`
			surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}") && local subject="${SUBJECTS[@]}"
		else
			# otherwise just use existing global variable and run serially
			local subject="${SUBJECTS[@]}"
		fi
	fi
	# summarize subject edits
	if echo ${subject} | parallel -k --link '(surfergems_subject_edits {})' 2> >(zenity --progress --auto-kill --auto-close --title="💎🏄‍♂️ Surfer Gems | Edits Summary" --text="Summarizing Subject Edits" --width=300 --height=100) >&4
	then
		>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY}  parallel -k --link surfergems_subject_edits {} ::: ${subject}${NC}\n"
	else
		>&2 printf "${BRED}${ERROR}◀︎|⁃‣ERROR${GREY}  parallel -k --link surfergems_subject_edits {} ::: ${subject}${NC} failed\n"
		return 1
	fi	
	# generate file manifest
	if surfergems_files
	then
		>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY}  surfergems_files${NC}\n"
	else
		>&2 printf "${ERROR}◀︎|⁃‣ERROR${GREY}  surfergems_files${NC} failed\n"		
		return 1
	fi			
	# Calculate stats for all subjects
	if surfergems_stats_calc "${subject}"
	then
		>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY}  surfergems_stats_calc ${subject}${NC}\n"
	else
		>&2 printf "${ERROR}◀︎|⁃‣ERROR${GREY}  surfergems_stats_calc ${subject}${NC} failed\n"		
		return 1
	fi
	# Build table
	if surfergems_stats_table
	then
		>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY}  surfergems_stats_table ${NC}\n"
	else
		>&2 printf "${ERROR}◀︎|⁃‣ERROR${GREY}  surfergems_stats_table ${NC} failed\n"		
		return 1
	fi		
	return 0
}
export -f surfergems_stats
####################################################################################################################
### DEFINE FUNCTION
#   parse output files for stats
####################################################################################################################
## TODO make individual functions for each of the stats and make them option accessible 
##		must update TABLE header based on this
function surfergems_stats_calc(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_stats_calc $@"	
	local subject="$@"	
	# declare vars for status check & printing
	[ ! "${STATUS}" ] && declare -g STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${YELLOW}failed${NC}" "${GREEN}done${NC}" "${RED}incomplete${NC}")
	# Start loop across subjects
	counter=0
	# check for subject input
	if [ ! "${subject}" ]
	then
		if [ ! "${SUBJECTS[@]}" ]
		then
			# find finished subjects and create global var if not already existing
			# -- only convert finished subjects`
			echo 'check again'
			surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}") && local subject=${SUBJECTS[@]}	
		else
			# otherwise just use existing global variable and run serially
			local subject=${SUBJECTS[@]}
		fi
	fi	
	# support for serial processing
	for s in ${subject}; do
		# Calculate time spent on current recon stage for active jobs
		if [ "$(echo ${RUNNINGSUBJECTS[*]} | grep -oE ${s})" ]
		then
			declare -g status+=('running')
			declare -g hname+=("$(grep "HOST" ${SUBJECTS_DIR}/${s}/scripts/IsRunning* | sed 's/HOST //g' | sed 's/.local//g')")
			tstart="$(tail -n 1 ${SUBJECTS_DIR}/${s}/scripts/recon-all-status.log | sed "s|#@#|⦿|g"  | egrep -o '[A-Z][a-z]{1,2}.[A-Z][a-z]{1,2}.{1,2}[1-9]{1,2}.{1,2}[0-2][0-9]:[0-9][0-9]:[0-9][0-9].[A-Z]{1,3}.[0-9]{2,4}' ${SUBJECTS_DIR}/${s}/scripts/recon-all-status.log | tail -n 1)"
			if [ "$(echo ${tstart} | egrep '\d{1,2}:\d{1,2}:\d{1,2}')" ]; then
				tnow=$(date) && tstart=$(date -d "${tstart}" '+%s') && tnow=$(date -d "${tnow}" '+%s') && trun=$((tnow-tstart))	
				declare -g runtime+=("$(printf '%02d:%02d:%02d\n' $(($trun / 3600)) $(($trun % 3600 / 60)) $(($trun % 60)))")
			else
				declare -g runtime+=("$(echo nan)")
			fi
		fi
		# calculate total time spent running
		if [ "$(echo ${FINISHEDSUBJECTS[*]} | grep -oE ${s})" ]
		then
			if [ "$(echo ${RERUNSUB[*]} | grep -oE ${s})" ]
			then
				status+=('incomplete')
			elif [ "$(echo ${COMPLETESUB[*]} | grep -oE ${s})" ]
			then
				status+=('complete')
			else
				status+=('success')
			fi			
			declare -g hname+=("$(grep "hostname" ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | tail -1 | awk '{print $NF}' | sed 's/.local//')")
			tstart="$(tail -n 5 ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | grep -B 0 "Started at" | head -n 1 | sed 's/Started at //g')"
 			tdone="$(tail -n 5 ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | grep -B 0 "finished without error" | sed 's|\\n| |g' | egrep -o '[A-Z][a-z]{1,2}.[A-Z][a-z]{1,2}.{1,2}[1-9]{1,2}.{1,2}[0-2][0-9]:[0-9][0-9]:[0-9][0-9].[A-Z]{1,3}.[0-9]{2,4}' ${SUBJECTS_DIR}/${s}/scripts/recon-all-status.log | tail -n 1)"
			if [ "$(echo ${tstart} | egrep '\d{1,2}:\d{1,2}:\d{1,2}')" ] && [ "$(echo ${tdone} | egrep '\d{1,2}:\d{1,2}:\d{1,2}')" ]; then
				tstart=$(date -d "${tstart}" '+%s') && tdone=$(date -d "${tdone}" '+%s') && trun=$((tdone-tstart))
				declare -g runtime+=("$(printf '%02d:%02d:%02d\n' $(($trun / 3600)) $(($trun % 3600 / 60)) $(($trun % 60)))")
			else
				declare -g runtime+=("$(echo nan)")
			fi
		fi
		if [ $(echo ${FAILEDSUBJECTS[*]} | grep -oE ${s}) ]; then
			declare -g status+=('failed')
			declare -g hname+=("$(grep "hostname" ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | tail -1 | awk '{print $NF}' | sed 's/.local//')")
			## TODO - is there anyway to figure out how long recon was running before failure? there is no start time anywhere?
			declare -g runtime+=("$(echo nan)")
		fi
		# get last reported recon status
		declare -g reconstatus+=("$(tail -n 5 ${SUBJECTS_DIR}/${s}/scripts/recon-all-status.log | grep "#@#" | tail -n 1 | sed "s|#@#||g" | awk '{i = 6; for (--i; i>=0; i--){$(NF-i)=""}print}' | awk '{{$NF=""}print}')") 			
		# Count up the number of brainmask edits
		# printf "\r%s✏️  📊  %d/%d -- Compiling Edits" "$(tput el)" $counter ${#SUBJECTS[*]} && surfergems_subject_edits ${s}
		declare -g bmedits+=($(cat ${SUBJECTS_DIR}/${s}/stats/bm.erase.dat | awk '{print $1}'))
		declare -g wmerased+=($(cat ${SUBJECTS_DIR}/${s}/stats/wm.erase.dat | awk '{print $1}'))
		declare -g wmfilled+=($(cat ${SUBJECTS_DIR}/${s}/stats/wm.fill.dat | awk '{print $1}'))		
		# get talairach quality assurance
		declare -g talqa+=("$(grep  "TalAviQA" ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | tail -1 | awk '{print $NF}')")
		# count defects
		declare -g ndef+=("$(grep "defects" ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | tail -1 | awk '{print $1}')") || [ -z "${ndef[$counter]}" ]
		declare -g leno+=($(grep -Eo "lheno =.*[ *$]-[0-9]{1,4}" ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | tail -n 1 | awk '{print $NF}'))
		declare -g reno+=($(grep -Eo "rheno =.*[ *$]-[0-9]{1,4}" ${SUBJECTS_DIR}/${s}/scripts/recon-all.log | tail -n 1 | awk '{print $NF}'))
		# Calculate CNR
		# printf "\r%s✏️  📊  %d/%d -- Calculating CNR" $(tput el) ${counter} ${#SUBJECTS[*]}
		declare -g bcnr+=("$(${FREESURFER_HOME}/bin/mri_cnr ${SUBJECTS_DIR}/${s}/surf ${s}/mri/orig/001.mgz | tail -1 | awk '{print $NF}')")
		declare -g acnr+=("$(${FREESURFER_HOME}/bin/mri_cnr ${SUBJECTS_DIR}/${s}/surf ${s}/mri/T1.mgz | tail -1 | awk '{print $NF}')")
		# set nans for stats with no vals
		[ ! "${hname[$counter]}" ] && hname[$counter]=nan
		[ ! "${runtime[$counter]}" ] && runtime[$counter]=nan
		[ ! "${status[$counter]}" ] && status[$counter]=nan
		[ ! "${reconstatus[$counter]}" ] && reconstatus[$counter]=nan
		[ ! "${bcnr[$counter]}" ] && bcnr[$counter]=nan
		[ ! "${acnr[$counter]}" ] && acnr[$counter]=nan
		[ ! "${ndef[$counter]}" ] && ndef[$counter]=nan
		[ ! "${leno[$counter]}" ] && leno[$counter]=nan
		[ ! "${reno[$counter]}" ] && reno[$counter]=nan
		[ ! "${bmedits[$counter]}" ] && bmedits[$counter]=nan
		[ ! "${wmerased[$counter]}" ] && wmerased[$counter]=nan
		[ ! "${wmfilled[$counter]}" ] && wmfilled[$counter]=nan
		#
		((counter++))
	done
	declare -g reconstatus
	return 0
}
export -f surfergems_stats_calc
####################################################################################################################
### DEFINE FUNCTION
#   create summary statistic files
####################################################################################################################
function surfergems_morph_stats(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_morph_stats $@"	
	local subjects="$@"
	[ ! ${measures} ] && local measures=${MEASURES[@]}
	[ ! ${atlas} ] && local atlas=${ATLAS[@]}	
	if [ ! "${subjects}" ]; then
		if [ ! ${STATUSCHECK} ] && [ ! "${SUBJECTS}" ]; then
			surfergems_status
			declare -g SUBJECTS=("${RUNNINGSUBJECTS[@]}" "${FINISHEDSUBJECTS[@]}" "${FAILEDSUBJECTS[@]}")
		fi
		local subjects=$(echo ${SUBJECTS[@]})
	fi
	subjects=$(echo ${subjects} | sed "s|${AVERAGENAME}||g")
	## Print surface area statistics
	if [ "${subjects}" ]
	then
		for atla in ${atlas}; do
			if [ ${atla} = 'aseg' ]; then
				## Print volume (mm^3) information
				if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/recon-volume-stats.txt ]
				then
					if ${FREESURFER_HOME}/bin/asegstats2table --subjects ${subjects} --tablefile ${SUBJECTS_DIR}/recon-volume-stats.txt -m 'volume' --skip >&4
					then
						>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY} ${FREESURFER_HOME}/bin/asegstats2table --subjects ${s} --tablefile ${SUBJECTS_DIR}/recon-volume-stats.txt -m 'volume' --skip${NC}\n"
					else
						>&2 printf "${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/asegstats2table --subjects ${s} --tablefile ${SUBJECTS_DIR}/recon-volume-stats.txt -m 'volume' --skip${NC}\n"
					fi
				else
					>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/recon-volume-stats.txt${NC}"
				fi
				if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/recon-mean-intensity-stats.txt ]
				then
					if ${FREESURFER_HOME}/bin/asegstats2table --subjects ${subjects} --tablefile ${SUBJECTS_DIR}/recon-mean-intensity-stats.txt -m 'mean' --skip >&4
					then
						>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY} ${FREESURFER_HOME}/bin/asegstats2table --subjects ${s} --tablefile ${SUBJECTS_DIR}/recon-mean-intensity-stats.txt -m 'mean' --skip${NC}\n"
					else
						>&2 printf "${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/asegstats2table --subjects ${s} --tablefile ${SUBJECTS_DIR}/recon-mean-intensity-stats.txt -m 'mean' --skip${NC}\n"
					fi
				else
					>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/recon-mean-intensity-stats.txt${NC}"						
				fi
				if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/recon-std-intensity-stats.txt ]
				then
					if ${FREESURFER_HOME}/bin/asegstats2table --subjects ${subjects} --tablefile ${SUBJECTS_DIR}/recon-std-intensity-stats.txt -m 'std' --skip >&4
					then
						>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY} ${FREESURFER_HOME}/bin/asegstats2table --subjects ${s} --tablefile ${SUBJECTS_DIR}/recon-std-intensity-stats.txt -m 'std' --skip${NC}\n"
					else
						>&2 printf "${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/asegstats2table --subjects ${s} --tablefile ${SUBJECTS_DIR}/recon-std-intensity-stats.txt -m 'std' --skip${NC}\n"
					fi
				else
					>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/recon-std-intensity-stats.txt${NC}"						
				fi							
			elif [ ${atla} = 'aparc' ] || [ ${atla} = 'aparc.a2009s' ]; then
				## Print surface (vertex) statistics 
				for measure in ${measures}; do
					if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt ]
					then						
						if ${FREESURFER_HOME}/bin/aparcstats2table --hemi lh -m ${measure} --subjects ${subjects} -p ${atla} -t ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt --skip >&4
						then
							>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY} ${FREESURFER_HOME}/bin/aparcstats2table --hemi lh -m ${measure} --subjects ${subjects} -p ${atla} -t ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt --skip${NC}\n"
						else
							>&2 printf "${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/aparcstats2table --hemi lh -m ${measure} --subjects ${subjects} -p ${atla} -t ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt --skip${NC}\n"
						fi
					else						
						>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt${NC}"						
					fi
					if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/recon-rh-${measure}-${atla}-stats.txt ]
					then																					
						if ${FREESURFER_HOME}/bin/aparcstats2table --hemi rh -m ${measure} --subjects ${subjects} -p ${atla} -t ${SUBJECTS_DIR}/recon-rh-${measure}-${atla}-stats.txt --skip >&4
						then
							>&4 printf "${GREEN}◀︎|⁃‣SUCCESS${GREY} ${FREESURFER_HOME}/bin/aparcstats2table --hemi rh -m ${measure} --subjects ${subjects} -p ${atla} -t ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt --skip${NC}\n"
						else
							>&2 printf "${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/aparcstats2table --hemi rh -m ${measure} --subjects ${subjects} -p ${atla} -t ${SUBJECTS_DIR}/recon-lh-${measure}-${atla}-stats.txt --skip${NC}\n"
						fi
					else						
						>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/recon-rh-${measure}-${atla}-stats.txt${NC}"						
					fi								
				done
			fi
		done
	else
		return 1
	fi
}
export -f surfergems_morph_stats
####################################################################################################################
## DEFINE FUNCTION
#  print stats to table
#  TODO overwrite check?
####################################################################################################################
function surfergems_stats_table(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_stats_table $@"	
	counter=0
	for SUBJECT in ${SUBJECTS[@]}; do
		declare -g TABLE+=($(echo "${SUBJECT}\t${hname[$counter]}\t${status[$counter]}\t${runtime[$counter]}\t${reconstatus[$counter]}\t${bmedits[$counter]}\t${wmfilled[$counter]}\t${wmerased[$counter]}\t${talqa[$counter]}\t${bcnr[$counter]}\t${acnr[$counter]}\t${ndef[$counter]}\t${leno[$counter]}\t${reno[$counter]}\n"))
		((counter++))
	done
	# echo -e "${TABLE[@]}" > ${SUBJECTS_DIR}/check-recons-report-$(date '+%H:%M:%S|%Y-%m-%d').txt && echo -e '\n 💾 Table written to'${SUBJECTS_DIR}'/check-recons-report.txt\n'
	echo -e "${TABLE[@]}" > ${SUBJECTS_DIR}/recon-statistics.txt && echo -e '\n 💾 Table written to'${SUBJECTS_DIR}'/recon-statistics.txt\n'
	# [ ${VERBOSE} ] && cat ${SUBJECTS_DIR}/recon-statistics.txt | column -s $'\t' -t
	return 0
}
export -f surfergems_stats_table
####################################################################################################################
### DEFINE FUNCTION
#   calculate CNR
####################################################################################################################
## TODO 
function surfergems_subject_cnr(){
>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_subject_cnr $@"	
echo 'work in progress'
}
export -f surfergems_subject_cnr
####################################################################################################################
### DEFINE FUNCTION
#   convert files
####################################################################################################################
function surfergems_convert(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_convert $@\r"
	local convert=${1} && shift
	local iext=${1} && shift
	[ "${iext}" = 'null' ] && local iext=''
	local oext=${1} && shift 
	local subject=${1} && shift
	local files=("$@")
	local counter=0
	# populate with default files if no user specification
	[ "${CONVERTVOL}" ] && [ -z ${files} ] && local files=("T1" "brainmask" "wm" "aseg" "aparc+aseg" "aparc.DKTatlas+aseg" "aparc.a2009s+aseg" "wmparc")	
	[ "${CONVERTSURF}" ] && [ -z ${files} ] && local files=("lh.white" "lh.pial" "lh.inflated" "rh.white" "rh.pial" "rh.inflated")
	# check for subject input
	if [ ! ${subject} ]; then
		if [ ! ${SUBJECTS} ]; then
			# find finished subjects and create global var if not already existing
			# -- only convert finished subjects`
			surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}") && local subject=${SUBJECTS[@]}			
		else
			# otherwise just use existing global variable
			local subject=${SUBJECTS[@]}
		fi
	fi
	# support for serial processing
	for s in ${subject}; do 
		for f in ${files[@]}; do
			[ ${iext} ] && [ ! "$(echo ${iext} | grep '^\.')" ] && iext=".${iext}"
			[ ! "$(echo ${oext} | grep '^\.')" ] && oext=".${oext}"
			local filepath=$(find ${SUBJECTS_DIR}/${s} \( ! -regex '.*/\..*' \)  -name "${f}${iext}")
			# printf "\r %s \r${BLUE} 🧠 Converting ${GREY}${s} ${NC}:: ${f}${iext} ⇢ ${f}${oext}\r" $(tput el)
			if [ ! -z  "${filepath}" ]; then			
				if [ ! -z "${OVERWRITE}" ] || [ ! $(find ${SUBJECTS_DIR}/${s} \( ! -regex '.*/\..*' \)  -name "${f}${oext}") ]; then 
					[ ! -z "${OVERWRITE}" ] && >&2 printf "${OVERWRITE} %s :: %s%s" ${s} ${f} ${oext}
					if [ "${convert}" = 'vol' ]; then
						if ${FREESURFER_HOME}/bin/mri_convert \
															${filepath} \
															 $(echo ${filepath} | sed "s|${iext}|${oext}|") >&4												 
						then
							>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  ${FREESURFER_HOME}/bin/mri_convert ${filepath} $(echo ${filepath} | sed "s|${iext}|${oext}|")${BLUE}\n"
						else
							>&2 printf "\r${BRED}◀︎|⁃‣ERROR${NC}  ${FREESURFER_HOME}/bin/mri_convert ${filepath} $(echo ${filepath} | sed "s|${iext}|${oext}|") FAILED\n"
							return 1
						fi
					elif [ "${convert}" = 'surf' ]; then
						if ${FREESURFER_HOME}/bin/mris_convert \
															${SUBJECTS_DIR}/${s}/surf/${f}${iext} \
															${SUBJECTS_DIR}/${s}/surf/${f}.${oext} >&4
						then
							>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC}  ${FREESURFER_HOME}/bin/mris_convert ${SUBJECTS_DIR}/${s}/surf/${f}${iext} ${SUBJECTS_DIR}/${s}/surf/${f}.${oext}\n"
						else
							>&2 printf "\r${BRED}◀︎|⁃‣ERROR${NC}  ${FREESURFER_HOME}/bin/mris_convert ${SUBJECTS_DIR}/${s}/surf/${f}${iext} ${SUBJECTS_DIR}/${s}/surf/${f}.${oext} FAILED\n"
							return 1
						fi	
					else
						 >&2 echo -e "${BRED}ERROR :: Unknown Conversion (Surf or Vol?)${NC}"
						return 1
					fi
				else
					>&1 echo -e "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} $(find ${SUBJECTS_DIR}/${s} \( ! -regex '.*/\..*' \)  -name "${f}${oext}")${NC}"
				fi
				((counter ++))
			else
				>&1 echo -e  "${YELLOW}◀︎|⁃‣${YELLOW}WARNING${NC} ${f}${iext} not found for ${subject}"
				return 0
			fi
		done		
	done
	return 0
}
export -f surfergems_convert
####################################################################################################################
## DEFINE FUNCTION
#  deface files
#				TODO (no overwrite check?)
####################################################################################################################
function surfergems_deface(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_deface $@"		
	local subject=${1} && shift
	local iext=${1} && shift
	local files="$@"
	local counter=0
	# use global variables for files if not specified
	[ ! "${files}" ] && files=${DEFACEFILES[@]}
	# check for subject input
	if [ ! ${subject} ]; then
		if [ ! ${SUBJECTS} ]; then
			# find finished subjects and create global var if not already existing
			# -- only convert finished subjects`
			surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}") && local subject=${SUBJECTS[@]}			
		else
			# otherwise just use existing global variable
			local subject=${SUBJECTS[@]}
		fi
	fi	
	for s in ${subject}; do
		for f in ${files}; do
			local filepath=$(find ${SUBJECTS_DIR}/${s}  -name ${f}".${iext}")
			if [ -f ${filepath} ]; then
				cp -vn ${filepath} $(echo ${filepath} | sed "s|.${iext}|_orig.${iext}|g") >&2
				if ${FREESURFER_HOME}/bin/mri_deface \
												${filepath} \
												${SOURCEPATH}'/bin/talairach_mixed_with_skull.gca' \
												${SOURCEPATH}'/bin/face.gca' \
												${filepath} >&4
				then
					printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC}  ${FREESURFER_HOME}/bin/mri_deface ${filepath} ${SOURCEPATH}'/bin/talairach_mixed_with_skull.gca' ${SOURCEPATH}'/bin/face.gca' ${filepath}\n\n" >&4
				else
					printf "\r${BRED}◀︎|⁃‣ERROR${NC}  ${FREESURFER_HOME}/bin/mri_deface ${filepath} ${SOURCEPATH}'/bin/talairach_mixed_with_skull.gca' ${SOURCEPATH}'/bin/face.gca' ${filepath} FAILED\n" >&2
					return 1
				fi					
			else
				echo -e  "${YELLOW}◀︎|⁃‣${YELLOW}WARNING${NC} ${f}.${iext} not found for ${subject}\r" >&2
				return 0
			fi		
		done
	done
	return 0
}
export -f surfergems_deface
####################################################################################################################
### DEFINE FUNCTION
#   summarize subject edits
####################################################################################################################
function surfergems_subject_edits(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_subject_edits $@"		
	local subject="$@"
	local counter=0	
	# check for subject input
	if [ ! "${subject}" ]
	then
		if [ ! "${SUBJECTS[@]}" ]
		then
			# find finished subjects and create global var if not already existing
			# -- only convert finished subjects`
			surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}") && local subject=${SUBJECTS[@]}	
		else
			# otherwise just use existing global variable and run serially
			local subject=${SUBJECTS[@]}
		fi
	fi
	# supports list for serial processing
	for s in ${subject}; do
		# map edits to surface
		if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/bm.erase.mgh ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/bm.clone.mgh ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/diff.mgh ]
		then
			if ${FREESURFER_HOME}/bin/bmedits2surf --self --tmp ${SUBJECTS_DIR}/${s}/qc \
												   --s ${s} --overwrite >&4
			then
				 >&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  ${FREESURFER_HOME}/bin/bmedits2surf --self --tmp ${SUBJECTS_DIR}/${s}/qc --s ${s} --overwrite${BLUE}\n"
		 	else
				 >&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/bmedits2surf --self --tmp ${SUBJECTS_DIR}/${s}/qc --s ${s} --overwrite FAILED${BLUE}\n"
		 		continue
		 	fi
		 else
			 >&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} brainmask edits summary files already exist${NC}"		 			 	
		fi
		if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/wm.erase.mgh ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/wm.fill.mgh ]; then
			if ${FREESURFER_HOME}/bin/wmedits2surf --self --tmp ${SUBJECTS_DIR}/${s}/qc \
												   --s ${s} --overwrite >&4
			then
				 >&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  ${FREESURFER_HOME}/bin/wmedits2surf --self --tmp ${SUBJECTS_DIR}/${s}/qc --s ${s} --overwrite${BLUE}\n"
		 	else
				 >&2 printf "\r${BRED}◀︎|⁃‣ERROR${NC}  ${FREESURFER_HOME}/bin/wmedits2surf --self --tmp ${SUBJECTS_DIR}/${s}/qc --s ${s} --overwrite FAILED${BLUE}\n"
				 continue
		 	fi
		 else
			>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} white matter mask edits summary files already exist${NC}"		 	
		fi												   					 		
		# convert to atlas annotation for projection on surfaces
		if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/rh.bmedits.annot ] ; then
			if ${FREESURFER_HOME}/bin/mris_seg2annot --seg ${SUBJECTS_DIR}/${s}/surf/rh.bmerase.mgh \
												  --s ${s} --ctab-auto --h rh --surf white \
												  --o ${SUBJECTS_DIR}/${s}/qc/rh.bmedits.annot >&4
			then
				>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  ${FREESURFER_HOME}/bin/mris_seg2annot --seg ${SUBJECTS_DIR}/${s}/surf/rh.bmerase.mgh  --s ${s} --ctab-auto --h rh --surf white --o ${SUBJECTS_DIR}/${s}/qc/rh.bmedits.annot${BLUE}\n"
		 	else
				>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/mris_seg2annot --seg ${SUBJECTS_DIR}/${s}/surf/rh.bmerase.mgh --s ${s} --ctab-auto --h rh --surf white --o ${SUBJECTS_DIR}/${s}/qc/rh.bmedits.annot FAILED${BLUE}\n"
				 continue
		 	fi
		 else
			>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/${s}/qc/rh.bmedits.annot${NC}"		 	
		fi												   					 		
		if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${s}/qc/lh.bmedits.annot ] ; then
			if ${FREESURFER_HOME}/bin/mris_seg2annot --seg ${SUBJECTS_DIR}/${s}/surf/lh.bmerase.mgh \
												  --s ${s} --ctab-auto --h lh --surf white \
												  --o ${SUBJECTS_DIR}/${s}/qc/lh.bmedits.annot >&4
			then
				 >&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  ${FREESURFER_HOME}/bin/mris_seg2annot --seg ${SUBJECTS_DIR}/${s}/surf/lh.bmerase.mgh --s ${s} --ctab-auto --h lh --surf white --o ${SUBJECTS_DIR}/${s}/qc/lh.bmedits.annot${BLUE}\n"		 														  	
		 	else
				 >&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}  ${FREESURFER_HOME}/bin/mris_seg2annot --seg ${SUBJECTS_DIR}/${s}/surf/lh.bmerase.mgh --s ${s} --ctab-auto --h lh --surf white --o ${SUBJECTS_DIR}/${s}/qc/lh.bmedits.annot FAILED${BLUE}\n"		 		
				 continue
		 	fi
		 else
			>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${GREY} ${SUBJECTS_DIR}/${s}/qc/lh.bmedits.annot${NC}"		 			 	
		fi
		# print out stats
		bmerase=$(cat ${SUBJECTS_DIR}/${s}/stats/bm.erase.dat | awk '{print $1}') && wmerase=$(cat ${SUBJECTS_DIR}/${s}/stats/wm.erase.dat | awk '{print $1}')  && wmfill=$(cat ${SUBJECTS_DIR}/${s}/stats/wm.fill.dat | awk '{print $1}')
		>&4 printf "\n${GREY}✏️ Edit Summary Stats:${NC}\n\t# Erased voxels in brainmask: %d\n" ${bmerase}
		>&4 printf "\t# Erased voxels in white matter mask: %d\n" ${wmerase}
		>&4 printf "\t# Filled voxels in white matter mask: %d\n" ${wmfill}
		((counter++))
	done
	return 0
}
export -f surfergems_subject_edits
####################################################################################################################
### DEFINE FUNCTION
#   project summary of edits to average space
####################################################################################################################
##  TODO check for existence of files before trying to run group summary compilation
function surfergems_group_edits_getsubjectedits(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_group_edits_getsubjectedits $@"		
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh ]
	then
		# apply transform
		if ${FREESURFER_HOME}/bin/mri_vol2vol \
						--mov ${SUBJECTS_DIR}/${1}/qc/bm.erase.mgh \
	 					--o ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh \
	 					--reg ${SUBJECTS_DIR}/${1}/mri/transforms/registration-to-${AVERAGENAME}.dat \
	 					--targ ${SUBJECTS_DIR}/${AVERAGENAME}/mri/brainmask.mgz
	 	then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mri_vol2vol --mov ${SUBJECTS_DIR}/${1}/qc/bm.erase.mgh --o ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh --reg ${SUBJECTS_DIR}/${1}/mri/transforms/registration-to-${AVERAGENAME}.dat --targ ${SUBJECTS_DIR}/${AVERAGENAME}/mri/brainmask.mgz ${BLUE}\n"
	 	else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mri_vol2vol --mov ${SUBJECTS_DIR}/${1}/qc/bm.erase.mgh --o ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh --reg ${SUBJECTS_DIR}/${1}/mri/transforms/registration-to-${AVERAGENAME}.dat --targ ${SUBJECTS_DIR}/${AVERAGENAME}/mri/brainmask.mgz ${BLUE}\n"
	 	fi
		# binarize transformed edits 
	 	if ${FREESURFER_HOME}/bin/mri_binarize \
	 					--min 1 \
						--i ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh \
						--o ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mri_binarize --min 1 --i ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh ${BLUE} --o ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh\n"
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mri_binarize --min 1 --i ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh ${BLUE} --o ${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh\n"
		fi	 	
	 else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${1}/qc/bm.erase.${AVERAGENAME}-space.mgh${NC}"
	fi		 	
}
export -f surfergems_group_edits_getsubjectedits
####################################################################################################################
### DEFINE FUNCTION
#   project summary of edits to average space
####################################################################################################################
##  TODO check for existence of files before trying to run group summary compilation
function surfergems_group_edits(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_group_edits $@"		
	if [ -z "${SUBJECTS}" ]
	then
		# find finished subjects and create global var if not already existing
		# -- only convert finished subjects`
		surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}") && local subject=${SUBJECTS[@]}
	fi	
	# compute average and register subjects to average
	surfergems_makeavg >&4
	>&4 printf "\r${YELLOW}❍ applying transform on edits made to each subject${NC}\r"		
	parallel -k --link surfergems_group_edits_getsubjectedits {} \
						::: $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g") \
						>&4 >(zenity --progress --pulsate --auto-kill --auto-close --title="💎🏄‍♂️ Surfer Gems | Averaging Subjects" --text="Applying Registration to ${AVERAGENAME}" --width=300 --height=100)
	# compute sum across subjects
	local files=($(find ${SUBJECTS_DIR}/ -name "bm.erase.${AVERAGENAME}-space.mgh"))
	if [ ! "$(echo ${files[@]})" ]
	then
		 >&2 echo -e "\r\r${BRED}ERROR: cannot find bm.erase.${AVERAGENAME}-space.mgh in ${SUBJECTS_DIR}${NC}"
		return 1
	fi
	[ ! -d ${SUBJECTS_DIR}/${AVERAGENAME}/qc ] && mkdir -vp ${SUBJECTS_DIR}/${AVERAGENAME}/qc >&4
	## TODO - figure out weird bug where summation does not work with a '.sum' in filename instead of '-sum'
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh ]
	then	
		if ${FREESURFER_HOME}/bin/mri_concat \
						${files[@]} \
						--sum --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh >&4
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mri_concat ${files[@]} --sum --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh\n" 				
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mri_concat ${files[@]} --sum --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh\n"			
			return 1
		fi
	else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh${NC}"		
	fi
	# create probability map of edits
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh ]
	then
		if ${FREESURFER_HOME}/bin/fscalc ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh \
						div ${#files[@]} --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh >&4
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/fscalc ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh div ${#files[@]} --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh\n" 				
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/fscalc ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-sum.mgh div ${#files[@]} --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh\n"			
			return 1
		fi
	else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh${NC}"		
	fi
	# convert to rh surface 
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh ]
	then
		if ${FREESURFER_HOME}/bin/mri_vol2surf --src ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh \
										--o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh \
										--interp nearest --projfrac-max 0 5 .2 --fwhm 2.5 \
										--regheader average --hemi rh >&4
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mri_vol2surf --src ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh --interp nearest --projfrac-max 0 5 .2 --fwhm 2.5 --regheader average --hemi rh\n" 				
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mri_vol2surf --src ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh --interp nearest --projfrac-max 0 5 .2 --fwhm 2.5 --regheader average --hemi rh\n"			
			return 1
		fi
	else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh${NC}"		
	fi
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.gii ]
	then
		if ${FREESURFER_HOME}/bin/mris_convert -c ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh \
										${SUBJECTS_DIR}/${AVERAGENAME}/surf/rh.white \
										${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.gii >&4
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mris_convert -c ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh ${SUBJECTS_DIR}/${AVERAGENAME}/surf/rh.white ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.gii\n" 				
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mris_convert -c ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh ${SUBJECTS_DIR}/${AVERAGENAME}/surf/rh.white ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.gii\n"			
			return 1
		fi
	else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.gii${NC}"		
	fi
    # convert lh to surface
    if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedits-brainmask.mgh ]
    then    	
    	if ${FREESURFER_HOME}/bin/mri_vol2surf --src ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh \
    											--o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.mgh \
												--interp nearest --projfrac-max 0 5 .2 --fwhm 2.5 \
												--regheader average --hemi lh >&4
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mri_vol2surf --src ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh --interp nearest --projfrac-max 0 5 .2 --fwhm 2.5 --regheader average --hemi lh\n" 				
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mri_vol2surf --src ${SUBJECTS_DIR}/${AVERAGENAME}/qc/bm.erase-prob.mgh --o ${SUBJECTS_DIR}/${AVERAGENAME}/qc/rh.pedit-brainmask.mgh --interp nearest --projfrac-max 0 5 .2 --fwhm 2.5 --regheader average --hemi lh\n"			
			return 1
		fi
	else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.mgh${NC}"		
	fi
	# convert to gifti
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.gii ]
	then
		if ${FREESURFER_HOME}/bin/mris_convert -c ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.mgh \
												${SUBJECTS_DIR}/${AVERAGENAME}/surf/lh.white \
												${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.gii >&4
		then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}${FREESURFER_HOME}/bin/mris_convert -c ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.mgh ${SUBJECTS_DIR}/${AVERAGENAME}/surf/lh.white ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.gii\n" 				
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${GREY}${FREESURFER_HOME}/bin/mris_convert -c ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.mgh ${SUBJECTS_DIR}/${AVERAGENAME}/surf/lh.white ${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.gii\n"			
			return 1
		fi
	else
		>&1 printf "${BLUE}◀︎|⁃‣NO OVERWRITE - FILE EXISTS${NC} ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}/qc/lh.pedit-brainmask.gii${NC}"		
	fi
}
export -f surfergems_group_edits
####################################################################################################################
### DEFINE FUNCTION
#   register subject to average
####################################################################################################################
function surfergems_subject_registertoaverage(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_registertoaverage $@"		
	local subject=${1}
	local averagename=${2}
	if [ "${OVERWRITE}" ] || [ ! -f ${SUBJECTS_DIR}/${subject}/mri/transforms/registration-to-${averagename}.dat ]; then
		if ${FREESURFER_HOME}/bin/fslregister --s ${averagename} \
										  --mov ${SUBJECTS_DIR}/${subject}/mri/brain.mgz \
					   				  	  --reg ${SUBJECTS_DIR}/${subject}/mri/transforms/registration-to-${averagename}.dat \
					   				  	  --dof 12; then
			>&1 printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} ${FREESURFER_HOME}/bin/fslregister --s ${averagename} --mov ${SUBJECTS_DIR}/${subject}/mri/brain.mgz --reg ${SUBJECTS_DIR}/${subject}/mri/transforms/registration-to-${averagename}.dat --dof 12\n"
		else
			>&2 echo -e "${BRED}\rERROR: fslregister ${subject} to ${averagename} failed ${NC}"
			return 1
		fi					
	else
		>&1 echo -e "${BLUE}◀︎|⁃‣NO OVERWRITE - AVERAGE SUBJECT EXISTS :: ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}${NC}"				
	fi
	return 0
}
export -f surfergems_subject_registertoaverage
####################################################################################################################
### DEFINE FUNCTION
#   make average volumes/surfaces
####################################################################################################################
function surfergems_makeavg(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_makeavg $@"		
	## TODO 
	# update this so that it checks if average subject reports recon status = done
	if [ "${OVERWRITE}" ] || [ ! -d ${SUBJECTS_DIR}/${AVERAGENAME} ]
	then
		[ "${OVERWRITE}" ] && [ -d ${SUBJECTS_DIR}/${AVERAGENAME} ] && rm -vr ${SUBJECTS_DIR}/${AVERAGENAME} >&2		
			if ${FREESURFER_HOME}/bin/make_average_subject --subjects $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g") \
														--sd ${SUBJECTS_DIR} \
														--out ${AVERAGENAME} >&4
			then
				>&4 printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} ${FREESURFER_HOME}/bin/make_average_subject ${filepath} --subjects $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g") --sd ${SUBJECTS_DIR} --out ${AVERAGENAME}\n"
			else
				>&2 printf "\r${BRED}◀︎|⁃‣ERROR${NC}  ${FREESURFER_HOME}/bin/make_average_subject ${filepath} --subjects $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g") --sd ${SUBJECTS_DIR} --out ${AVERAGENAME} FAILED\n"
				return 1
			fi
	else
		echo -e "${BLUE}◀︎|⁃‣NO OVERWRITE - AVERAGE SUBJECT EXISTS :: ${GREY}${SUBJECTS_DIR}/${AVERAGENAME}${NC}"		
	fi
	# compute registration for all subjects to average
	if [ "$(echo "${SUBJECTS[@]}" | sed "s|${AVERAGENAME}||g")" ]
	then
		>&4 printf "%s\r${YELLOW}❍ registering subjects to ${SUBJECTS_DIR}/${AVERAGENAME}${NC}"
		if parallel -k --link --bar surfergems_subject_registertoaverage {} ${AVERAGENAME} \
							::: $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g") \
							>&4 >(zenity --progress --pulsate --auto-kill --auto-close --title="💎🏄‍♂️ Surfer Gems | Average Subject" --text="Affine Registration of all Subjects to ${AVERAGENAME}" --width=300 --height=100)
		then
			>&4 printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} ${surfergems_subject_registertoaverage} {} ${AVERAGENAME} ::: $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g")\n"
		else
			>&2 printf "\r${BRED}◀︎|⁃‣ERROR${NC} ${surfergems_subject_registertoaverage} {} ${AVERAGENAME} ::: $(echo ${SUBJECTS[@]} | sed "s|${AVERAGENAME}||g")\n"
		fi
	fi
	return 0
}
export -f surfergems_makeavg
####################################################################################################################
#
# PRINTING TO STDOUT
#
####################################################################################################################
### DEFINE FUNCTION
#   print verbose status
####################################################################################################################
function surfergems_printstatus_verbose(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_printstatus_verbose $@"			
	if [ "${RUNNINGSUBJECTS[*]}" ]; then
		echo 'Active Job Status Details ::'		
		if [ ${VERBOSE} ]; then 
			for SUBJECT in ${RUNNINGSUBJECTS[@]}; do
				echo -e "\n${BLUE}${SUBJECT}\n${GREY}$(tail -n 1 $(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'recon-all-status.log'))${GGREY}\n$(tail -n 4 $(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'recon-all.log'))${NC}\n"
			done		
		fi	
	fi
	if [ "${FINISHEDSUBJECTS[*]}" ]; then
		echo -e '\n\nCompleted Job Status Details ::'		
		if [ ${VERBOSE} ]; then
			for SUBJECT in ${FINISHEDSUBJECTS[@]}; do
				echo -e "\n${BLUE}${SUBJECT}\n${GREEN}$(tail -n 1 $(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'recon-all-status.log'))${GGREY}\n$(tail -n 4 $(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'recon-all.log')| head -n 5 )${NC}\n"
			done		
		fi
	fi
	if [ "${FAILEDSUBJECTS[*]}" ]; then
		echo 'Failed Job Status Details ::'		
			for SUBJECT in ${FAILEDSUBJECTS[@]}; do
				echo -e "\n${BLUE}${SUBJECT}\n${BRED}$(tail -n 1 $(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'recon-all-status.log'))${GGREY}\n$(tail -n 8 $(find ${SUBJECTS_DIR}/${SUBJECT} \( ! -regex '.*/\..*' \) -name 'recon-all.log'))${NC}\n"
			done		
	fi	
	return 0	
}
export -f surfergems_printstatus_verbose
####################################################################################################################
## DEFINE FUNCTION
#  print status
####################################################################################################################
function surfergems_printstatus(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_printstatus $@"				
	# if [ -z "${RUNNINGSUBJECTS[*]}" ] && [ -z "${FINISHEDSUBJECTS[*]}" ] && [ -z "${FAILEDSUBJECTS[*]}" ]; then
	# 	if [  "$(echo "${STATUS[*]}" | grep 'failed')" ]; then
	# 		echo -e "🙌  No Failed Jobs! All Participants Report Successful Completion\n\t..give yourself a pat on the back (hint: 🍩)"
	# 	fi
	# 	if [  "$(echo "${STATUS[*]}" | grep 'incomplete')" ]; then
	# 		echo -e "${YELLOW}★ ${GREEN}Complete Dataset File Manifest${NC}"
	# 	fi		
	# 	if [ "$(echo "${STATUS[*]}" | grep 'success')" ]; then
	# 		echo -e "∅  No Successful Jobs Detected\n\t→ check SUBJECTS_DIR is set correctly and populated with data\n\t\n...exiting\n"
	# 	fi
	# 	if [ "$(echo "${STATUS[*]}" | grep 'done')" ]; then
	# 		echo -e "∅  No Complete Manifests Found.\n\t→ check SUBJECTS_DIR is set correctly and populated with data\n\t\n...exiting\n"
	# 	fi		
	# 	if [ "$(echo "${STATUS[*]}" | grep 'active')" ]; then
	# 		echo -e "∅  No Active Jobs Detected\n\t→ check SUBJECTS_DIR is set correctly and populated with data\n\t\n...exiting\n"
	# 	fi
	# fi	
	# print status of active jobs
	# if [ "${COMPLETESUB[*]}" ]; then
	if [ "${RUNNINGSUBJECTS[*]}" ]; then
		local counter=0 && local status=""
		for SUBJECT in ${RUNNINGSUBJECTS[@]}; do
			tstart=${RUNNINGTIME[$counter]} && tnow=$(date) && tstart=$(date -d "${tstart}" '+%s') && tnow=$(date -d "${tnow}" '+%s')
			trun=$((tnow-tstart)) && runtime=$(printf '%02d:%02d:%02d\n' $(($trun / 3600)) $(($trun % 3600 / 60)) $(($trun % 60)))
			tid=$(echo ${RUNNINGID[@]} | grep ${SUBJECT} | awk '{print $NF}')
			status+=$(echo "\n${GREY}${RUNNINGHOSTS[$counter]}\t${BLUE}${SUBJECT}\t${BLUE}${tid}\t${GREY}${RUNNINGSTATUS[$counter]}\t${GREY}${runtime}${NC}")
			((counter++))
		done
		status=$(echo -e ${status} | sort -k1 -r)		
		header=$(echo -e "\n${GGREY}HOST\t${GGREY}SUBJECTID\tPID${GGREY}\t${GGREY}STATUS\t${LRED}TIME-ELAPSED${NC}\n")
		echo -e "🏃  ${GREY}${#RUNNINGSUBJECTS[@]} Current Active Jobs Running On Hosts :: ${NC}\n"
		[ $(which qstat) ] && printf  "    Remaining Subjects ::: %d\n\n" $(qstat -s p | grep 'qw' | wc -l)
		echo -e "${header}\n${status}" |  column -s $'\t' -t  && echo -e '\n' &&  [ $(which qhost) ] && qhost | sed '3d;' && echo -e '\n See more information by typing qstat -f -ne\n'
	else
		echo -e "${GREY}◀︎⁃${RED}∅ ${GREY}NO ACTIVE JOBS${NC}" >&2		
	fi
	# print status of finished jobs
	if [ "${FINISHEDSUBJECTS[*]}" ]; then
		local counter=0 && local status=""
		for SUBJECT in ${FINISHEDSUBJECTS[@]}; do
			[ "$(echo ${RERUNSUB[@]} | grep "${SUBJECT}")" ] && rerun="${LRED}missing files"
			[ "$(echo ${COMPLETESUB[@]} | grep "${SUBJECT}")" ] && rerun="${GREEN}complete"
			tstart=${STARTTIMES[$counter]} && tdone=${FINISHTIMES[$counter]}
			tdonep=$(date -d "${tdone}" '+%s') && tstart=$(date -d "${tstart}" '+%s') && trun=$((tdonep-tstart))
			runtime=$(printf '%02d:%02d:%02d\n' $(($trun / 3600)) $(($trun % 3600 / 60)) $(($trun % 60)))
			status+=$(echo "\n${GREY}${FINISHEDHOSTS[$counter]}\t${BLUE}${SUBJECT}\t${GREY}${tdone}\t${GREY}${runtime}\t${rerun}${NC}")
			((counter++))
		done
		status=$(echo -e ${status} | sort -k1 -r)
		# print DATASET MANIFEST to status
		[ ${FILECHECK} ] && local string=DATASET-MANIFEST
		header=$(echo -e "\n${GGREY}HOST\t${GGREY}SUBJECTID\t${GGREY}COMPLETION-TIME\t${GGREY}TIME-ELAPSED\t${string}\n")
		echo -e "\n✅ ${GREEN}${#FINISHEDSUBJECTS[@]} Completed Jobs :: ${NC}\n"
		echo -e "${header}\n${status}" | column -s $'\t' -t
	else
		echo -e "${GREY}◀︎⁃${RED}∅ ${GREY}NO COMPLETED JOBS${NC}" >&2		
	fi
	# print status of failed subjects
	if [ "${FAILEDSUBJECTS[*]}" ]; then
		local counter=0 && local status=""
		for SUBJECT in ${FAILEDSUBJECTS[@]}; do
			status+=$(echo "\n${GREY}${FAILEDHOSTS[$counter]}\t${BRED}${SUBJECT}\t${YELLOW}${FAILPOINT[$counter]}\t${LRED}${FAILTIMES[$counter]}${NC}")
			((counter++))
		done
		status=$(echo -e ${status} | sort -k1 -r)
		header=$(echo -e "\n${GGREY}HOST\t${GGREY}SUBJECTID\t${GGREY}RECON-STEP\t${GGREY}TIME-FAILED\n")
		echo -e "🔥 ${YELLOW}${#FAILEDSUBJECTS[@]} Failed Jobs${NC} :: \n"
		echo -e "${header}\n${status}" | column -s $'\t' -t && echo -e '\n'
	else
		echo -e "${GREY}◀︎⁃${RED}∅ ${GREY}NO FAILED JOBS${NC}" >&2		
	fi
	if [ "${RERUNSUB[@]}" ]; then 
		echo -e "\n${LRED}Resubmit the following jobs (incomplete file manifest):${NC} $(printf "${FREESURFER_HOME}/recon-all -s %s -make all\n" ${RERUNSUB[@]})"
		echo -e "\n${YELLOW}RERUN LIST:${NC} $(printf '%s ' ${RERUNSUB[@]})" >&2
	fi
	if [ "$(echo ${COMPLETESUB[@]})" ]; then
		echo -e "\n${GREEN}Complete file manifests (ready for analysis):${NC} $(printf "${BLUE}%s${NC} " ${COMPLETESUB[@]})"
	fi
	[ "${VERBOSE}" ] && surfergems_printstatus_verbose	
	return 0
}
# export function out of subshell (allows multiple instances for parallelization)
export -f surfergems_printstatus
####################################################################################################################
#
# WEB REPORT 
#
####################################################################################################################
### DEFINE FUNCTION
#   use git to sync local with remote
####################################################################################################################
function surfergems_html_sync(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_sync $@"		
	local CWD=$(pwd)
	[ -d ${REPORTDIR} ] && cd ${REPORTDIR} && git pull && cd ${CWD}
}
export -f surfergems_html_sync
####################################################################################################################
### DEFINE FUNCTION
#   use git to publish local
####################################################################################################################
function surfergems_html_publish(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_publish $@"		
	local CWD=$(pwd)
	if [ -d ${REPORTDIR} ]; then
		cd ${REPORTDIR}
		if git commit -am "web update $(hostname)"; then
			if git push; then
				cd ${CWD}	
			fi
		fi
	fi
}
export -f surfergems_html_publish
####################################################################################################################
### DEFINE FUNCTION
#   build papaya viewer javascript with pre-loaded images
####################################################################################################################
function surfergems_html_papaya(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_papaya $@"		
	local subject=${1} && shift
	local reportdir=${1} && shift
	local images="$@" && local cwd=$(pwd)
	local found='' && local counter=0;
	# only get those files that were converted (avoid building error for papaya)		
	for i in ${images[@]}; do
		found+=" "$(find ${SUBJECTS_DIR}/${subject} -name "${i}.nii.gz")
	done
	if [ ! -f "${reportdir}/assets/js/${subject}.papaya.js" ]; then
		if [ ! -z "${found}" ]; then
			[ -d ${reportdir}/assets/papaya/build ] && rm -r ${reportdir}/assets/papaya/build
			if 	pushd ${reportdir}/assets/papaya/ > /dev/null && \
				java -Xmx512M -jar ${reportdir}/assets/papaya/lib/papaya-builder.jar -images ${found} -local 2&>1 /dev/null && \
				popd > /dev/null && \
				java -jar ${reportdir}/assets/papaya/lib/compiler.jar  \
				 --js ${reportdir}/assets/papaya/build/papaya.js \
				 --js_output_file ${reportdir}/assets/js/${subject}.papaya.js \
				 --warning_level QUIET \
				 --compilation_level SIMPLE_OPTIMIZATIONS \
				 --language_in=ECMASCRIPT5 2&>1 /dev/null; then
				printf "%s\r\r${GREEN}   javascript successfully written ${reportdir}/assets/js/${subject}.papaya.js\r" $(tput el)
			else
				echo -e "${BRED}\r\rERROR: java compilation failed for ${reportdir}/assets/js/${subject}.papaya.js ${NC}\r" >&2
				exit 1				
			fi			
		else
			echo -e "\r\r  ${YELLOW}WARNING${NC} No NIFTI files found for ${subject}! Maybe conversion failed?... Skipping...${NC}\r" >&2
		fi
	else
		printf "%s\r\r  ${GREY} ${reportdir}/assets/js/${subject}.papaya.js already exists!.. continuing\r" $(tput el) >&2
	fi
}
export -f surfergems_html_papaya
####################################################################################################################
### DEFINE FUNCTION
#   parent function for building html pages
####################################################################################################################
function surfergems_html(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html $@"		
	echo -e "${BLUE}Building Web-Report${NC}"
	# summarize only finished subjects by default
	if [ ! "${SUBJECTS}" ]; then
		surfergems_status && declare -g SUBJECTS=("${FINISHEDSUBJECTS[@]}")		
	fi		
	surfergems_html_init	
	# sync and publish here?
	##
	##
	# resources & references 
	# http://www.compciv.org/topics/web/heredocs_and_html/
	# http://www.compciv.org/topics/bash/text-values/#heredocs-info
	# https://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash
	# https://www.mathworks.com/matlabcentral/fileexchange/40942-plot-mesh-as-interactive-html?s_tid=gn_loc_drop
	# Build index programatically from beginning to end
	# Include a separate lightbox for each subject
	# Take screenshots of each subject brainmask // white matter // pial surface overlays
	#	- include GIFS of rotating surface?
	#for SUBJECT in ${SUBJECTS[@]}; do
	#	echo ''
	#done
	# Later...
	# Include graphics for summary report of data from subject
}
export -f surfergems_html
####################################################################################################################
### DEFINE FUNCTION
#   load custom definitions into namespace from text file
####################################################################################################################
function surfergems_html_init_load_config(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_init_load_config $@"		
    local file=${1}
    while read var; do
		eval ${var}
    done < ${file}
}
export -f surfergems_html_init_load_config
####################################################################################################################
### DEFINE FUNCTION
#   initialize everything for html joy!
####################################################################################################################
function surfergems_html_init(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_init $@"		
	# Clone Report Tools If You Don't Have Them
	if [ ! -d ${REPORTDIR} ]
	then
		git clone ${REPORTREPO_TEMPLATE} ${REPORTDIR}
	fi		
	#######################################################
	# Create all files needed for web report generation
	#######################################################
	if surfergems_makeavg
	then
		printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} ${GREY}surfergems_makeavg${NC}"
	else
		printf "\r${BRED}◀︎|⁃‣ERROR${NC} ${GREY}surfergems_makeavg failed${NC}"
	fi
	#
	if parallel -k --link surfergems_convert 'vol' ${IEXT} ${OEXT} {} "${MGZs[@]}" ::: ${SUBJECTS[@]}
	then
		printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} ${GREY}parallel -k --link surfergems_convert 'vol' ${IEXT} ${OEXT} {} ${MGZs[@]} ::: ${SUBJECTS[@]} ${NC}"
	else		
		printf "\r${BRED}◀︎|⁃‣ERROR${NC} ${GREY}parallel -k --link surfergems_convert 'vol' ${IEXT} ${OEXT} {} ${MGZs[@]} ::: ${SUBJECTS[@]} failed${NC}"
	fi
	#
	if parallel -k --link surfergems_html_papaya {} ${REPORTDIR} "${MGZs[@]}" ::: ${SUBJECTS[@]}
	then
		printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} ${GREY}parallel -k --link surfergems_html_papaya {} ${REPORTDIR} ${MGZs[@]} ::: ${SUBJECTS[@]}${NC}"
	else
		printf "\r${BRED}◀︎|⁃‣ERROR${NC} ${GREY}parallel -k --link surfergems_html_papaya {} ${REPORTDIR} ${MGZs[@]} ::: ${SUBJECTS[@]}${NC} failed"
	fi
	#######################################
	# Initialize INDEX
	#######################################
	# printf "%s\r\r${YELLOW}❍ building home page${NC}\r" $(tput el)
	surfergems_html_init_load_config ${REPORTDIR}/config/index.txt
	if surfergems_html_init_index; then
		continue
	else
		echo -e "${BRED}ERROR: surfergems_html_init_index failed to write ${REPORTDIR}/index.html${NC}" >&2					
	fi
	########################################
	## create group summary landing page
	########################################
	##
	if surfergems_html_init_landing ${REPORTDIR}/config/landing.average.txt 'landing.average'; then
		continue
	else
		echo -e "${BRED}ERROR: surfergems_html_init_landing failed to write ${REPORTDIR}/pages/landing.average.html${NC}" >&2					
	fi
	########################################
	### create page for each group tile
	########################################
	##
	## TODO - fix parallelization here (no export of global ??)
	# parallel -k --link --bar surfergems_html_init_tile {} \
	# 						${REPORTDIR}/pages/group.landing.{}.html \
	# 						${AVERAGENAME} ${SUBJECTS[@]}\
	# 						::: ${TILES[@]}	
	for tile in ${TILES[@]}; do
		if surfergems_html_init_tile ${tile} \
							${REPORTDIR}/pages/landing.average.${tile}.html \
							${AVERAGENAME}; then
			continue 
		else
			echo -e "${BRED}ERROR: surfergems_html_init_tile failed to write ${REPORTDIR}/pages/landing.${tile}.html${NC}" >&2			
		fi
	done
	exit							
	#########################################
	## create subject index landing page 
	## with nested list of data view types 
	#########################################
	##
	## index of all subjects (as tiles)
	if surfergems_html_init_landing ${REPORTDIR}/config/landing.subjects.txt 'landing.subjects'; then
		continue
	else
		echo -e "${BRED}ERROR: surfergems_html_init_landing failed to write ${REPORTDIR}/pages/landing.subjects.html${NC}" >&2			
	fi
	##########################################
	## create landing pages for each subject
	## (convergent recursion)
	## -- would be cool to generalize ad infinitum 
	##########################################
	##
	## landing for each subject with summary tiles
	for subject in ${SUBJECTS[@]}; do
		if surfergems_html_init_landing ${REPORTDIR}/config/landing.subjects.tile.txt \
									 'landing.subjects.'${subject}; then
			continue
		else
			echo -e "${BRED}ERROR: surfergems_html_init_landing failed to write ${REPORTDIR}/pages/landing.subjects.${subject}.html${NC}" >&2
		fi
	done
	# parallel -k --link --bar surfergems_html_init_landing \
	# 					 ${REPORTDIR}/config/landing.subjects.tile.txt  'landing.subjects.'{} \
	# 					 ::: ${SUBJECTS[@]}
	##########################################
	### create page for each tile
	### (atlas, surface, edits, etc)
	##########################################							 
	##
	##
	# for TILE in ${TILES[@]}; do
	# 	parallel -k --link --bar surfergems_html_init_tile \
	# 						${TILE}
	# 						"${REPORTDIR}/pages/indiv.landing.{}.${TILE}.html" \
	# 						::: ${SUBJECTS[@]}
	# done
	for TILE in ${TILES[@]}; do
		for SUBJECT in ${SUBJECTS[@]}; do
			surfergems_html_init_tile ${TILE} ${REPORTDIR}/pages/landing.subjects.${SUBJECT}.${TILE}.html
		done
	done	
}
export -f surfergems_html_init
####################################################################################################################
### DEFINE FUNCTION
#   create everything you need for a specific tile
####################################################################################################################
# TODO
#		global variables are not accessible in this subfunction.. fix this!
function surfergems_html_init_tile(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_init_tile $@"		
	local tile="${1}" && shift
	local outfile=${1} && shift
	local subject=(${1}) && shift	
	#declare -g SUBJECTS=("$@")
	PAGETITLE=${tile} && HEADERNAME=${tile}	
	if [ "${tile}" = 'volume-atlas' ]; then
		surfergems_html_init_tile_papaya "$(echo ${searchfor} | sed 's|+|_|g' | sed 's|\.|_|g')" "${outfile}" "${subject[@]}"
	elif [ "${tile}" = 'edits' ]; then
		surfergems_subject_edits "${subject[@]}"
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'bmedits.annot' ${outfile} 'qc'			
	elif [ "${tile}" = 'brainmask-edits-summary' ]; then
		surfergems_subject_edits $(echo "${SUBJECTS[@]}" | sed "s|${AVERAGENAME}||g") && surfergems_group_edits
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'pedit-brainmask.gii' ${outfile} 'qc'
	elif [ "${tile}" = 'thickness' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'thickness' ${outfile} 'surf'	
	elif [ "${tile}" = 'surface-parcellation' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'aparc.annot' ${outfile} 'label'		
	elif [ "${tile}" = 'surface-parcellation-a2009s' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'aparc.a2009s.annot' ${outfile} 'label'
	elif [ "${tile}" = 'desikian-killiany' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'aparc.DKTatlas.annot' ${outfile} 'label'		
	elif [ "${tile}" = 'brodmann' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'BA_exvivo.annot' ${outfile} 'label'				
	elif [ "${tile}" = 'sulcal-depth' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'sulc' ${outfile} 'surf'
	elif [ "${tile}" = 'gaussian-curvature' ]; then
		surfergems_html_init_tile_nilearn_surf "${subject[@]}" 'curv' ${outfile} 'surf'
	fi
}
export -f surfergems_html_init_tile
####################################################################################################################
## DEFINE FUNCTION
#  autogenerate html code for viewing surfaces
####################################################################################################################
function surfergems_html_init_tile_nilearn_surf(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_init_tile_nilearn_surf $@"		
local subject=${1}
local cdata=${2}
local outfile=${3}
local type=${4}
local tmpdir=${REPORTDIR}/pages/tmp/
[ ! -d ${tmpdir} ] && mkdir -p ${tmpdir}
printf "%s\r\r ${GREY}Building Surface Viewer for %s, %s -> %s\n${NC}\r" $(tput el) ${subject} ${cdata} ${outfile}
if [ "${type}" = 'surf' ]; then
	local cmap="terrain"
	local pythoncommand="from nilearn import datasets, plotting, surface;mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,data,cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,data,cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,data,cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,data,cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,data,cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.inflated.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,data,cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.inflated.${cdata}.html');quit()"
elif [ "${type}" = 'qc' ]; then
	if [ "${cdata}" = 'pedit-brainmask.gii' ]; then
		local cmap='terrain'
		local pythoncommand="from nilearn import datasets, plotting, surface;mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.inflated.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.inflated.${cdata}.html');quit()"	
	elif [ "${cdata}" = 'bmedits.annot' ]; then
		local cmap="Accent"
		local pythoncommand="from nilearn import datasets, plotting, surface;mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.inflated.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.inflated.${cdata}.html');quit()"	
	fi
elif [ "${type}" = 'label' ]; then
	local cmap="gist_earth"
	local pythoncommand="from nilearn import datasets, plotting, surface;mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.pial');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.pial.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.white');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.white.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/lh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/lh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.lh.inflated.${cdata}.html');mesh=surface.load_surf_mesh('${SUBJECTS_DIR}/${subject}/surf/rh.inflated');data=surface.load_surf_data('${SUBJECTS_DIR}/${subject}/${type}/rh.${cdata}');view=plotting.view_surf(mesh,abs(data),cmap='${cmap}',symmetric_cmap=False);view.save_as_html('${tmpdir}/${subject}.rh.inflated.${cdata}.html');quit()"
fi
if python -c "${pythoncommand}" 2> /dev/null 1>/dev/null; then
	printf "%s\r\r  🔢 ${GREY}surfaces compiled with '${cdata}' overlay${NC}\r" $(tput el)
else
	echo -e "\r${BRED} ERROR: python command: ${pythoncommand} failed" >&2
	exit 0
fi
# parse the output of the python command to obtain surfaceMapInfo for L and R
grep -oE 'var surfaceMapInfo \= \{.*?\]\]' ${tmpdir}/${subject}.rh.pial.${cdata}.html > ${tmpdir}/${subject}.rh.pial.${cdata}.surfmapinfo.txt
grep -oE 'var surfaceMapInfo \= \{.*?\]\]' ${tmpdir}/${subject}.lh.pial.${cdata}.html > ${tmpdir}/${subject}.lh.pial.${cdata}.surfmapinfo.txt		
grep -oE 'var surfaceMapInfo \= \{.*?\]\]' ${tmpdir}/${subject}.rh.white.${cdata}.html > ${tmpdir}/${subject}.rh.white.${cdata}.surfmapinfo.txt
grep -oE 'var surfaceMapInfo \= \{.*?\]\]' ${tmpdir}/${subject}.lh.white.${cdata}.html > ${tmpdir}/${subject}.lh.white.${cdata}.surfmapinfo.txt				
grep -oE 'var surfaceMapInfo \= \{.*?\]\]' ${tmpdir}/${subject}.rh.inflated.${cdata}.html > ${tmpdir}/${subject}.rh.inflated.${cdata}.surfmapinfo.txt
grep -oE 'var surfaceMapInfo \= \{.*?\]\]' ${tmpdir}/${subject}.lh.inflated.${cdata}.html > ${tmpdir}/${subject}.lh.inflated.${cdata}.surfmapinfo.txt				
# define weird strings
jquerycommand=$(cat ${REPORTDIR}/assets/js/jquery_surf.js)
plotlycommand=$(cat ${REPORTDIR}/assets/js/plotly_surf.js)
inlinecommand=$(cat ${REPORTDIR}/assets/js/inline_surf.js)
printf "%s\r${GREY}  building page head${NC}\r" $(tput el)
echo ${outfile}
# first write the head 
read -r -d '' head << EOF
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
	<title>${PAGETITLE}</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="../assets/css/main.css" />
    <div id="wrapper">
        <!-- Header -->
        <header id="header" class="alt style1">
            <a href="../pages/indiv.landing.${subject}.html" class="logo"><strong><font size="+2">Return to Gallery | ${subject} </strong></font></a>
            <nav>
                <a href="#menu"><font size="+2">Menu</font></a>
            </nav>
        </header>
        <nav id="menu">
            <ul class="links">
                <li><a href="../index.html">Home</a></li>
                <li><a href="../pages/group.landing.html"><<font size="+2">Group Reports</font></a></li>
                <li><a href="../pages/indiv.landing.html"><font size="+2">Individual Reports</font></a></li>
                <li><a href="../pages/references.html"><font size="+2">References</font></a></li>
            </ul>
        </nav>   
    </div>    
    <script>/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */
    	${jquerycommand}
	</script>
        <script>/**
			* plotly.js (gl3d - minified) v1.38.3
			* Copyright 2012-2018, Plotly, Inc.
			* All rights reserved.
			* Licensed under the MIT license
			*/
			${plotlycommand}
		</script>	
    	<script>
    		${inlinecommand}
    	</script>
        
EOF
	echo "${head}" > ${outfile}
	makeplotcommand=$(cat ${REPORTDIR}/assets/js/makePlot_surf.js)
	makedocumentcommand=$(cat ${REPORTDIR}/assets/js/makedoc_surf.js)
##### UPDATE WITH SUBJECT FILE
piallh=$(grep -oE '\{"_x".*?\]\]' ${tmpdir}/${subject}.lh.pial.${cdata}.surfmapinfo.txt)
pialrh=$(grep -oE '\{"_x".*?\]\]' ${tmpdir}/${subject}.rh.pial.${cdata}.surfmapinfo.txt | sed 's|vertexcolor_left|vertexcolor_right|g')
whitelh=$(grep -oE '\{"_x".*?\]\]' ${tmpdir}/${subject}.lh.white.${cdata}.surfmapinfo.txt)
whiterh=$(grep -oE '\{"_x".*?\]\]' ${tmpdir}/${subject}.rh.white.${cdata}.surfmapinfo.txt  | sed 's|vertexcolor_left|vertexcolor_right|g')
inflatedlh=$(grep -oE '\{"_x".*?\]\]' ${tmpdir}/${subject}.lh.inflated.${cdata}.surfmapinfo.txt)
inflatedrh=$(grep -oE '\{"_x".*?\]\]' ${tmpdir}/${subject}.rh.inflated.${cdata}.surfmapinfo.txt  | sed 's|vertexcolor_left|vertexcolor_right|g')
# var surfaceMapInfo = {"pial_left": ${piallh}, "pial_right": ${pialrh}, "white_left": ${whitelh}, "white_right": ${whiterh}, "inflated_left": ${inflatedlh},"inflated_right": ${inflatedrh}};
printf "%s\r${GREY}  building page body${NC}\r" $(tput el)

	read -r -d '' body <<EOF
    <script>
         var surfaceMapInfo = {"pial_left": ${piallh}, "pial_right": ${pialrh}, "white_left": ${whitelh}, "white_right": ${whiterh}, "inflated_left": ${inflatedlh}, "inflated_right": ${inflatedrh}};

      	${makeplotcommand}
    </script>
    <script>
    	${makedocumentcommand}
    </script>

</head>
<body>
	<div id="main" class="alt">
		<section id="one">
			<div class="inner">
				<header class="major">
					<h2>${subject}</h2>
				</header>
		    <select id="select-hemisphere">
		        <option value="left">Hemisphere: Left</option>
		        <option value="right">Hemisphere: Right</option>
		    </select>
		    <select id="select-kind">
		        <option value="pial">Surface: Pial</option>
				<option value="white">Surface: White</option>	    
		        <option value="inflated">Surface: Inflated</option>
		    </select>
		    <select id="select-view">
		        <option value="left">Jump View: Left</option>
		        <option value="right">Jump View: Right</option>
		        <option value="front">Jump View: Front</option>
		        <option value="back">Jump View: Back</option>
		        <option value="top">Jump View: Top</option>
		        <option value="bottom">Jump View: Bottom</option>
		    </select>	
		    <div id="surface-plot" class="content"></div>
		</section>
	</div>
</body>
</html>    
EOF
printf "%s\r  💾  writing ${outfile}${NC}" $(tput el)
printf "${body}" >> ${outfile}
}
export -f surfergems_html_init_tile_nilearn_surf
####################################################################################################################
## DEFINE FUNCTION
#  autogenerate html for papaya volume viewer
####################################################################################################################
function surfergems_html_init_tile_papaya(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_init_tile_papaya $@"		
	images=${1} outfile=${2}
	read -r -d '' page <<EOF
<!DOCTYPE html>

<html>
	<head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <link rel="stylesheet" href="../assets/css/main.css" />
        <!-- iOS meta tags -->
        <meta name="viewport" content="width=device-width, initial-scale=2.0, user-scalable=no"/>
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    	<script type="text/javascript" src="../assets/js/${subject}.papaya.js?build=1444"></script>
    
    	<title>Volume Viewer | ${subject} </title>
   
    	<script type="text/javascript">
        var params = [];
        params["kioskMode"] = false;
        params["expandable"] = false;
        params["showControls"] = false;
        params["allowScroll"] = false;
        params["orthogonal"] = true;
        // build freesurfer lookup table
        var FSLUT = function() { };      
        var colormap = {
                alpha: .5,
                colorCoding: {
                    0: { a: 0, r: 0, b: 0, g: 0, label: "Unknown" },
                    1: { a: 0, r: 70, b: 180, g: 130, label: "Left-Cerebral-Exterior" },
                    2: { a: 0, r: 245, b: 245, g: 245, label: "Left-Cerebral-White-Matter" },
                    3: { a: 0, r: 205, b: 78, g: 62, label: "Left-Cerebral-Cortex" },
                    4: { a: 0, r: 120, b: 134, g: 18, label: "Left-Lateral-Ventricle" },
                    5: { a: 0, r: 196, b: 250, g: 58, label: "Left-Inf-Lat-Vent" },
                    6: { a: 0, r: 0, b: 0, g: 148, label: "Left-Cerebellum-Exterior" },
                    7: { a: 0, r: 220, b: 164, g: 248, label: "Left-Cerebellum-White-Matter" },
                    8: { a: 0, r: 230, b: 34, g: 148, label: "Left-Cerebellum-Cortex" },
                    9: { a: 0, r: 0, b: 14, g: 118, label: "Left-Thalamus" },
                    10: { a: 0, r: 0, b: 14, g: 118, label: "Left-Thalamus-Proper" },
                    11: { a: 0, r: 122, b: 220, g: 186, label: "Left-Caudate" },
                    12: { a: 0, r: 236, b: 176, g: 13, label: "Left-Putamen" },
                    13: { a: 0, r: 12, b: 255, g: 48, label: "Left-Pallidum" },
                    14: { a: 0, r: 204, b: 142, g: 182, label: "3rd-Ventricle" },
                    15: { a: 0, r: 42, b: 164, g: 204, label: "4th-Ventricle" },
                    16: { a: 0, r: 119, b: 176, g: 159, label: "Brain-Stem" },
                    17: { a: 0, r: 220, b: 20, g: 216, label: "Left-Hippocampus" },
                    18: { a: 0, r: 103, b: 255, g: 255, label: "Left-Amygdala" },
                    19: { a: 0, r: 80, b: 98, g: 196, label: "Left-Insula" },
                    20: { a: 0, r: 60, b: 210, g: 58, label: "Left-Operculum" },
                    21: { a: 0, r: 60, b: 210, g: 58, label: "Line-1" },
                    22: { a: 0, r: 60, b: 210, g: 58, label: "Line-2" },
                    23: { a: 0, r: 60, b: 210, g: 58, label: "Line-3" },
                    24: { a: 0, r: 60, b: 60, g: 60, label: "CSF" },
                    25: { a: 0, r: 255, b: 0, g: 165, label: "Left-Lesion" },
                    26: { a: 0, r: 255, b: 0, g: 165, label: "Left-Accumbens-area" },
                    27: { a: 0, r: 0, b: 127, g: 255, label: "Left-Substancia-Nigra" },
                    28: { a: 0, r: 165, b: 42, g: 42, label: "Left-VentralDC" },
                    29: { a: 0, r: 135, b: 235, g: 206, label: "Left-undetermined" },
                    30: { a: 0, r: 160, b: 240, g: 32, label: "Left-vessel" },
                    31: { a: 0, r: 0, b: 200, g: 200, label: "Left-choroid-plexus" },
                    32: { a: 0, r: 100, b: 100, g: 50, label: "Left-F3orb" },
                    33: { a: 0, r: 135, b: 74, g: 50, label: "Left-lOg" },
                    34: { a: 0, r: 122, b: 50, g: 135, label: "Left-aOg" },
                    35: { a: 0, r: 51, b: 135, g: 50, label: "Left-mOg" },
                    36: { a: 0, r: 74, b: 60, g: 155, label: "Left-pOg" },
                    37: { a: 0, r: 120, b: 43, g: 62, label: "Left-Stellate" },
                    38: { a: 0, r: 74, b: 60, g: 155, label: "Left-Porg" },
                    39: { a: 0, r: 122, b: 50, g: 135, label: "Left-Aorg" },
                    40: { a: 0, r: 70, b: 180, g: 130, label: "Right-Cerebral-Exterior" },
                    41: { a: 0, r: 0, b: 0, g: 225, label: "Right-Cerebral-White-Matter" },
                    42: { a: 0, r: 205, b: 78, g: 62, label: "Right-Cerebral-Cortex" },
                    43: { a: 0, r: 120, b: 134, g: 18, label: "Right-Lateral-Ventricle" },
                    44: { a: 0, r: 196, b: 250, g: 58, label: "Right-Inf-Lat-Vent" },
                    45: { a: 0, r: 0, b: 0, g: 148, label: "Right-Cerebellum-Exterior" },
                    46: { a: 0, r: 220, b: 164, g: 248, label: "Right-Cerebellum-White-Matter" },
                    47: { a: 0, r: 230, b: 34, g: 148, label: "Right-Cerebellum-Cortex" },
                    48: { a: 0, r: 0, b: 14, g: 118, label: "Right-Thalamus" },
                    49: { a: 0, r: 0, b: 14, g: 118, label: "Right-Thalamus-Proper" },
                    50: { a: 0, r: 122, b: 220, g: 186, label: "Right-Caudate" },
                    51: { a: 0, r: 236, b: 176, g: 13, label: "Right-Putamen" },
                    52: { a: 0, r: 13, b: 255, g: 48, label: "Right-Pallidum" },
                    53: { a: 0, r: 220, b: 20, g: 216, label: "Right-Hippocampus" },
                    54: { a: 0, r: 103, b: 255, g: 255, label: "Right-Amygdala" },
                    55: { a: 0, r: 80, b: 98, g: 196, label: "Right-Insula" },
                    56: { a: 0, r: 60, b: 210, g: 58, label: "Right-Operculum" },
                    57: { a: 0, r: 255, b: 0, g: 165, label: "Right-Lesion" },
                    58: { a: 0, r: 255, b: 0, g: 165, label: "Right-Accumbens-area" },
                    59: { a: 0, r: 0, b: 127, g: 255, label: "Right-Substancia-Nigra" },
                    60: { a: 0, r: 165, b: 42, g: 42, label: "Right-VentralDC" },
                    61: { a: 0, r: 135, b: 235, g: 206, label: "Right-undetermined" },
                    62: { a: 0, r: 160, b: 240, g: 32, label: "Right-vessel" },
                    63: { a: 0, r: 0, b: 221, g: 200, label: "Right-choroid-plexus" },
                    64: { a: 0, r: 100, b: 100, g: 50, label: "Right-F3orb" },
                    65: { a: 0, r: 135, b: 74, g: 50, label: "Right-lOg" },
                    66: { a: 0, r: 122, b: 50, g: 135, label: "Right-aOg" },
                    67: { a: 0, r: 51, b: 135, g: 50, label: "Right-mOg" },
                    68: { a: 0, r: 74, b: 60, g: 155, label: "Right-pOg" },
                    69: { a: 0, r: 120, b: 43, g: 62, label: "Right-Stellate" },
                    70: { a: 0, r: 74, b: 60, g: 155, label: "Right-Porg" },
                    71: { a: 0, r: 122, b: 50, g: 135, label: "Right-Aorg" },
                    72: { a: 0, r: 120, b: 150, g: 190, label: "5th-Ventricle" },
                    73: { a: 0, r: 122, b: 50, g: 135, label: "Left-Interior" },
                    74: { a: 0, r: 122, b: 50, g: 135, label: "Right-Interior" },
                    75: { a: 0, r: 120, b: 134, g: 18, label: "Left-Lateral-Ventricles" },
                    76: { a: 0, r: 120, b: 134, g: 18, label: "Right-Lateral-Ventricles" },
                    77: { a: 0, r: 200, b: 255, g: 70, label: "WM-hypointensities" },
                    78: { a: 0, r: 255, b: 10, g: 148, label: "Left-WM-hypointensities" },
                    79: { a: 0, r: 255, b: 10, g: 148, label: "Right-WM-hypointensities" },
                    80: { a: 0, r: 164, b: 226, g: 108, label: "non-WM-hypointensities" },
                    81: { a: 0, r: 164, b: 226, g: 108, label: "Left-non-WM-hypointensities" },
                    82: { a: 0, r: 164, b: 226, g: 108, label: "Right-non-WM-hypointensities" },
                    83: { a: 0, r: 255, b: 185, g: 218, label: "Left-F1" },
                    84: { a: 0, r: 255, b: 185, g: 218, label: "Right-F1" },
                    85: { a: 0, r: 234, b: 30, g: 169, label: "Optic-Chiasm" },
                    86: { a: 0, r: 250, b: 50, g: 255, label: "Corpus_Callosum" },
                    2135: { a: 0, r: 65, b: 60, g: 220, label: "ctx-rh-G_temp_sup-Planum_polare" },
                    2136: { a: 0, r: 25, b: 20, g: 140, label: "ctx-rh-G_temp_sup-Planum_tempolare" },
                    2137: { a: 0, r: 13, b: 250, g: 0, label: "ctx-rh-G_and_S_transverse_frontopolar" },
                    2138: { a: 0, r: 61, b: 220, g: 20, label: "ctx-rh-Lat_Fissure-ant_sgt-ramus_horizontal" },
                    2139: { a: 0, r: 61, b: 60, g: 20, label: "ctx-rh-Lat_Fissure-ant_sgt-ramus_vertical" },
                    2140: { a: 0, r: 61, b: 100, g: 60, label: "ctx-rh-Lat_Fissure-post_sgt" },
                    2141: { a: 0, r: 25, b: 25, g: 25, label: "ctx-rh-Medial_wall" },
                    2117: { a: 0, r: 60, b: 140, g: 20, label: "ctx-rh-G_occipit-temp_lat-Or_fusiform" },
                    2143: { a: 0, r: 220, b: 20, g: 180, label: "ctx-rh-Pole_temporal" },
                    96: { a: 0, r: 205, b: 125, g: 10, label: "Left-Amygdala-Anterior" },
                    97: { a: 0, r: 205, b: 125, g: 10, label: "Right-Amygdala-Anterior" },
                    98: { a: 0, r: 160, b: 240, g: 32, label: "Dura" },
                    2147: { a: 0, r: 183, b: 20, g: 100, label: "ctx-rh-S_cingulate-Main_part_and_Intracingulate" },
                    100: { a: 0, r: 124, b: 178, g: 140, label: "Left-wm-intensity-abnormality" },
                    101: { a: 0, r: 125, b: 178, g: 140, label: "Left-caudate-intensity-abnormality" },
                    102: { a: 0, r: 126, b: 178, g: 140, label: "Left-putamen-intensity-abnormality" },
                    103: { a: 0, r: 127, b: 178, g: 140, label: "Left-accumbens-intensity-abnormality" },
                    104: { a: 0, r: 124, b: 178, g: 141, label: "Left-pallidum-intensity-abnormality" },
                    105: { a: 0, r: 124, b: 178, g: 142, label: "Left-amygdala-intensity-abnormality" },
                    106: { a: 0, r: 124, b: 178, g: 143, label: "Left-hippocampus-intensity-abnormality" },
                    107: { a: 0, r: 124, b: 178, g: 144, label: "Left-thalamus-intensity-abnormality" },
                    108: { a: 0, r: 124, b: 179, g: 140, label: "Left-VDC-intensity-abnormality" },
                    109: { a: 0, r: 124, b: 178, g: 140, label: "Right-wm-intensity-abnormality" },
                    110: { a: 0, r: 125, b: 178, g: 140, label: "Right-caudate-intensity-abnormality" },
                    111: { a: 0, r: 126, b: 178, g: 140, label: "Right-putamen-intensity-abnormality" },
                    112: { a: 0, r: 127, b: 178, g: 140, label: "Right-accumbens-intensity-abnormality" },
                    113: { a: 0, r: 124, b: 178, g: 141, label: "Right-pallidum-intensity-abnormality" },
                    114: { a: 0, r: 124, b: 178, g: 142, label: "Right-amygdala-intensity-abnormality" },
                    115: { a: 0, r: 124, b: 178, g: 143, label: "Right-hippocampus-intensity-abnormality" },
                    116: { a: 0, r: 124, b: 178, g: 144, label: "Right-thalamus-intensity-abnormality" },
                    117: { a: 0, r: 124, b: 179, g: 140, label: "Right-VDC-intensity-abnormality" },
                    118: { a: 0, r: 255, b: 147, g: 20, label: "Epidermis" },
                    119: { a: 0, r: 205, b: 139, g: 179, label: "Conn-Tissue" },
                    120: { a: 0, r: 238, b: 209, g: 238, label: "SC-Fat/Muscle" },
                    121: { a: 0, r: 200, b: 200, g: 200, label: "Cranium" },
                    122: { a: 0, r: 74, b: 74, g: 255, label: "CSF-SA" },
                    123: { a: 0, r: 238, b: 0, g: 0, label: "Muscle" },
                    124: { a: 0, r: 0, b: 139, g: 0, label: "Ear" },
                    125: { a: 0, r: 173, b: 47, g: 255, label: "Adipose" },
                    126: { a: 0, r: 133, b: 229, g: 203, label: "Spinal-Cord" },
                    127: { a: 0, r: 26, b: 57, g: 237, label: "Soft-Tissue" },
                    128: { a: 0, r: 34, b: 34, g: 139, label: "Nerve" },
                    129: { a: 0, r: 30, b: 255, g: 144, label: "Bone" },
                    130: { a: 0, r: 147, b: 173, g: 19, label: "Air" },
                    131: { a: 0, r: 238, b: 59, g: 59, label: "Orbital-Fat" },
                    132: { a: 0, r: 221, b: 200, g: 39, label: "Tongue" },
                    133: { a: 0, r: 238, b: 238, g: 174, label: "Nasal-Structures" },
                    134: { a: 0, r: 255, b: 0, g: 0, label: "Globe" },
                    135: { a: 0, r: 72, b: 139, g: 61, label: "Teeth" },
                    136: { a: 0, r: 21, b: 132, g: 39, label: "Left-Caudate/Putamen" },
                    137: { a: 0, r: 21, b: 132, g: 39, label: "Right-Caudate/Putamen" },
                    138: { a: 0, r: 65, b: 20, g: 135, label: "Left-Claustrum" },
                    139: { a: 0, r: 65, b: 20, g: 135, label: "Right-Claustrum" },
                    140: { a: 0, r: 134, b: 160, g: 4, label: "Cornea" },
                    5101: { a: 0, r: 42, b: 167, g: 206, label: "Right-Inf-Longitudinal-Fasc_waypoint" },
                    142: { a: 0, r: 221, b: 68, g: 226, label: "Diploe" },
                    143: { a: 0, r: 255, b: 254, g: 255, label: "Vitreous-Humor" },
                    144: { a: 0, r: 52, b: 226, g: 209, label: "Lens" },
                    145: { a: 0, r: 239, b: 223, g: 160, label: "Aqueous-Humor" },
                    146: { a: 0, r: 70, b: 180, g: 130, label: "Outer-Table" },
                    147: { a: 0, r: 70, b: 181, g: 130, label: "Inner-Table" },
                    148: { a: 0, r: 139, b: 94, g: 121, label: "Periosteum" },
                    149: { a: 0, r: 224, b: 224, g: 224, label: "Endosteum" },
                    150: { a: 0, r: 255, b: 0, g: 0, label: "R/C/S" },
                    151: { a: 0, r: 205, b: 0, g: 205, label: "Iris" },
                    152: { a: 0, r: 238, b: 209, g: 238, label: "SC-Adipose/Muscle" },
                    153: { a: 0, r: 139, b: 94, g: 121, label: "SC-Tissue" },
                    154: { a: 0, r: 238, b: 59, g: 59, label: "Orbital-Adipose" },
                    155: { a: 0, r: 238, b: 59, g: 59, label: "Left-IntCapsule-Ant" },
                    156: { a: 0, r: 238, b: 59, g: 59, label: "Right-IntCapsule-Ant" },
                    157: { a: 0, r: 62, b: 205, g: 10, label: "Left-IntCapsule-Pos" },
                    158: { a: 0, r: 62, b: 205, g: 10, label: "Right-IntCapsule-Pos" },
                    159: { a: 0, r: 0, b: 14, g: 118, label: "Left-Cerebral-WM-unmyelinated " },
                    160: { a: 0, r: 0, b: 14, g: 118, label: "Right-Cerebral-WM-unmyelinated    " },
                    161: { a: 0, r: 220, b: 21, g: 216, label: "Left-Cerebral-WM-myelinated     " },
                    162: { a: 0, r: 220, b: 21, g: 216, label: "Right-Cerebral-WM-myelinated    " },
                    163: { a: 0, r: 122, b: 220, g: 186, label: "Left-Subcortical-Gray-Matter   " },
                    164: { a: 0, r: 122, b: 220, g: 186, label: "Right-Subcortical-Gray-Matter  " },
                    165: { a: 0, r: 255, b: 0, g: 165, label: "Skull                " },
                    166: { a: 0, r: 14, b: 255, g: 48, label: "Posterior-fossa          " },
                    167: { a: 0, r: 166, b: 42, g: 42, label: "Scalp                " },
                    168: { a: 0, r: 121, b: 134, g: 18, label: "Hematoma                " },
                    4124: { a: 0, r: 220, b: 220, g: 180, label: "wm-rh-G_parietal_superior" },
                    2115: { a: 0, r: 180, b: 180, g: 60, label: "ctx-rh-G_occipital_middle" },
                    4125: { a: 0, r: 20, b: 140, g: 180, label: "wm-rh-G_postcentral" },
                    180: { a: 0, r: 73, b: 139, g: 61, label: "Left-Cortical-Dysplasia      " },
                    181: { a: 0, r: 73, b: 139, g: 62, label: "Right-Cortical-Dysplasia     " },
                    2120: { a: 0, r: 220, b: 20, g: 60, label: "ctx-rh-G_orbital" },
                    4127: { a: 0, r: 25, b: 140, g: 20, label: "wm-rh-G_precuneus" },
                    4166: { a: 0, r: 221, b: 20, g: 100, label: "wm-rh-S_orbital_lateral" },
                    12145: { a: 0, r: 63, b: 180, g: 180, label: "ctx_rh_S_calcarine" },
                    193: { a: 0, r: 0, b: 255, g: 196, label: "Left-hippocampal_fissure" },
                    194: { a: 0, r: 255, b: 164, g: 164, label: "Left-CADG-head" },
                    195: { a: 0, r: 196, b: 0, g: 196, label: "Left-subiculum" },
                    196: { a: 0, r: 0, b: 255, g: 100, label: "Left-fimbria" },
                    197: { a: 0, r: 128, b: 164, g: 196, label: "Right-hippocampal_fissure" },
                    198: { a: 0, r: 0, b: 75, g: 126, label: "Right-CADG-head" },
                    199: { a: 0, r: 128, b: 64, g: 96, label: "Right-subiculum" },
                    200: { a: 0, r: 0, b: 128, g: 50, label: "Right-fimbria" },
                    201: { a: 0, r: 255, b: 153, g: 204, label: "alveus" },
                    202: { a: 0, r: 255, b: 128, g: 128, label: "perforant_pathway" },
                    203: { a: 0, r: 255, b: 0, g: 255, label: "parasubiculum" },
                    204: { a: 0, r: 64, b: 64, g: 0, label: "presubiculum" },
                    205: { a: 0, r: 0, b: 255, g: 0, label: "subiculum" },
                    206: { a: 0, r: 255, b: 0, g: 0, label: "CA1" },
                    207: { a: 0, r: 128, b: 255, g: 128, label: "CA2" },
                    208: { a: 0, r: 0, b: 0, g: 128, label: "CA3" },
                    209: { a: 0, r: 196, b: 128, g: 160, label: "CA4" },
                    210: { a: 0, r: 32, b: 255, g: 200, label: "GC-DG" },
                    211: { a: 0, r: 128, b: 128, g: 255, label: "HATA" },
                    212: { a: 0, r: 204, b: 204, g: 153, label: "fimbria" },
                    213: { a: 0, r: 121, b: 136, g: 17, label: "lateral_ventricle" },
                    214: { a: 0, r: 128, b: 0, g: 0, label: "molecular_layer_HP" },
                    215: { a: 0, r: 128, b: 255, g: 32, label: "hippocampal_fissure" },
                    216: { a: 0, r: 255, b: 102, g: 204, label: "entorhinal_cortex" },
                    217: { a: 0, r: 128, b: 128, g: 128, label: "molecular_layer_subiculum" },
                    218: { a: 0, r: 104, b: 255, g: 255, label: "Amygdala" },
                    219: { a: 0, r: 0, b: 0, g: 226, label: "Cerebral_White_Matter" },
                    220: { a: 0, r: 205, b: 78, g: 63, label: "Cerebral_Cortex" },
                    221: { a: 0, r: 197, b: 250, g: 58, label: "Inf_Lat_Vent" },
                    222: { a: 0, r: 33, b: 250, g: 150, label: "Perirhinal" },
                    223: { a: 0, r: 226, b: 0, g: 0, label: "Cerebral_White_Matter_Edge" },
                    224: { a: 0, r: 100, b: 100, g: 100, label: "Background" },
                    225: { a: 0, r: 197, b: 250, g: 150, label: "Ectorhinal" },
                    4160: { a: 0, r: 61, b: 180, g: 20, label: "wm-rh-S_occipital_anterior" },
                    13163: { a: 0, r: 221, b: 20, g: 100, label: "wm_lh_S_orbital_lateral" },
                    4130: { a: 0, r: 60, b: 220, g: 20, label: "wm-rh-G_subcentral" },
                    4135: { a: 0, r: 65, b: 60, g: 220, label: "wm-rh-G_temp_sup-Planum_polare" },
                    4134: { a: 0, r: 220, b: 220, g: 60, label: "wm-rh-G_temp_sup-Lateral_aspect" },
                    4136: { a: 0, r: 25, b: 20, g: 140, label: "wm-rh-G_temp_sup-Planum_tempolare" },
                    4137: { a: 0, r: 13, b: 250, g: 0, label: "wm-rh-G_and_S_transverse_frontopolar" },
                    4168: { a: 0, r: 21, b: 140, g: 180, label: "wm-rh-S_paracentral" },
                    250: { a: 0, r: 255, b: 0, g: 0, label: "Fornix" },
                    251: { a: 0, r: 0, b: 64, g: 0, label: "CC_Posterior" },
                    252: { a: 0, r: 0, b: 112, g: 0, label: "CC_Mid_Posterior" },
                    253: { a: 0, r: 0, b: 160, g: 0, label: "CC_Central" },
                    254: { a: 0, r: 0, b: 208, g: 0, label: "CC_Mid_Anterior" },
                    255: { a: 0, r: 0, b: 255, g: 0, label: "CC_Anterior" },
                    256: { a: 0, r: 0, b: 0, g: 0, label: "Voxel-Unchanged" },
                    4139: { a: 0, r: 61, b: 60, g: 20, label: "wm-rh-Lat_Fissure-ant_sgt-ramus_vertical" },
                    4140: { a: 0, r: 61, b: 100, g: 60, label: "wm-rh-Lat_Fissure-post_sgt" },
                    4141: { a: 0, r: 25, b: 25, g: 25, label: "wm-rh-Medial_wall" },
                    4142: { a: 0, r: 140, b: 60, g: 20, label: "wm-rh-Pole_occipital" },
                    4169: { a: 0, r: 101, b: 180, g: 100, label: "wm-rh-S_parieto_occipital" },
                    11116: { a: 0, r: 180, b: 140, g: 20, label: "ctx_lh_G_front_sup" },
                    4143: { a: 0, r: 220, b: 20, g: 180, label: "wm-rh-Pole_temporal" },
                    4101: { a: 0, r: 50, b: 50, g: 50, label: "wm-rh-Corpus_callosum" },
                    4144: { a: 0, r: 63, b: 180, g: 180, label: "wm-rh-S_calcarine" },
                    3121: { a: 0, r: 60, b: 60, g: 100, label: "wm-lh-G_paracentral" },
                    4146: { a: 0, r: 21, b: 20, g: 220, label: "wm-rh-S_central_insula" },
                    4147: { a: 0, r: 183, b: 20, g: 100, label: "wm-rh-S_cingulate-Main_part_and_Intracingulate" },
                    4170: { a: 0, r: 181, b: 20, g: 220, label: "wm-rh-S_pericallosal" },
                    2100: { a: 0, r: 0, b: 0, g: 0, label: "ctx-rh-Unknown" },
                    4102: { a: 0, r: 180, b: 30, g: 20, label: "wm-rh-G_and_S_Insula_ONLY_AVERAGE" },
                    2101: { a: 0, r: 50, b: 50, g: 50, label: "ctx-rh-Corpus_callosum" },
                    14127: { a: 0, r: 220, b: 220, g: 180, label: "wm_rh_G_parietal_sup"},
                    2116: { a: 0, r: 20, b: 60, g: 220, label: "ctx-rh-G_occipital_superior" },
                    6080: { a: 0, r: 237, b: 230, g: 14, label: "Right-SLF2" },
                    2102: { a: 0, r: 180, b: 30, g: 20, label: "ctx-rh-G_and_S_Insula_ONLY_AVERAGE" },
                    331: { a: 0, r: 255, b: 0, g: 0, label: "Aorta" },
                    332: { a: 0, r: 255, b: 0, g: 80, label: "Left-Common-IliacA" },
                    333: { a: 0, r: 255, b: 0, g: 160, label: "Right-Common-IliacA" },
                    334: { a: 0, r: 255, b: 0, g: 255, label: "Left-External-IliacA" },
                    335: { a: 0, r: 0, b: 0, g: 255, label: "Right-External-IliacA" },
                    336: { a: 0, r: 255, b: 160, g: 0, label: "Left-Internal-IliacA" },
                    337: { a: 0, r: 255, b: 255, g: 0, label: "Right-Internal-IliacA" },
                    338: { a: 0, r: 255, b: 80, g: 50, label: "Left-Lateral-SacralA" },
                    339: { a: 0, r: 80, b: 50, g: 255, label: "Right-Lateral-SacralA" },
                    340: { a: 0, r: 160, b: 50, g: 255, label: "Left-ObturatorA" },
                    341: { a: 0, r: 160, b: 255, g: 200, label: "Right-ObturatorA" },
                    342: { a: 0, r: 0, b: 160, g: 255, label: "Left-Internal-PudendalA" },
                    343: { a: 0, r: 0, b: 255, g: 0, label: "Right-Internal-PudendalA" },
                    344: { a: 0, r: 80, b: 255, g: 50, label: "Left-UmbilicalA" },
                    345: { a: 0, r: 160, b: 255, g: 0, label: "Right-UmbilicalA" },
                    346: { a: 0, r: 255, b: 0, g: 210, label: "Left-Inf-RectalA" },
                    347: { a: 0, r: 0, b: 255, g: 160, label: "Right-Inf-RectalA" },
                    348: { a: 0, r: 255, b: 80, g: 200, label: "Left-Common-IliacV" },
                    349: { a: 0, r: 255, b: 160, g: 200, label: "Right-Common-IliacV" },
                    350: { a: 0, r: 255, b: 200, g: 80, label: "Left-External-IliacV" },
                    351: { a: 0, r: 255, b: 200, g: 160, label: "Right-External-IliacV" },
                    352: { a: 0, r: 30, b: 80, g: 255, label: "Left-Internal-IliacV" },
                    353: { a: 0, r: 80, b: 255, g: 200, label: "Right-Internal-IliacV" },
                    354: { a: 0, r: 80, b: 200, g: 255, label: "Left-ObturatorV" },
                    355: { a: 0, r: 195, b: 200, g: 255, label: "Right-ObturatorV" },
                    356: { a: 0, r: 120, b: 20, g: 200, label: "Left-Internal-PudendalV" },
                    357: { a: 0, r: 170, b: 200, g: 10, label: "Right-Internal-PudendalV" },
                    358: { a: 0, r: 20, b: 180, g: 130, label: "Pos-Lymph" },
                    359: { a: 0, r: 20, b: 130, g: 180, label: "Neg-Lymph" },
                    2108: { a: 0, r: 180, b: 140, g: 220, label: "ctx-rh-G_frontal_inf-Triangular_part" },
                    3149: { a: 0, r: 221, b: 140, g: 60, label: "wm-lh-S_circular_insula_anterior" },
                    2109: { a: 0, r: 140, b: 180, g: 100, label: "ctx-rh-G_frontal_middle" },
                    4172: { a: 0, r: 21, b: 240, g: 20, label: "wm-rh-S_precentral-Inferior-part" },
                    2110: { a: 0, r: 180, b: 140, g: 20, label: "ctx-rh-G_frontal_superior" },
                    4104: { a: 0, r: 25, b: 60, g: 60, label: "wm-rh-G_cingulate-Main_part" },
                    13164: { a: 0, r: 181, b: 20, g: 200, label: "wm_lh_S_orbital_med-olfact" },
                    2111: { a: 0, r: 140, b: 140, g: 20, label: "ctx-rh-G_frontomarginal" },
                    14129: { a: 0, r: 60, b: 180, g: 140, label: "wm_rh_G_precentral" },
                    4174: { a: 0, r: 61, b: 60, g: 180, label: "wm-rh-S_subcentral_ant" },
                    2112: { a: 0, r: 21, b: 10, g: 10, label: "ctx-rh-G_insular_long" },
                    2113: { a: 0, r: 225, b: 140, g: 140, label: "ctx-rh-G_insular_short" },
                    3150: { a: 0, r: 221, b: 220, g: 20, label: "wm-lh-S_circular_insula_inferior" },
                    2114: { a: 0, r: 23, b: 180, g: 60, label: "ctx-rh-G_and_S_occipital_inferior" },
                    4173: { a: 0, r: 21, b: 200, g: 20, label: "wm-rh-S_precentral-Superior-part" },
                    400: { a: 0, r: 206, b: 78, g: 62, label: "V1" },
                    401: { a: 0, r: 121, b: 134, g: 18, label: "V2" },
                    402: { a: 0, r: 199, b: 250, g: 58, label: "BA44" },
                    403: { a: 0, r: 1, b: 0, g: 148, label: "BA45" },
                    404: { a: 0, r: 221, b: 164, g: 248, label: "BA4a" },
                    405: { a: 0, r: 231, b: 34, g: 148, label: "BA4p" },
                    406: { a: 0, r: 1, b: 14, g: 118, label: "BA6" },
                    407: { a: 0, r: 120, b: 14, g: 118, label: "BA2" },
                    408: { a: 0, r: 123, b: 221, g: 186, label: "BA1_old" },
                    409: { a: 0, r: 238, b: 177, g: 13, label: "BAun2" },
                    410: { a: 0, r: 123, b: 220, g: 186, label: "BA1" },
                    411: { a: 0, r: 138, b: 206, g: 13, label: "BA2b" },
                    412: { a: 0, r: 238, b: 176, g: 130, label: "BA3a" },
                    413: { a: 0, r: 218, b: 76, g: 230, label: "BA3b" },
                    414: { a: 0, r: 38, b: 176, g: 213, label: "MT" },
                    415: { a: 0, r: 1, b: 176, g: 225, label: "AIPS_AIP_l" },
                    416: { a: 0, r: 1, b: 176, g: 225, label: "AIPS_AIP_r" },
                    417: { a: 0, r: 200, b: 100, g: 2, label: "AIPS_VIP_l" },
                    418: { a: 0, r: 200, b: 100, g: 2, label: "AIPS_VIP_r" },
                    419: { a: 0, r: 5, b: 90, g: 200, label: "IPL_PFcm_l" },
                    420: { a: 0, r: 5, b: 90, g: 200, label: "IPL_PFcm_r" },
                    421: { a: 0, r: 100, b: 200, g: 5, label: "IPL_PF_l" },
                    422: { a: 0, r: 25, b: 100, g: 255, label: "IPL_PFm_l" },
                    423: { a: 0, r: 25, b: 100, g: 255, label: "IPL_PFm_r" },
                    424: { a: 0, r: 230, b: 100, g: 7, label: "IPL_PFop_l" },
                    425: { a: 0, r: 230, b: 100, g: 7, label: "IPL_PFop_r" },
                    426: { a: 0, r: 100, b: 200, g: 5, label: "IPL_PF_r" },
                    427: { a: 0, r: 150, b: 200, g: 10, label: "IPL_PFt_l" },
                    428: { a: 0, r: 150, b: 200, g: 10, label: "IPL_PFt_r" },
                    429: { a: 0, r: 175, b: 176, g: 10, label: "IPL_PGa_l" },
                    430: { a: 0, r: 175, b: 176, g: 10, label: "IPL_PGa_r" },
                    431: { a: 0, r: 10, b: 255, g: 100, label: "IPL_PGp_l" },
                    432: { a: 0, r: 10, b: 255, g: 100, label: "IPL_PGp_r" },
                    433: { a: 0, r: 150, b: 70, g: 45, label: "Visual_V3d_l" },
                    434: { a: 0, r: 150, b: 70, g: 45, label: "Visual_V3d_r" },
                    435: { a: 0, r: 45, b: 15, g: 200, label: "Visual_V4_l" },
                    436: { a: 0, r: 45, b: 15, g: 200, label: "Visual_V4_r" },
                    437: { a: 0, r: 227, b: 100, g: 45, label: "Visual_V5_b" },
                    438: { a: 0, r: 227, b: 100, g: 45, label: "Visual_VP_l" },
                    439: { a: 0, r: 227, b: 100, g: 45, label: "Visual_VP_r" },
                    5061: { a: 0, r: 209, b: 78, g: 62, label: "Right-SLF2-End" },
                    2122: { a: 0, r: 20, b: 220, g: 60, label: "ctx-rh-G_parietal_inferior-Angular_part" },
                    14155: { a: 0, r: 61, b: 100, g: 220, label: "wm_rh_S_front_sup" },
                    2123: { a: 0, r: 100, b: 60, g: 100, label: "ctx-rh-G_parietal_inferior-Supramarginal_part" },
                    3152: { a: 0, r: 100, b: 200, g: 200, label: "wm-lh-S_collateral_transverse_ant" },
                    2124: { a: 0, r: 220, b: 220, g: 180, label: "ctx-rh-G_parietal_superior" },
                    4175: { a: 0, r: 61, b: 250, g: 180, label: "wm-rh-S_subcentral_post" },
                    12154: { a: 0, r: 141, b: 100, g: 20, label: "ctx_rh_S_front_middle" },
                    2125: { a: 0, r: 20, b: 140, g: 180, label: "ctx-rh-G_postcentral" },
                    4107: { a: 0, r: 140, b: 60, g: 60, label: "wm-rh-G_frontal_inf-Orbital_part" },
                    2126: { a: 0, r: 60, b: 180, g: 140, label: "ctx-rh-G_precentral" },
                    14133: { a: 0, r: 60, b: 220, g: 60, label: "wm_rh_G_temp_sup-G_T_transv" },
                    2127: { a: 0, r: 25, b: 140, g: 20, label: "ctx-rh-G_precuneus" },
                    12169: { a: 0, r: 21, b: 240, g: 20, label: "ctx_rh_S_precentral-inf-part" },
                    2128: { a: 0, r: 20, b: 100, g: 60, label: "ctx-rh-G_rectus" },
                    12101: { a: 0, r: 23, b: 60, g: 220, label: "ctx_rh_G_and_S_frontomargin" },
                    3153: { a: 0, r: 10, b: 200, g: 200, label: "wm-lh-S_collateral_transverse_post" },
                    2129: { a: 0, r: 60, b: 20, g: 220, label: "ctx-rh-G_subcallosal" },
                    4176: { a: 0, r: 21, b: 60, g: 20, label: "wm-rh-S_suborbital" },
                    2130: { a: 0, r: 60, b: 220, g: 20, label: "ctx-rh-G_subcentral" },
                    4108: { a: 0, r: 180, b: 140, g: 220, label: "wm-rh-G_frontal_inf-Triangular_part" },
                    4163: { a: 0, r: 221, b: 20, g: 140, label: "wm-rh-S_occipito-temporal_lateral" },
                    2131: { a: 0, r: 220, b: 100, g: 220, label: "ctx-rh-G_temporal_inferior" },
                    500: { a: 0, r: 17, b: 136, g: 85, label: "right_CA2/3" },
                    501: { a: 0, r: 119, b: 102, g: 187, label: "right_alveus" },
                    502: { a: 0, r: 204, b: 34, g: 68, label: "right_CA1" },
                    503: { a: 0, r: 204, b: 255, g: 0, label: "right_fimbria" },
                    504: { a: 0, r: 221, b: 17, g: 187, label: "right_presubiculum" },
                    505: { a: 0, r: 153, b: 238, g: 221, label: "right_hippocampal_fissure" },
                    506: { a: 0, r: 51, b: 17, g: 17, label: "right_CA4/DG" },
                    507: { a: 0, r: 0, b: 85, g: 119, label: "right_subiculum" },
                    508: { a: 0, r: 20, b: 200, g: 100, label: "right_fornix" },
                    2133: { a: 0, r: 60, b: 220, g: 60, label: "ctx-rh-G_temp_sup-G_temp_transv_and_interm_S" },
                    3154: { a: 0, r: 221, b: 20, g: 220, label: "wm-lh-S_frontal_inferior" },
                    2134: { a: 0, r: 220, b: 220, g: 60, label: "ctx-rh-G_temp_sup-Lateral_aspect" },
                    4177: { a: 0, r: 101, b: 60, g: 60, label: "wm-rh-S_subparietal" },
                    3159: { a: 0, r: 143, b: 220, g: 20, label: "wm-lh-S_intraparietal-and_Parietal_transverse" },
                    4109: { a: 0, r: 140, b: 180, g: 100, label: "wm-rh-G_frontal_middle" },
                    13165: { a: 0, r: 101, b: 20, g: 20, label: "wm_lh_S_orbital-H_Shaped" },
                    3160: { a: 0, r: 61, b: 180, g: 20, label: "wm-lh-S_occipital_anterior" },
                    3161: { a: 0, r: 101, b: 220, g: 60, label: "wm-lh-S_occipital_middle_and_Lunatus" },
                    3151: { a: 0, r: 61, b: 220, g: 220, label: "wm-lh-S_circular_insula_superior" },
                    2132: { a: 0, r: 180, b: 60, g: 60, label: "ctx-rh-G_temporal_middle" },
                    3155: { a: 0, r: 141, b: 100, g: 20, label: "wm-lh-S_frontal_middle" },
                    3163: { a: 0, r: 221, b: 20, g: 140, label: "wm-lh-S_occipito-temporal_lateral" },
                    4178: { a: 0, r: 21, b: 220, g: 220, label: "wm-rh-S_supracingulate" },
                    550: { a: 0, r: 17, b: 137, g: 85, label: "left_CA2/3" },
                    551: { a: 0, r: 119, b: 103, g: 187, label: "left_alveus" },
                    552: { a: 0, r: 204, b: 35, g: 68, label: "left_CA1" },
                    553: { a: 0, r: 204, b: 254, g: 0, label: "left_fimbria" },
                    554: { a: 0, r: 221, b: 16, g: 187, label: "left_presubiculum" },
                    555: { a: 0, r: 153, b: 239, g: 221, label: "left_hippocampal_fissure" },
                    556: { a: 0, r: 51, b: 18, g: 17, label: "left_CA4/DG" },
                    557: { a: 0, r: 0, b: 86, g: 119, label: "left_subiculum" },
                    558: { a: 0, r: 20, b: 201, g: 100, label: "left_fornix" },
                    3165: { a: 0, r: 101, b: 20, g: 20, label: "wm-lh-S_orbital-H_shapped" },
                    14135: { a: 0, r: 65, b: 60, g: 220, label: "wm_rh_G_temp_sup-Plan_polar" },
                    2142: { a: 0, r: 140, b: 60, g: 20, label: "ctx-rh-Pole_occipital" },
                    3167: { a: 0, r: 181, b: 20, g: 200, label: "wm-lh-S_orbital_medial-Or_olfactory" },
                    14148: { a: 0, r: 221, b: 140, g: 60, label: "wm_rh_S_circular_insula_ant" },
                    3156: { a: 0, r: 61, b: 100, g: 220, label: "wm-lh-S_frontal_superior" },
                    2144: { a: 0, r: 63, b: 180, g: 180, label: "ctx-rh-S_calcarine" },
                    4179: { a: 0, r: 21, b: 180, g: 180, label: "wm-rh-S_temporal_inferior" },
                    2145: { a: 0, r: 221, b: 10, g: 20, label: "ctx-rh-S_central" },
                    4111: { a: 0, r: 140, b: 140, g: 20, label: "wm-rh-G_frontomarginal" },
                    2146: { a: 0, r: 21, b: 20, g: 220, label: "ctx-rh-S_central_insula" },
                    5066: { a: 0, r: 125, b: 220, g: 186, label: "Right-SLF3-Start" },
                    14147: { a: 0, r: 221, b: 100, g: 20, label: "wm_rh_S_cingul-Marginalis" },
                    3171: { a: 0, r: 21, b: 200, g: 140, label: "wm-lh-S_postcentral" },
                    600: { a: 0, r: 254, b: 254, g: 254, label: "Tumor" },
                    2148: { a: 0, r: 221, b: 100, g: 20, label: "ctx-rh-S_cingulate-Marginalis_part" },
                    3157: { a: 0, r: 21, b: 60, g: 220, label: "wm-lh-S_frontomarginal" },
                    2149: { a: 0, r: 221, b: 140, g: 60, label: "ctx-rh-S_circular_insula_anterior" },
                    4180: { a: 0, r: 223, b: 60, g: 220, label: "wm-rh-S_temporal_superior" },
                    2150: { a: 0, r: 221, b: 220, g: 20, label: "ctx-rh-S_circular_insula_inferior" },
                    4112: { a: 0, r: 21, b: 10, g: 10, label: "wm-rh-G_insular_long" },
                    2151: { a: 0, r: 61, b: 220, g: 220, label: "ctx-rh-S_circular_insula_superior" },
                    2118: { a: 0, r: 220, b: 140, g: 180, label: "ctx-rh-G_occipit-temp_med-Lingual_part" },
                    2152: { a: 0, r: 100, b: 200, g: 200, label: "ctx-rh-S_collateral_transverse_ant" },
                    13152: { a: 0, r: 10, b: 200, g: 200, label: "wm_lh_S_collat_transv_post" },
                    13154: { a: 0, r: 141, b: 100, g: 20, label: "wm_lh_S_front_middle" },
                    2153: { a: 0, r: 10, b: 200, g: 200, label: "ctx-rh-S_collateral_transverse_post" },
                    3158: { a: 0, r: 141, b: 20, g: 60, label: "wm-lh-S_intermedius_primus-Jensen" },
                    2154: { a: 0, r: 221, b: 20, g: 220, label: "ctx-rh-S_frontal_inferior" },
                    4181: { a: 0, r: 221, b: 60, g: 60, label: "wm-rh-S_temporal_transverse" },
                    2155: { a: 0, r: 141, b: 100, g: 20, label: "ctx-rh-S_frontal_middle" },
                    4113: { a: 0, r: 225, b: 140, g: 140, label: "wm-rh-G_insular_short" },
                    4164: { a: 0, r: 141, b: 220, g: 100, label: "wm-rh-S_occipito-temporal_medial_and_S_Lingual" },
                    2156: { a: 0, r: 61, b: 100, g: 220, label: "ctx-rh-S_frontal_superior" },
                    14103: { a: 0, r: 63, b: 60, g: 100, label: "wm_rh_G_and_S_paracentral" },
                    2157: { a: 0, r: 21, b: 60, g: 220, label: "ctx-rh-S_frontomarginal" },
                    2158: { a: 0, r: 141, b: 20, g: 60, label: "ctx-rh-S_intermedius_primus-Jensen" },
                    14105: { a: 0, r: 13, b: 250, g: 0, label: "wm_rh_G_and_S_transv_frontopol" },
                    2159: { a: 0, r: 143, b: 220, g: 20, label: "ctx-rh-S_intraparietal-and_Parietal_transverse" },
                    2160: { a: 0, r: 61, b: 180, g: 20, label: "ctx-rh-S_occipital_anterior" },
                    4114: { a: 0, r: 23, b: 180, g: 60, label: "wm-rh-G_and_S_occipital_inferior" },
                    14107: { a: 0, r: 26, b: 75, g: 60, label: "wm_rh_G_and_S_cingul-Mid-Ant" },
                    13166: { a: 0, r: 101, b: 180, g: 100, label: "wm_lh_S_parieto_occipital" },
                    2161: { a: 0, r: 101, b: 220, g: 60, label: "ctx-rh-S_occipital_middle_and_Lunatus" },
                    14139: { a: 0, r: 61, b: 220, g: 20, label: "wm_rh_Lat_Fis-ant-Horizont" },
                    2162: { a: 0, r: 21, b: 140, g: 20, label: "ctx-rh-S_occipital_superior_and_transversalis" },
                    14109: { a: 0, r: 25, b: 250, g: 60, label: "wm_rh_G_cingul-Post-dorsal" },
                    2163: { a: 0, r: 221, b: 20, g: 140, label: "ctx-rh-S_occipito-temporal_lateral" },
                    2164: { a: 0, r: 141, b: 220, g: 100, label: "ctx-rh-S_occipito-temporal_medial_and_S_Lingual" },
                    14111: { a: 0, r: 180, b: 20, g: 20, label: "wm_rh_G_cuneus" },
                    701: { a: 0, r: 120, b: 134, g: 18, label: "CSF-FSL-FAST" },
                    702: { a: 0, r: 205, b: 78, g: 62, label: "GrayMatter-FSL-FAST" },
                    703: { a: 0, r: 0, b: 0, g: 225, label: "WhiteMatter-FSL-FAST" },
                    4115: { a: 0, r: 180, b: 180, g: 60, label: "wm-rh-G_occipital_middle" },
                    2166: { a: 0, r: 221, b: 20, g: 100, label: "ctx-rh-S_orbital_lateral" },
                    12100: { a: 0, r: 0, b: 0, g: 0, label: "ctx_rh_Unknown" },
                    2167: { a: 0, r: 181, b: 20, g: 200, label: "ctx-rh-S_orbital_medial-Or_olfactory" },
                    4149: { a: 0, r: 221, b: 140, g: 60, label: "wm-rh-S_circular_insula_anterior" },
                    14114: { a: 0, r: 180, b: 140, g: 220, label: "wm_rh_G_front_inf-Triangul" },
                    2168: { a: 0, r: 21, b: 140, g: 180, label: "ctx-rh-S_paracentral" },
                    14115: { a: 0, r: 140, b: 180, g: 100, label: "wm_rh_G_front_middle" },
                    2169: { a: 0, r: 101, b: 180, g: 100, label: "ctx-rh-S_parieto_occipital" },
                    14116: { a: 0, r: 180, b: 140, g: 20, label: "wm_rh_G_front_sup" },
                    12163: { a: 0, r: 221, b: 20, g: 100, label: "ctx_rh_S_orbital_lateral" },
                    2170: { a: 0, r: 181, b: 20, g: 220, label: "ctx-rh-S_pericallosal" },
                    4116: { a: 0, r: 20, b: 60, g: 220, label: "wm-rh-G_occipital_superior" },
                    2171: { a: 0, r: 21, b: 200, g: 140, label: "ctx-rh-S_postcentral" },
                    13127: { a: 0, r: 220, b: 220, g: 180, label: "wm_lh_G_parietal_sup" },
                    14141: { a: 0, r: 61, b: 100, g: 60, label: "wm_rh_Lat_Fis-post" },
                    5071: { a: 0, r: 255, b: 0, g: 167, label: "Right-CST_waypoint" },
                    3169: { a: 0, r: 101, b: 180, g: 100, label: "wm-lh-S_parieto_occipital" },
                    2172: { a: 0, r: 21, b: 240, g: 20, label: "ctx-rh-S_precentral-Inferior-part" },
                    2207: { a: 0, r: 25, b: 60, g: 210, label: "ctx-rh-S_cingulate-posterior" },
                    2173: { a: 0, r: 21, b: 200, g: 20, label: "ctx-rh-S_precentral-Superior-part" },
                    3162: { a: 0, r: 21, b: 140, g: 20, label: "wm-lh-S_occipital_superior_and_transversalis" },
                    2174: { a: 0, r: 61, b: 60, g: 180, label: "ctx-rh-S_subcentral_ant" },
                    2175: { a: 0, r: 61, b: 250, g: 180, label: "ctx-rh-S_subcentral_post" },
                    4117: { a: 0, r: 60, b: 140, g: 20, label: "wm-rh-G_occipit-temp_lat-Or_fusiform" },
                    2176: { a: 0, r: 21, b: 60, g: 20, label: "ctx-rh-S_suborbital" },
                    2119: { a: 0, r: 65, b: 20, g: 100, label: "ctx-rh-G_occipit-temp_med-Parahippocampal_part" },
                    2177: { a: 0, r: 101, b: 60, g: 60, label: "ctx-rh-S_subparietal" },
                    13153: { a: 0, r: 221, b: 20, g: 220, label: "wm_lh_S_front_inf" },
                    5106: { a: 0, r: 232, b: 33, g: 147, label: "Right-Occipital-optic-radiation-End" },
                    2178: { a: 0, r: 21, b: 220, g: 220, label: "ctx-rh-S_supracingulate" },
                    4161: { a: 0, r: 101, b: 220, g: 60, label: "wm-rh-S_occipital_middle_and_Lunatus" },
                    2179: { a: 0, r: 21, b: 180, g: 180, label: "ctx-rh-S_temporal_inferior" },
                    2180: { a: 0, r: 223, b: 60, g: 220, label: "ctx-rh-S_temporal_superior" },
                    4118: { a: 0, r: 220, b: 140, g: 180, label: "wm-rh-G_occipit-temp_med-Lingual_part" },
                    4165: { a: 0, r: 101, b: 20, g: 20, label: "wm-rh-S_orbital-H_shapped" },
                    2181: { a: 0, r: 221, b: 60, g: 60, label: "ctx-rh-S_temporal_transverse" },
                    13104: { a: 0, r: 63, b: 220, g: 20, label: "wm_lh_G_and_S_subcentral" },
                    13105: { a: 0, r: 13, b: 250, g: 0, label: "wm_lh_G_and_S_transv_frontopol" },
                    13100: { a: 0, r: 0, b: 0, g: 0, label: "wm_lh_Unknown" },
                    13101: { a: 0, r: 23, b: 60, g: 220, label: "wm_lh_G_and_S_frontomargin" },
                    13102: { a: 0, r: 23, b: 180, g: 60, label: "wm_lh_G_and_S_occipital_inf" },
                    13103: { a: 0, r: 63, b: 60, g: 100, label: "wm_lh_G_and_S_paracentral" },
                    3164: { a: 0, r: 141, b: 220, g: 100, label: "wm-lh-S_occipito-temporal_medial_and_S_Lingual" },
                    12144: { a: 0, r: 220, b: 20, g: 180, label: "ctx_rh_Pole_temporal" },
                    13106: { a: 0, r: 26, b: 0, g: 60, label: "wm_lh_G_and_S_cingul-Ant" },
                    13107: { a: 0, r: 26, b: 75, g: 60, label: "wm_lh_G_and_S_cingul-Mid-Ant" },
                    6070: { a: 0, r: 236, b: 230, g: 14, label: "Left-SLF2" },
                    13109: { a: 0, r: 25, b: 250, g: 60, label: "wm_lh_G_cingul-Post-dorsal" },
                    13110: { a: 0, r: 60, b: 25, g: 25, label: "wm_lh_G_cingul-Post-ventral" },
                    13111: { a: 0, r: 180, b: 20, g: 20, label: "wm_lh_G_cuneus" },
                    4119: { a: 0, r: 65, b: 20, g: 100, label: "wm-rh-G_occipit-temp_med-Parahippocampal_part" },
                    13108: { a: 0, r: 26, b: 150, g: 60, label: "wm_lh_G_and_S_cingul-Mid-Post" },
                    13114: { a: 0, r: 180, b: 140, g: 220, label: "wm_lh_G_front_inf-Triangul" },
                    13115: { a: 0, r: 140, b: 180, g: 100, label: "wm_lh_G_front_middle" },
                    13116: { a: 0, r: 180, b: 140, g: 20, label: "wm_lh_G_front_sup" },
                    13117: { a: 0, r: 23, b: 10, g: 10, label: "wm_lh_G_Ins_lg_and_S_cent_ins" },
                    13118: { a: 0, r: 225, b: 140, g: 140, label: "wm_lh_G_insular_short" },
                    13119: { a: 0, r: 180, b: 180, g: 60, label: "wm_lh_G_occipital_middle" },
                    13120: { a: 0, r: 20, b: 60, g: 220, label: "wm_lh_G_occipital_sup" },
                    13121: { a: 0, r: 60, b: 140, g: 20, label: "wm_lh_G_oc-temp_lat-fusifor" },
                    13122: { a: 0, r: 220, b: 140, g: 180, label: "wm_lh_G_oc-temp_med-Lingual" },
                    13123: { a: 0, r: 65, b: 20, g: 100, label: "wm_lh_G_oc-temp_med-Parahip" },
                    13124: { a: 0, r: 220, b: 20, g: 60, label: "wm_lh_G_orbital" },
                    13125: { a: 0, r: 20, b: 220, g: 60, label: "wm_lh_G_pariet_inf-Angular" },
                    13126: { a: 0, r: 100, b: 60, g: 100, label: "wm_lh_G_pariet_inf-Supramar" },
                    2210: { a: 0, r: 25, b: 90, g: 150, label: "ctx-rh-S_pericallosal-caudal" },
                    13128: { a: 0, r: 20, b: 140, g: 180, label: "wm_lh_G_postcentral" },
                    13129: { a: 0, r: 60, b: 180, g: 140, label: "wm_lh_G_precentral" },
                    13130: { a: 0, r: 25, b: 140, g: 20, label: "wm_lh_G_precuneus" },
                    13131: { a: 0, r: 20, b: 100, g: 60, label: "wm_lh_G_rectus" },
                    13132: { a: 0, r: 60, b: 20, g: 220, label: "wm_lh_G_subcallosal" },
                    13133: { a: 0, r: 60, b: 220, g: 60, label: "wm_lh_G_temp_sup-G_T_transv" },
                    13134: { a: 0, r: 220, b: 220, g: 60, label: "wm_lh_G_temp_sup-Lateral" },
                    13135: { a: 0, r: 65, b: 60, g: 220, label: "wm_lh_G_temp_sup-Plan_polar" },
                    13136: { a: 0, r: 25, b: 20, g: 140, label: "wm_lh_G_temp_sup-Plan_tempo" },
                    13112: { a: 0, r: 220, b: 100, g: 20, label: "wm_lh_G_front_inf-Opercular" },
                    13138: { a: 0, r: 180, b: 60, g: 60, label: "wm_lh_G_temporal_middle" },
                    13139: { a: 0, r: 61, b: 220, g: 20, label: "wm_lh_Lat_Fis-ant-Horizont" },
                    13140: { a: 0, r: 61, b: 60, g: 20, label: "wm_lh_Lat_Fis-ant-Vertical" },
                    13141: { a: 0, r: 61, b: 100, g: 60, label: "wm_lh_Lat_Fis-post" },
                    4120: { a: 0, r: 220, b: 20, g: 60, label: "wm-rh-G_orbital" },
                    13113: { a: 0, r: 140, b: 60, g: 60, label: "wm_lh_G_front_inf-Orbital" },
                    13144: { a: 0, r: 220, b: 20, g: 180, label: "wm_lh_Pole_temporal" },
                    7001: { a: 0, r: 72, b: 181, g: 132, label: "Lateral-nucleus" },
                    7002: { a: 0, r: 243, b: 243, g: 243, label: "Basolateral-nucleus" },
                    7003: { a: 0, r: 207, b: 79, g: 63, label: "Basal-nucleus" },
                    7004: { a: 0, r: 121, b: 135, g: 20, label: "Centromedial-nucleus" },
                    7005: { a: 0, r: 197, b: 248, g: 60, label: "Central-nucleus" },
                    7006: { a: 0, r: 2, b: 2, g: 149, label: "Medial-nucleus" },
                    7007: { a: 0, r: 221, b: 166, g: 249, label: "Cortical-nucleus" },
                    7008: { a: 0, r: 232, b: 35, g: 146, label: "Accessory-Basal-nucleus" },
                    7009: { a: 0, r: 20, b: 120, g: 60, label: "Corticoamygdaloid-transitio" },
                    7010: { a: 0, r: 250, b: 0, g: 250, label: "Anterior-amygdaloid-area-AAA" },
                    7011: { a: 0, r: 122, b: 222, g: 187, label: "Fusion-amygdala-HP-FAH" },
                    7012: { a: 0, r: 237, b: 177, g: 12, label: "Hippocampal-amygdala-transition-HATA" },
                    2211: { a: 0, r: 25, b: 90, g: 180, label: "ctx-rh-S_pericallosal-rostral" },
                    7014: { a: 0, r: 205, b: 144, g: 184, label: "Lateral-nucleus-olfactory-tract" },
                    7015: { a: 0, r: 45, b: 165, g: 205, label: "Paralaminar-nucleus" },
                    7016: { a: 0, r: 117, b: 175, g: 160, label: "Intercalated-nucleus" },
                    7017: { a: 0, r: 221, b: 21, g: 217, label: "Prepiriform-cortex" },
                    7018: { a: 0, r: 20, b: 120, g: 60, label: "Periamygdaloid-cortex" },
                    7019: { a: 0, r: 141, b: 100, g: 21, label: "Envelope-Amygdala" },
                    3166: { a: 0, r: 221, b: 20, g: 100, label: "wm-lh-S_orbital_lateral" },
                    11117: { a: 0, r: 23, b: 10, g: 10, label: "ctx_lh_G_Ins_lg_and_S_cent_ins" },
                    11118: { a: 0, r: 225, b: 140, g: 140, label: "ctx_lh_G_insular_short" },
                    11119: { a: 0, r: 180, b: 180, g: 60, label: "ctx_lh_G_occipital_middle" },
                    11120: { a: 0, r: 20, b: 60, g: 220, label: "ctx_lh_G_occipital_sup" },
                    11121: { a: 0, r: 60, b: 140, g: 20, label: "ctx_lh_G_oc-temp_lat-fusifor" },
                    11122: { a: 0, r: 220, b: 140, g: 180, label: "ctx_lh_G_oc-temp_med-Lingual" },
                    11123: { a: 0, r: 65, b: 20, g: 100, label: "ctx_lh_G_oc-temp_med-Parahip" },
                    4121: { a: 0, r: 60, b: 60, g: 100, label: "wm-rh-G_paracentral" },
                    11125: { a: 0, r: 20, b: 220, g: 60, label: "ctx_lh_G_pariet_inf-Angular" },
                    11126: { a: 0, r: 100, b: 60, g: 100, label: "ctx_lh_G_pariet_inf-Supramar" },
                    11127: { a: 0, r: 220, b: 220, g: 180, label: "ctx_lh_G_parietal_sup" },
                    11128: { a: 0, r: 20, b: 140, g: 180, label: "ctx_lh_G_postcentral" },
                    11129: { a: 0, r: 60, b: 180, g: 140, label: "ctx_lh_G_precentral" },
                    11130: { a: 0, r: 25, b: 140, g: 20, label: "ctx_lh_G_precuneus" },
                    11131: { a: 0, r: 20, b: 100, g: 60, label: "ctx_lh_G_rectus" },
                    5076: { a: 0, r: 244, b: 240, g: 241, label: "Left-Cingulum_Body-End" },
                    11133: { a: 0, r: 60, b: 220, g: 60, label: "ctx_lh_G_temp_sup-G_T_transv" },
                    11134: { a: 0, r: 220, b: 220, g: 60, label: "ctx_lh_G_temp_sup-Lateral" },
                    11135: { a: 0, r: 65, b: 60, g: 220, label: "ctx_lh_G_temp_sup-Plan_polar" },
                    11136: { a: 0, r: 25, b: 20, g: 140, label: "ctx_lh_G_temp_sup-Plan_tempo" },
                    11137: { a: 0, r: 220, b: 100, g: 220, label: "ctx_lh_G_temporal_inf" },
                    11138: { a: 0, r: 180, b: 60, g: 60, label: "ctx_lh_G_temporal_middle" },
                    2212: { a: 0, r: 25, b: 90, g: 210, label: "ctx-rh-S_pericallosal-posterior" },
                    11140: { a: 0, r: 61, b: 60, g: 20, label: "ctx_lh_Lat_Fis-ant-Vertical" },
                    11141: { a: 0, r: 61, b: 100, g: 60, label: "ctx_lh_Lat_Fis-post" },
                    11142: { a: 0, r: 25, b: 25, g: 25, label: "ctx_lh_Medial_wall" },
                    11143: { a: 0, r: 140, b: 60, g: 20, label: "ctx_lh_Pole_occipital" },
                    11144: { a: 0, r: 220, b: 20, g: 180, label: "ctx_lh_Pole_temporal" },
                    5001: { a: 0, r: 20, b: 40, g: 30, label: "Left-UnsegmentedWhiteMatter" },
                    5002: { a: 0, r: 20, b: 40, g: 30, label: "Right-UnsegmentedWhiteMatter" },
                    11147: { a: 0, r: 221, b: 100, g: 20, label: "ctx_lh_S_cingul-Marginalis" },
                    11148: { a: 0, r: 221, b: 140, g: 60, label: "ctx_lh_S_circular_insula_ant" },
                    11149: { a: 0, r: 221, b: 220, g: 20, label: "ctx_lh_S_circular_insula_inf" },
                    11150: { a: 0, r: 61, b: 220, g: 220, label: "ctx_lh_S_circular_insula_sup" },
                    11151: { a: 0, r: 100, b: 200, g: 200, label: "ctx_lh_S_collat_transv_ant" },
                    11152: { a: 0, r: 10, b: 200, g: 200, label: "ctx_lh_S_collat_transv_post" },
                    2200: { a: 0, r: 25, b: 61, g: 60, label: "ctx-rh-G_cingulate-caudal_ACC" },
                    4122: { a: 0, r: 20, b: 220, g: 60, label: "wm-rh-G_parietal_inferior-Angular_part" },
                    11155: { a: 0, r: 61, b: 100, g: 220, label: "ctx_lh_S_front_sup" },
                    11156: { a: 0, r: 141, b: 20, g: 60, label: "ctx_lh_S_interm_prim-Jensen" },
                    11157: { a: 0, r: 143, b: 220, g: 20, label: "ctx_lh_S_intrapariet_and_P_trans" },
                    11158: { a: 0, r: 101, b: 220, g: 60, label: "ctx_lh_S_oc_middle_and_Lunatus" },
                    2201: { a: 0, r: 25, b: 60, g: 90, label: "ctx-rh-G_cingulate-rostral_ACC" },
                    11160: { a: 0, r: 61, b: 180, g: 20, label: "ctx_lh_S_occipital_ant" },
                    11161: { a: 0, r: 221, b: 20, g: 140, label: "ctx_lh_S_oc-temp_lat" },
                    11162: { a: 0, r: 141, b: 220, g: 100, label: "ctx_lh_S_oc-temp_med_and_Lingual" },
                    11163: { a: 0, r: 221, b: 20, g: 100, label: "ctx_lh_S_orbital_lateral" },
                    11164: { a: 0, r: 181, b: 20, g: 200, label: "ctx_lh_S_orbital_med-olfact" },
                    2202: { a: 0, r: 25, b: 60, g: 120, label: "ctx-rh-G_cingulate-posterior" },
                    11166: { a: 0, r: 101, b: 180, g: 100, label: "ctx_lh_S_parieto_occipital" },
                    11167: { a: 0, r: 181, b: 20, g: 220, label: "ctx_lh_S_pericallosal" },
                    11168: { a: 0, r: 21, b: 200, g: 140, label: "ctx_lh_S_postcentral" },
                    11169: { a: 0, r: 21, b: 240, g: 20, label: "ctx_lh_S_precentral-inf-part" },
                    11170: { a: 0, r: 21, b: 200, g: 20, label: "ctx_lh_S_precentral-sup-part" },
                    11171: { a: 0, r: 21, b: 60, g: 20, label: "ctx_lh_S_suborbital" },
                    11172: { a: 0, r: 101, b: 60, g: 60, label: "ctx_lh_S_subparietal" },
                    11173: { a: 0, r: 21, b: 180, g: 180, label: "ctx_lh_S_temporal_inf" },
                    11174: { a: 0, r: 223, b: 60, g: 220, label: "ctx_lh_S_temporal_sup" },
                    11175: { a: 0, r: 221, b: 60, g: 60, label: "ctx_lh_S_temporal_transverse" },
                    3168: { a: 0, r: 21, b: 140, g: 180, label: "wm-lh-S_paracentral" },
                    12103: { a: 0, r: 63, b: 60, g: 100, label: "ctx_rh_G_and_S_paracentral" },
                    2205: { a: 0, r: 25, b: 60, g: 150, label: "ctx-rh-S_cingulate-caudal_ACC" },
                    4123: { a: 0, r: 100, b: 60, g: 100, label: "wm-rh-G_parietal_inferior-Supramarginal_part" },
                    12104: { a: 0, r: 63, b: 220, g: 20, label: "ctx_rh_G_and_S_subcentral" },
                    12102: { a: 0, r: 23, b: 180, g: 60, label: "ctx_rh_G_and_S_occipital_inf" },
                    2206: { a: 0, r: 25, b: 60, g: 180, label: "ctx-rh-S_cingulate-rostral_ACC" },
                    12105: { a: 0, r: 13, b: 250, g: 0, label: "ctx_rh_G_and_S_transv_frontopol" },
                    3e3: { a: 0, r: 230, b: 230, g: 250, label: "wm-lh-unknown" },
                    3001: { a: 0, r: 230, b: 215, g: 155, label: "wm-lh-bankssts" },
                    3002: { a: 0, r: 130, b: 95, g: 155, label: "wm-lh-caudalanteriorcingulate" },
                    3003: { a: 0, r: 155, b: 255, g: 230, label: "wm-lh-caudalmiddlefrontal" },
                    3004: { a: 0, r: 135, b: 205, g: 185, label: "wm-lh-corpuscallosum" },
                    3005: { a: 0, r: 35, b: 155, g: 235, label: "wm-lh-cuneus" },
                    3006: { a: 0, r: 35, b: 245, g: 235, label: "wm-lh-entorhinal" },
                    3007: { a: 0, r: 75, b: 115, g: 35, label: "wm-lh-fusiform" },
                    3008: { a: 0, r: 35, b: 35, g: 195, label: "wm-lh-inferiorparietal" },
                    3009: { a: 0, r: 75, b: 135, g: 215, label: "wm-lh-inferiortemporal" },
                    3010: { a: 0, r: 115, b: 115, g: 235, label: "wm-lh-isthmuscingulate" },
                    3011: { a: 0, r: 235, b: 115, g: 225, label: "wm-lh-lateraloccipital" },
                    3012: { a: 0, r: 220, b: 205, g: 180, label: "wm-lh-lateralorbitofrontal" },
                    3013: { a: 0, r: 30, b: 115, g: 115, label: "wm-lh-lingual" },
                    3014: { a: 0, r: 55, b: 180, g: 220, label: "wm-lh-medialorbitofrontal" },
                    3015: { a: 0, r: 95, b: 205, g: 155, label: "wm-lh-middletemporal" },
                    3016: { a: 0, r: 235, b: 195, g: 35, label: "wm-lh-parahippocampal" },
                    3017: { a: 0, r: 195, b: 195, g: 35, label: "wm-lh-paracentral" },
                    3018: { a: 0, r: 35, b: 115, g: 75, label: "wm-lh-parsopercularis" },
                    3019: { a: 0, r: 235, b: 205, g: 155, label: "wm-lh-parsorbitalis" },
                    3020: { a: 0, r: 35, b: 235, g: 195, label: "wm-lh-parstriangularis" },
                    3021: { a: 0, r: 135, b: 195, g: 155, label: "wm-lh-pericalcarine" },
                    3022: { a: 0, r: 35, b: 235, g: 235, label: "wm-lh-postcentral" },
                    3023: { a: 0, r: 35, b: 35, g: 75, label: "wm-lh-posteriorcingulate" },
                    3024: { a: 0, r: 195, b: 35, g: 235, label: "wm-lh-precentral" },
                    3025: { a: 0, r: 95, b: 75, g: 115, label: "wm-lh-precuneus" },
                    3026: { a: 0, r: 175, b: 115, g: 235, label: "wm-lh-rostralanteriorcingulate" },
                    3027: { a: 0, r: 180, b: 130, g: 205, label: "wm-lh-rostralmiddlefrontal" },
                    3028: { a: 0, r: 235, b: 95, g: 35, label: "wm-lh-superiorfrontal" },
                    3029: { a: 0, r: 235, b: 115, g: 75, label: "wm-lh-superiorparietal" },
                    3030: { a: 0, r: 115, b: 35, g: 35, label: "wm-lh-superiortemporal" },
                    3031: { a: 0, r: 175, b: 235, g: 95, label: "wm-lh-supramarginal" },
                    3032: { a: 0, r: 155, b: 155, g: 255, label: "wm-lh-frontalpole" },
                    3033: { a: 0, r: 185, b: 185, g: 185, label: "wm-lh-temporalpole" },
                    3034: { a: 0, r: 105, b: 55, g: 105, label: "wm-lh-transversetemporal" },
                    3035: { a: 0, r: 254, b: 31, g: 191, label: "wm-lh-insula" },
                    5084: { a: 0, r: 15, b: 250, g: 46, label: "Right-Uncinate_Fasciculus-Start" },
                    5085: { a: 0, r: 16, b: 250, g: 46, label: "Right-Uncinate_Fasciculus-End" },
                    5086: { a: 0, r: 220, b: 163, g: 252, label: "Left-Inf-Fronto-occ-Fasc_waypoint" },
                    5087: { a: 0, r: 5, b: 14, g: 114, label: "Left-Inf-Fronto-occ-Fasc-Start" },
                    5088: { a: 0, r: 6, b: 14, g: 114, label: "Left-Inf-Fronto-occ-Fasc-End" },
                    5089: { a: 0, r: 220, b: 163, g: 253, label: "Right-Inf-Fronto-occ-Fasc_waypoint" },
                    5090: { a: 0, r: 7, b: 14, g: 114, label: "Right-Inf-Fronto-occ-Fasc-Start" },
                    5091: { a: 0, r: 8, b: 14, g: 114, label: "Right-Inf-Fronto-occ-Fasc-End" },
                    5092: { a: 0, r: 3, b: 6, g: 148, label: "Left-Sup-Fronto-occ-Fasc_waypoint" },
                    3170: { a: 0, r: 181, b: 20, g: 220, label: "wm-lh-S_pericallosal" },
                    5094: { a: 0, r: 76, b: 181, g: 130, label: "Left-Sup-Fronto-occ-Fasc-End" },
                    999: { a: 0, r: 255, b: 100, g: 100, label: "SUSPICIOUS" },
                    1e3: { a: 0, r: 25, b: 25, g: 5, label: "ctx-lh-unknown" },
                    1001: { a: 0, r: 25, b: 40, g: 100, label: "ctx-lh-bankssts" },
                    1002: { a: 0, r: 125, b: 160, g: 100, label: "ctx-lh-caudalanteriorcingulate" },
                    1003: { a: 0, r: 100, b: 0, g: 25, label: "ctx-lh-caudalmiddlefrontal" },
                    1004: { a: 0, r: 120, b: 50, g: 70, label: "ctx-lh-corpuscallosum" },
                    1005: { a: 0, r: 220, b: 100, g: 20, label: "ctx-lh-cuneus" },
                    1006: { a: 0, r: 220, b: 10, g: 20, label: "ctx-lh-entorhinal" },
                    1007: { a: 0, r: 180, b: 140, g: 220, label: "ctx-lh-fusiform" },
                    1008: { a: 0, r: 220, b: 220, g: 60, label: "ctx-lh-inferiorparietal" },
                    1009: { a: 0, r: 180, b: 120, g: 40, label: "ctx-lh-inferiortemporal" },
                    1010: { a: 0, r: 140, b: 140, g: 20, label: "ctx-lh-isthmuscingulate" },
                    1011: { a: 0, r: 20, b: 140, g: 30, label: "ctx-lh-lateraloccipital" },
                    1012: { a: 0, r: 35, b: 50, g: 75, label: "ctx-lh-lateralorbitofrontal" },
                    1013: { a: 0, r: 225, b: 140, g: 140, label: "ctx-lh-lingual" },
                    1014: { a: 0, r: 200, b: 75, g: 35, label: "ctx-lh-medialorbitofrontal" },
                    1015: { a: 0, r: 160, b: 50, g: 100, label: "ctx-lh-middletemporal" },
                    1016: { a: 0, r: 20, b: 60, g: 220, label: "ctx-lh-parahippocampal" },
                    1017: { a: 0, r: 60, b: 60, g: 220, label: "ctx-lh-paracentral" },
                    1018: { a: 0, r: 220, b: 140, g: 180, label: "ctx-lh-parsopercularis" },
                    1019: { a: 0, r: 20, b: 50, g: 100, label: "ctx-lh-parsorbitalis" },
                    1020: { a: 0, r: 220, b: 20, g: 60, label: "ctx-lh-parstriangularis" },
                    1021: { a: 0, r: 120, b: 60, g: 100, label: "ctx-lh-pericalcarine" },
                    1022: { a: 0, r: 220, b: 20, g: 20, label: "ctx-lh-postcentral" },
                    1023: { a: 0, r: 220, b: 220, g: 180, label: "ctx-lh-posteriorcingulate" },
                    1024: { a: 0, r: 60, b: 220, g: 20, label: "ctx-lh-precentral" },
                    1025: { a: 0, r: 160, b: 180, g: 140, label: "ctx-lh-precuneus" },
                    1026: { a: 0, r: 80, b: 140, g: 20, label: "ctx-lh-rostralanteriorcingulate" },
                    1027: { a: 0, r: 75, b: 125, g: 50, label: "ctx-lh-rostralmiddlefrontal" },
                    1028: { a: 0, r: 20, b: 160, g: 220, label: "ctx-lh-superiorfrontal" },
                    1029: { a: 0, r: 20, b: 140, g: 180, label: "ctx-lh-superiorparietal" },
                    1030: { a: 0, r: 140, b: 220, g: 220, label: "ctx-lh-superiortemporal" },
                    1031: { a: 0, r: 80, b: 20, g: 160, label: "ctx-lh-supramarginal" },
                    1032: { a: 0, r: 100, b: 100, g: 0, label: "ctx-lh-frontalpole" },
                    1033: { a: 0, r: 70, b: 70, g: 70, label: "ctx-lh-temporalpole" },
                    1034: { a: 0, r: 150, b: 200, g: 150, label: "ctx-lh-transversetemporal" },
                    1035: { a: 0, r: 255, b: 32, g: 192, label: "ctx-lh-insula" },
                    14168: { a: 0, r: 21, b: 200, g: 140, label: "wm_rh_S_postcentral" },
                    5081: { a: 0, r: 13, b: 250, g: 46, label: "Left-Uncinate_Fasciculus-Start" },
                    13145: { a: 0, r: 63, b: 180, g: 180, label: "wm_lh_S_calcarine" },
                    3100: { a: 0, r: 0, b: 0, g: 0, label: "wm-lh-Unknown" },
                    3101: { a: 0, r: 50, b: 50, g: 50, label: "wm-lh-Corpus_callosum" },
                    3102: { a: 0, r: 180, b: 30, g: 20, label: "wm-lh-G_and_S_Insula_ONLY_AVERAGE" },
                    3103: { a: 0, r: 60, b: 25, g: 25, label: "wm-lh-G_cingulate-Isthmus" },
                    3104: { a: 0, r: 25, b: 60, g: 60, label: "wm-lh-G_cingulate-Main_part" },
                    3105: { a: 0, r: 180, b: 20, g: 20, label: "wm-lh-G_cuneus" },
                    3106: { a: 0, r: 220, b: 100, g: 20, label: "wm-lh-G_frontal_inf-Opercular_part" },
                    3107: { a: 0, r: 140, b: 60, g: 60, label: "wm-lh-G_frontal_inf-Orbital_part" },
                    3108: { a: 0, r: 180, b: 140, g: 220, label: "wm-lh-G_frontal_inf-Triangular_part" },
                    3109: { a: 0, r: 140, b: 180, g: 100, label: "wm-lh-G_frontal_middle" },
                    3110: { a: 0, r: 180, b: 140, g: 20, label: "wm-lh-G_frontal_superior" },
                    3111: { a: 0, r: 140, b: 140, g: 20, label: "wm-lh-G_frontomarginal" },
                    3112: { a: 0, r: 21, b: 10, g: 10, label: "wm-lh-G_insular_long" },
                    3113: { a: 0, r: 225, b: 140, g: 140, label: "wm-lh-G_insular_short" },
                    3114: { a: 0, r: 23, b: 180, g: 60, label: "wm-lh-G_and_S_occipital_inferior" },
                    3115: { a: 0, r: 180, b: 180, g: 60, label: "wm-lh-G_occipital_middle" },
                    3116: { a: 0, r: 20, b: 60, g: 220, label: "wm-lh-G_occipital_superior" },
                    3117: { a: 0, r: 60, b: 140, g: 20, label: "wm-lh-G_occipit-temp_lat-Or_fusiform" },
                    3118: { a: 0, r: 220, b: 140, g: 180, label: "wm-lh-G_occipit-temp_med-Lingual_part" },
                    3119: { a: 0, r: 65, b: 20, g: 100, label: "wm-lh-G_occipit-temp_med-Parahippocampal_part" },
                    3120: { a: 0, r: 220, b: 20, g: 60, label: "wm-lh-G_orbital" },
                    2121: { a: 0, r: 60, b: 60, g: 100, label: "ctx-rh-G_paracentral" },
                    3122: { a: 0, r: 20, b: 220, g: 60, label: "wm-lh-G_parietal_inferior-Angular_part" },
                    3123: { a: 0, r: 100, b: 60, g: 100, label: "wm-lh-G_parietal_inferior-Supramarginal_part" },
                    3124: { a: 0, r: 220, b: 220, g: 180, label: "wm-lh-G_parietal_superior" },
                    3125: { a: 0, r: 20, b: 140, g: 180, label: "wm-lh-G_postcentral" },
                    3126: { a: 0, r: 60, b: 180, g: 140, label: "wm-lh-G_precentral" },
                    3127: { a: 0, r: 25, b: 140, g: 20, label: "wm-lh-G_precuneus" },
                    3128: { a: 0, r: 20, b: 100, g: 60, label: "wm-lh-G_rectus" },
                    3129: { a: 0, r: 60, b: 20, g: 220, label: "wm-lh-G_subcallosal" },
                    3130: { a: 0, r: 60, b: 220, g: 20, label: "wm-lh-G_subcentral" },
                    3131: { a: 0, r: 220, b: 100, g: 220, label: "wm-lh-G_temporal_inferior" },
                    3132: { a: 0, r: 180, b: 60, g: 60, label: "wm-lh-G_temporal_middle" },
                    3133: { a: 0, r: 60, b: 220, g: 60, label: "wm-lh-G_temp_sup-G_temp_transv_and_interm_S" },
                    3134: { a: 0, r: 220, b: 220, g: 60, label: "wm-lh-G_temp_sup-Lateral_aspect" },
                    3135: { a: 0, r: 65, b: 60, g: 220, label: "wm-lh-G_temp_sup-Planum_polare" },
                    3136: { a: 0, r: 25, b: 20, g: 140, label: "wm-lh-G_temp_sup-Planum_tempolare" },
                    3137: { a: 0, r: 13, b: 250, g: 0, label: "wm-lh-G_and_S_transverse_frontopolar" },
                    3138: { a: 0, r: 61, b: 220, g: 20, label: "wm-lh-Lat_Fissure-ant_sgt-ramus_horizontal" },
                    3139: { a: 0, r: 61, b: 60, g: 20, label: "wm-lh-Lat_Fissure-ant_sgt-ramus_vertical" },
                    3140: { a: 0, r: 61, b: 100, g: 60, label: "wm-lh-Lat_Fissure-post_sgt" },
                    3141: { a: 0, r: 25, b: 25, g: 25, label: "wm-lh-Medial_wall" },
                    3142: { a: 0, r: 140, b: 60, g: 20, label: "wm-lh-Pole_occipital" },
                    3143: { a: 0, r: 220, b: 20, g: 180, label: "wm-lh-Pole_temporal" },
                    3144: { a: 0, r: 63, b: 180, g: 180, label: "wm-lh-S_calcarine" },
                    3145: { a: 0, r: 221, b: 10, g: 20, label: "wm-lh-S_central" },
                    3146: { a: 0, r: 21, b: 20, g: 220, label: "wm-lh-S_central_insula" },
                    3147: { a: 0, r: 183, b: 20, g: 100, label: "wm-lh-S_cingulate-Main_part_and_Intracingulate" },
                    1100: { a: 0, r: 0, b: 0, g: 0, label: "ctx-lh-Unknown" },
                    1101: { a: 0, r: 50, b: 50, g: 50, label: "ctx-lh-Corpus_callosum" },
                    1102: { a: 0, r: 180, b: 30, g: 20, label: "ctx-lh-G_and_S_Insula_ONLY_AVERAGE" },
                    1103: { a: 0, r: 60, b: 25, g: 25, label: "ctx-lh-G_cingulate-Isthmus" },
                    1104: { a: 0, r: 25, b: 60, g: 60, label: "ctx-lh-G_cingulate-Main_part" },
                    1105: { a: 0, r: 180, b: 20, g: 20, label: "ctx-lh-G_cuneus" },
                    1106: { a: 0, r: 220, b: 100, g: 20, label: "ctx-lh-G_frontal_inf-Opercular_part" },
                    1107: { a: 0, r: 140, b: 60, g: 60, label: "ctx-lh-G_frontal_inf-Orbital_part" },
                    1108: { a: 0, r: 180, b: 140, g: 220, label: "ctx-lh-G_frontal_inf-Triangular_part" },
                    1109: { a: 0, r: 140, b: 180, g: 100, label: "ctx-lh-G_frontal_middle" },
                    1110: { a: 0, r: 180, b: 140, g: 20, label: "ctx-lh-G_frontal_superior" },
                    1111: { a: 0, r: 140, b: 140, g: 20, label: "ctx-lh-G_frontomarginal" },
                    1112: { a: 0, r: 21, b: 10, g: 10, label: "ctx-lh-G_insular_long" },
                    1113: { a: 0, r: 225, b: 140, g: 140, label: "ctx-lh-G_insular_short" },
                    1114: { a: 0, r: 23, b: 180, g: 60, label: "ctx-lh-G_and_S_occipital_inferior" },
                    1115: { a: 0, r: 180, b: 180, g: 60, label: "ctx-lh-G_occipital_middle" },
                    1116: { a: 0, r: 20, b: 60, g: 220, label: "ctx-lh-G_occipital_superior" },
                    1117: { a: 0, r: 60, b: 140, g: 20, label: "ctx-lh-G_occipit-temp_lat-Or_fusiform" },
                    1118: { a: 0, r: 220, b: 140, g: 180, label: "ctx-lh-G_occipit-temp_med-Lingual_part" },
                    1119: { a: 0, r: 65, b: 20, g: 100, label: "ctx-lh-G_occipit-temp_med-Parahippocampal_part" },
                    1120: { a: 0, r: 220, b: 20, g: 60, label: "ctx-lh-G_orbital" },
                    1121: { a: 0, r: 60, b: 60, g: 100, label: "ctx-lh-G_paracentral" },
                    1122: { a: 0, r: 20, b: 220, g: 60, label: "ctx-lh-G_parietal_inferior-Angular_part" },
                    1123: { a: 0, r: 100, b: 60, g: 100, label: "ctx-lh-G_parietal_inferior-Supramarginal_part" },
                    1124: { a: 0, r: 220, b: 220, g: 180, label: "ctx-lh-G_parietal_superior" },
                    1125: { a: 0, r: 20, b: 140, g: 180, label: "ctx-lh-G_postcentral" },
                    1126: { a: 0, r: 60, b: 180, g: 140, label: "ctx-lh-G_precentral" },
                    1127: { a: 0, r: 25, b: 140, g: 20, label: "ctx-lh-G_precuneus" },
                    1128: { a: 0, r: 20, b: 100, g: 60, label: "ctx-lh-G_rectus" },
                    1129: { a: 0, r: 60, b: 20, g: 220, label: "ctx-lh-G_subcallosal" },
                    1130: { a: 0, r: 60, b: 220, g: 20, label: "ctx-lh-G_subcentral" },
                    1131: { a: 0, r: 220, b: 100, g: 220, label: "ctx-lh-G_temporal_inferior" },
                    1132: { a: 0, r: 180, b: 60, g: 60, label: "ctx-lh-G_temporal_middle" },
                    1133: { a: 0, r: 60, b: 220, g: 60, label: "ctx-lh-G_temp_sup-G_temp_transv_and_interm_S" },
                    1134: { a: 0, r: 220, b: 220, g: 60, label: "ctx-lh-G_temp_sup-Lateral_aspect" },
                    1135: { a: 0, r: 65, b: 60, g: 220, label: "ctx-lh-G_temp_sup-Planum_polare" },
                    1136: {
                        a: 0,
                        r: 25,
                        b: 20,
                        g: 140,
                        label: "ctx-lh-G_temp_sup-Planum_tempolare"
                    },
                    1137: { a: 0, r: 13, b: 250, g: 0, label: "ctx-lh-G_and_S_transverse_frontopolar" },
                    1138: { a: 0, r: 61, b: 220, g: 20, label: "ctx-lh-Lat_Fissure-ant_sgt-ramus_horizontal" },
                    1139: { a: 0, r: 61, b: 60, g: 20, label: "ctx-lh-Lat_Fissure-ant_sgt-ramus_vertical" },
                    1140: { a: 0, r: 61, b: 100, g: 60, label: "ctx-lh-Lat_Fissure-post_sgt" },
                    1141: { a: 0, r: 25, b: 25, g: 25, label: "ctx-lh-Medial_wall" },
                    1142: { a: 0, r: 140, b: 60, g: 20, label: "ctx-lh-Pole_occipital" },
                    1143: { a: 0, r: 220, b: 20, g: 180, label: "ctx-lh-Pole_temporal" },
                    1144: { a: 0, r: 63, b: 180, g: 180, label: "ctx-lh-S_calcarine" },
                    1145: { a: 0, r: 221, b: 10, g: 20, label: "ctx-lh-S_central" },
                    1146: { a: 0, r: 21, b: 20, g: 220, label: "ctx-lh-S_central_insula" },
                    1147: { a: 0, r: 183, b: 20, g: 100, label: "ctx-lh-S_cingulate-Main_part_and_Intracingulate" },
                    1148: { a: 0, r: 221, b: 100, g: 20, label: "ctx-lh-S_cingulate-Marginalis_part" },
                    1149: { a: 0, r: 221, b: 140, g: 60, label: "ctx-lh-S_circular_insula_anterior" },
                    1150: { a: 0, r: 221, b: 220, g: 20, label: "ctx-lh-S_circular_insula_inferior" },
                    1151: { a: 0, r: 61, b: 220, g: 220, label: "ctx-lh-S_circular_insula_superior" },
                    1152: { a: 0, r: 100, b: 200, g: 200, label: "ctx-lh-S_collateral_transverse_ant" },
                    1153: { a: 0, r: 10, b: 200, g: 200, label: "ctx-lh-S_collateral_transverse_post" },
                    1154: { a: 0, r: 221, b: 20, g: 220, label: "ctx-lh-S_frontal_inferior" },
                    1155: { a: 0, r: 141, b: 100, g: 20, label: "ctx-lh-S_frontal_middle" },
                    1156: { a: 0, r: 61, b: 100, g: 220, label: "ctx-lh-S_frontal_superior" },
                    1157: { a: 0, r: 21, b: 60, g: 220, label: "ctx-lh-S_frontomarginal" },
                    1158: { a: 0, r: 141, b: 20, g: 60, label: "ctx-lh-S_intermedius_primus-Jensen" },
                    1159: { a: 0, r: 143, b: 220, g: 20, label: "ctx-lh-S_intraparietal-and_Parietal_transverse" },
                    1160: { a: 0, r: 61, b: 180, g: 20, label: "ctx-lh-S_occipital_anterior" },
                    1161: { a: 0, r: 101, b: 220, g: 60, label: "ctx-lh-S_occipital_middle_and_Lunatus" },
                    1162: { a: 0, r: 21, b: 140, g: 20, label: "ctx-lh-S_occipital_superior_and_transversalis" },
                    1163: { a: 0, r: 221, b: 20, g: 140, label: "ctx-lh-S_occipito-temporal_lateral" },
                    1164: { a: 0, r: 141, b: 220, g: 100, label: "ctx-lh-S_occipito-temporal_medial_and_S_Lingual" },
                    1165: { a: 0, r: 101, b: 20, g: 20, label: "ctx-lh-S_orbital-H_shapped" },
                    1166: { a: 0, r: 221, b: 20, g: 100, label: "ctx-lh-S_orbital_lateral" },
                    1167: { a: 0, r: 181, b: 20, g: 200, label: "ctx-lh-S_orbital_medial-Or_olfactory" },
                    1168: { a: 0, r: 21, b: 140, g: 180, label: "ctx-lh-S_paracentral" },
                    1169: { a: 0, r: 101, b: 180, g: 100, label: "ctx-lh-S_parieto_occipital" },
                    1170: { a: 0, r: 181, b: 20, g: 220, label: "ctx-lh-S_pericallosal" },
                    1171: { a: 0, r: 21, b: 200, g: 140, label: "ctx-lh-S_postcentral" },
                    1172: { a: 0, r: 21, b: 240, g: 20, label: "ctx-lh-S_precentral-Inferior-part" },
                    1173: { a: 0, r: 21, b: 200, g: 20, label: "ctx-lh-S_precentral-Superior-part" },
                    1174: { a: 0, r: 61, b: 60, g: 180, label: "ctx-lh-S_subcentral_ant" },
                    1175: { a: 0, r: 61, b: 250, g: 180, label: "ctx-lh-S_subcentral_post" },
                    1176: { a: 0, r: 21, b: 60, g: 20, label: "ctx-lh-S_suborbital" },
                    1177: { a: 0, r: 101, b: 60, g: 60, label: "ctx-lh-S_subparietal" },
                    1178: { a: 0, r: 21, b: 220, g: 220, label: "ctx-lh-S_supracingulate" },
                    1179: { a: 0, r: 21, b: 180, g: 180, label: "ctx-lh-S_temporal_inferior" },
                    1180: { a: 0, r: 223, b: 60, g: 220, label: "ctx-lh-S_temporal_superior" },
                    1181: { a: 0, r: 221, b: 60, g: 60, label: "ctx-lh-S_temporal_transverse" },
                    7100: { a: 0, r: 42, b: 168, g: 201, label: "Brainstem-inferior-colliculus" },
                    4131: { a: 0, r: 220, b: 100, g: 220, label: "wm-rh-G_temporal_inferior" },
                    12110: { a: 0, r: 60, b: 25, g: 25, label: "ctx_rh_G_cingul-Post-ventral" },
                    6001: { a: 0, r: 255, b: 0, g: 255, label: "CST-hammer" },
                    14156: { a: 0, r: 141, b: 20, g: 60, label: "wm_rh_S_interm_prim-Jensen" },
                    3172: { a: 0, r: 21, b: 240, g: 20, label: "wm-lh-S_precentral-Inferior-part" },
                    12146: { a: 0, r: 221, b: 10, g: 20, label: "ctx_rh_S_central" },
                    1200: { a: 0, r: 25, b: 61, g: 60, label: "ctx-lh-G_cingulate-caudal_ACC" },
                    1201: { a: 0, r: 25, b: 60, g: 90, label: "ctx-lh-G_cingulate-rostral_ACC" },
                    1202: { a: 0, r: 25, b: 60, g: 120, label: "ctx-lh-G_cingulate-posterior" },
                    12147: { a: 0, r: 221, b: 100, g: 20, label: "ctx_rh_S_cingul-Marginalis" },
                    1205: { a: 0, r: 25, b: 60, g: 150, label: "ctx-lh-S_cingulate-caudal_ACC" },
                    1206: { a: 0, r: 25, b: 60, g: 180, label: "ctx-lh-S_cingulate-rostral_ACC" },
                    1207: { a: 0, r: 25, b: 60, g: 210, label: "ctx-lh-S_cingulate-posterior" },
                    11124: { a: 0, r: 220, b: 20, g: 60, label: "ctx_lh_G_orbital" },
                    1210: { a: 0, r: 25, b: 90, g: 150, label: "ctx-lh-S_pericallosal-caudal" },
                    1211: { a: 0, r: 25, b: 90, g: 180, label: "ctx-lh-S_pericallosal-rostral" },
                    1212: { a: 0, r: 25, b: 90, g: 210, label: "ctx-lh-S_pericallosal-posterior" },
                    4132: { a: 0, r: 180, b: 60, g: 60, label: "wm-rh-G_temporal_middle" },
                    13174: { a: 0, r: 223, b: 60, g: 220, label: "wm_lh_S_temporal_sup" },
                    14157: { a: 0, r: 143, b: 220, g: 20, label: "wm_rh_S_intrapariet_and_P_trans" },
                    12174: { a: 0, r: 223, b: 60, g: 220, label: "ctx_rh_S_temporal_sup" },
                    12151: { a: 0, r: 100, b: 200, g: 200, label: "ctx_rh_S_collat_transv_ant" },
                    14152: { a: 0, r: 10, b: 200, g: 200, label: "wm_rh_S_collat_transv_post" },
                    3178: { a: 0, r: 21, b: 220, g: 220, label: "wm-lh-S_supracingulate" },
                    4133: { a: 0, r: 60, b: 220, g: 60, label: "wm-rh-G_temp_sup-G_temp_transv_and_interm_S" },
                    14158: { a: 0, r: 101, b: 220, g: 60, label: "wm_rh_S_oc_middle_and_Lunatus" },
                    12106: { a: 0, r: 26, b: 0, g: 60, label: "ctx_rh_G_and_S_cingul-Ant" },
                    11132: { a: 0, r: 60, b: 20, g: 220, label: "ctx_lh_G_subcallosal" },
                    12157: { a: 0, r: 143, b: 220, g: 20, label: "ctx_rh_S_intrapariet_and_P_trans" },
                    14146: { a: 0, r: 221, b: 10, g: 20, label: "wm_rh_S_central" },
                    3179: { a: 0, r: 21, b: 180, g: 180, label: "wm-lh-S_temporal_inferior" },
                    13161: { a: 0, r: 221, b: 20, g: 140, label: "wm_lh_S_oc-temp_lat" },
                    4100: { a: 0, r: 0, b: 0, g: 0, label: "wm-rh-Unknown" },
                    13170: { a: 0, r: 21, b: 200, g: 20, label: "wm_lh_S_precentral-sup-part" },
                    14159: { a: 0, r: 21, b: 140, g: 20, label: "wm_rh_S_oc_sup_and_transversal" },
                    3180: { a: 0, r: 223, b: 60, g: 220, label: "wm-lh-S_temporal_superior" },
                    11139: { a: 0, r: 61, b: 220, g: 20, label: "ctx_lh_Lat_Fis-ant-Horizont" },
                    4126: { a: 0, r: 60, b: 180, g: 140, label: "wm-rh-G_precentral" },
                    12164: { a: 0, r: 181, b: 20, g: 200, label: "ctx_rh_S_orbital_med-olfact" },
                    13137: { a: 0, r: 220, b: 100, g: 220, label: "wm_lh_G_temporal_inf" },
                    14160: { a: 0, r: 61, b: 180, g: 20, label: "wm_rh_S_occipital_ant" },
                    14154: { a: 0, r: 141, b: 100, g: 20, label: "wm_rh_S_front_middle" },
                    5096: { a: 0, r: 77, b: 181, g: 130, label: "Right-Sup-Fronto-occ-Fasc-Start" },
                    3181: { a: 0, r: 221, b: 60, g: 60, label: "wm-lh-S_temporal_transverse" },
                    7101: { a: 0, r: 168, b: 162, g: 104, label: "Brainstem-cochlear-nucleus" },
                    11145: { a: 0, r: 63, b: 180, g: 180, label: "ctx_lh_S_calcarine" },
                    12115: { a: 0, r: 140, b: 180, g: 100, label: "ctx_rh_G_front_middle" },
                    11146: { a: 0, r: 221, b: 10, g: 20, label: "ctx_lh_S_central" },
                    14161: { a: 0, r: 221, b: 20, g: 140, label: "wm_rh_S_oc-temp_lat" },
                    3173: { a: 0, r: 21, b: 200, g: 20, label: "wm-lh-S_precentral-Superior-part" },
                    14145: { a: 0, r: 63, b: 180, g: 180, label: "wm_rh_S_calcarine" },
                    11111: { a: 0, r: 180, b: 20, g: 20, label: "ctx_lh_G_cuneus" },
                    6030: { a: 0, r: 236, b: 227, g: 13, label: "Left-SLF3" },
                    12175: { a: 0, r: 221, b: 60, g: 60, label: "ctx_rh_S_temporal_transverse" },
                    14162: { a: 0, r: 141, b: 220, g: 100, label: "wm_rh_S_oc-temp_med_and_Lingual" },
                    13157: { a: 0, r: 143, b: 220, g: 20, label: "wm_lh_S_intrapariet_and_P_trans" },
                    4167: { a: 0, r: 181, b: 20, g: 200, label: "wm-rh-S_orbital_medial-Or_olfactory" },
                    11153: { a: 0, r: 221, b: 20, g: 220, label: "ctx_lh_S_front_inf" },
                    4128: { a: 0, r: 20, b: 100, g: 60, label: "wm-rh-G_rectus" },
                    11154: { a: 0, r: 141, b: 100, g: 20, label: "ctx_lh_S_front_middle" },
                    4138: { a: 0, r: 61, b: 220, g: 20, label: "wm-rh-Lat_Fissure-ant_sgt-ramus_horizontal" },
                    12117: { a: 0, r: 23, b: 10, g: 10, label: "ctx_rh_G_Ins_lg_and_S_cent_ins" },
                    14163: { a: 0, r: 221, b: 20, g: 100, label: "wm_rh_S_orbital_lateral" },
                    12107: { a: 0, r: 26, b: 75, g: 60, label: "ctx_rh_G_and_S_cingul-Mid-Ant" },
                    14150: { a: 0, r: 61, b: 220, g: 220, label: "wm_rh_S_circular_insula_sup" },
                    11159: { a: 0, r: 21, b: 140, g: 20, label: "ctx_lh_S_oc_sup_and_transversal" },
                    4171: { a: 0, r: 21, b: 200, g: 140, label: "wm-rh-S_postcentral" },
                    13171: { a: 0, r: 21, b: 60, g: 20, label: "wm_lh_S_suborbital" },
                    14164: { a: 0, r: 181, b: 20, g: 200, label: "wm_rh_S_orbital_med-olfact" },
                    13168: { a: 0, r: 21, b: 200, g: 140, label: "wm_lh_S_postcentral" },
                    11165: { a: 0, r: 101, b: 20, g: 20, label: "ctx_lh_S_orbital-H_Shaped" },
                    7020: { a: 0, r: 225, b: 141, g: 140, label: "Extranuclear-Amydala" },
                    14165: { a: 0, r: 101, b: 20, g: 20, label: "wm_rh_S_orbital-H_Shaped" },
                    6050: { a: 0, r: 1, b: 1, g: 255, label: "Left-CST" },
                    13143: { a: 0, r: 140, b: 60, g: 20, label: "wm_lh_Pole_occipital" },
                    14166: { a: 0, r: 101, b: 180, g: 100, label: "wm_rh_S_parieto_occipital" },
                    3174: { a: 0, r: 61, b: 60, g: 180, label: "wm-lh-S_subcentral_ant" },
                    14167: { a: 0, r: 181, b: 20, g: 220, label: "wm_rh_S_pericallosal" },
                    13158: { a: 0, r: 101, b: 220, g: 60, label: "wm_lh_S_oc_middle_and_Lunatus" },
                    5111: { a: 0, r: 238, b: 175, g: 10, label: "Right-Temporal-optic-radiation-waypoint" },
                    4129: { a: 0, r: 60, b: 20, g: 220, label: "wm-rh-G_subcallosal" },
                    2165: { a: 0, r: 101, b: 20, g: 20, label: "ctx-rh-S_orbital-H_shapped" },
                    6060: { a: 0, r: 2, b: 1, g: 255, label: "Right-CST" },
                    12108: { a: 0, r: 26, b: 150, g: 60, label: "ctx_rh_G_and_S_cingul-Mid-Post" },
                    13167: { a: 0, r: 181, b: 20, g: 220, label: "wm_lh_S_pericallosal" },
                    4106: { a: 0, r: 220, b: 100, g: 20, label: "wm-rh-G_frontal_inf-Opercular_part" },
                    11100: { a: 0, r: 0, b: 0, g: 0, label: "ctx_lh_Unknown" },
                    12123: { a: 0, r: 65, b: 20, g: 100, label: "ctx_rh_G_oc-temp_med-Parahip" },
                    11115: { a: 0, r: 140, b: 180, g: 100, label: "ctx_lh_G_front_middle" },
                    13146: { a: 0, r: 221, b: 10, g: 20, label: "wm_lh_S_central" },
                    13169: { a: 0, r: 21, b: 240, g: 20, label: "wm_lh_S_precentral-inf-part" },
                    4110: { a: 0, r: 180, b: 140, g: 20, label: "wm-rh-G_frontal_superior" },
                    13162: { a: 0, r: 141, b: 220, g: 100, label: "wm_lh_S_oc-temp_med_and_Lingual" },
                    4145: { a: 0, r: 221, b: 10, g: 20, label: "wm-rh-S_central" },
                    11101: { a: 0, r: 23, b: 60, g: 220, label: "ctx_lh_G_and_S_frontomargin" },
                    13147: { a: 0, r: 221, b: 100, g: 20, label: "wm_lh_S_cingul-Marginalis" },
                    14170: { a: 0, r: 21, b: 200, g: 20, label: "wm_rh_S_precentral-sup-part" },
                    5050: { a: 0, r: 120, b: 134, g: 19, label: "Left-SLF1_waypoint" },
                    5051: { a: 0, r: 197, b: 250, g: 58, label: "Left-SLF1-Start" },
                    11102: { a: 0, r: 23, b: 180, g: 60, label: "ctx_lh_G_and_S_occipital_inf" },
                    4157: { a: 0, r: 21, b: 60, g: 220, label: "wm-rh-S_frontomarginal" },
                    13148: { a: 0, r: 221, b: 140, g: 60, label: "wm_lh_S_circular_insula_ant" },
                    5052: { a: 0, r: 198, b: 250, g: 58, label: "Left-SLF1-End" },
                    14171: { a: 0, r: 21, b: 60, g: 20, label: "wm_rh_S_suborbital" },
                    3175: { a: 0, r: 61, b: 250, g: 180, label: "wm-lh-S_subcentral_post" },
                    5053: { a: 0, r: 120, b: 134, g: 20, label: "Right-SLF1_waypoint" },
                    5054: { a: 0, r: 199, b: 250, g: 58, label: "Right-SLF1-Start" },
                    11113: { a: 0, r: 140, b: 60, g: 60, label: "ctx_lh_G_front_inf-Orbital" },
                    14149: { a: 0, r: 221, b: 220, g: 20, label: "wm_rh_S_circular_insula_inf" },
                    5055: { a: 0, r: 200, b: 250, g: 58, label: "Right-SLF1-End" },
                    5056: { a: 0, r: 236, b: 176, g: 14, label: "Left-SLF2_waypoint" },
                    11103: { a: 0, r: 63, b: 60, g: 100, label: "ctx_lh_G_and_S_paracentral" },
                    13149: { a: 0, r: 221, b: 220, g: 20, label: "wm_lh_S_circular_insula_inf" },
                    5057: { a: 0, r: 206, b: 78, g: 62, label: "Left-SLF2-Start" },
                    14172: { a: 0, r: 101, b: 60, g: 60, label: "wm_rh_S_subparietal" },
                    13159: { a: 0, r: 21, b: 140, g: 20, label: "wm_lh_S_oc_sup_and_transversal" },
                    5058: { a: 0, r: 207, b: 78, g: 62, label: "Left-SLF2-End" },
                    5112: { a: 0, r: 41, b: 167, g: 255, label: "Right-Temporal-optic-radiation-end" },
                    12139: { a: 0, r: 61, b: 220, g: 20, label: "ctx_rh_Lat_Fis-ant-Horizont" },
                    5059: { a: 0, r: 236, b: 176, g: 15, label: "Right-SLF2_waypoint" },
                    3148: { a: 0, r: 221, b: 100, g: 20, label: "wm-lh-S_cingulate-Marginalis_part" },
                    5060: { a: 0, r: 208, b: 78, g: 62, label: "Right-SLF2-Start" },
                    4148: { a: 0, r: 221, b: 100, g: 20, label: "wm-rh-S_cingulate-Marginalis_part" },
                    11104: { a: 0, r: 63, b: 220, g: 20, label: "ctx_lh_G_and_S_subcentral" },
                    12127: { a: 0, r: 220, b: 220, g: 180, label: "ctx_rh_G_parietal_sup" },
                    5114: { a: 0, r: 239, b: 75, g: 10, label: "Left-Temporal-optic-radiation-waypoint" },
                    13150: { a: 0, r: 61, b: 220, g: 220, label: "wm_lh_S_circular_insula_sup" },
                    5062: { a: 0, r: 12, b: 255, g: 49, label: "Left-SLF3_waypoint" },
                    14173: { a: 0, r: 21, b: 180, g: 180, label: "wm_rh_S_temporal_inf" },
                    12109: { a: 0, r: 25, b: 250, g: 60, label: "ctx_rh_G_cingul-Post-dorsal" },
                    5063: { a: 0, r: 123, b: 220, g: 186, label: "Left-SLF3-Start" },
                    5064: { a: 0, r: 124, b: 220, g: 186, label: "Left-SLF3-End" },
                    5065: { a: 0, r: 12, b: 255, g: 50, label: "Right-SLF3_waypoint" },
                    2103: { a: 0, r: 60, b: 25, g: 25, label: "ctx-rh-G_cingulate-Isthmus" },
                    4103: { a: 0, r: 60, b: 25, g: 25, label: "wm-rh-G_cingulate-Isthmus" },
                    4162: { a: 0, r: 21, b: 140, g: 20, label: "wm-rh-S_occipital_superior_and_transversalis" },
                    11105: { a: 0, r: 13, b: 250, g: 0, label: "ctx_lh_G_and_S_transv_frontopol" },
                    13173: { a: 0, r: 21, b: 180, g: 180, label: "wm_lh_S_temporal_inf" },
                    13156: { a: 0, r: 141, b: 20, g: 60, label: "wm_lh_S_interm_prim-Jensen" },
                    13151: { a: 0, r: 100, b: 200, g: 200, label: "wm_lh_S_collat_transv_ant" },
                    5067: { a: 0, r: 126, b: 220, g: 186, label: "Right-SLF3-End" },
                    14174: { a: 0, r: 223, b: 60, g: 220, label: "wm_rh_S_temporal_sup" },
                    5104: { a: 0, r: 70, b: 180, g: 130, label: "Right-Occipital-optic-radiation-Start" },
                    5068: { a: 0, r: 255, b: 0, g: 166, label: "Left-CST_waypoint" },
                    5069: { a: 0, r: 221, b: 20, g: 216, label: "Left-CST-Start" },
                    13172: { a: 0, r: 101, b: 60, g: 60, label: "wm_lh_S_subparietal" },
                    5070: { a: 0, r: 222, b: 20, g: 216, label: "Left-CST-End" },
                    13142: { a: 0, r: 25, b: 25, g: 25, label: "wm_lh_Medial_wall" },
                    2104: { a: 0, r: 25, b: 60, g: 60, label: "ctx-rh-G_cingulate-Main_part" },
                    4150: { a: 0, r: 221, b: 220, g: 20, label: "wm-rh-S_circular_insula_inferior" },
                    11106: { a: 0, r: 26, b: 0, g: 60, label: "ctx_lh_G_and_S_cingul-Ant" },
                    5072: { a: 0, r: 223, b: 20, g: 216, label: "Right-CST-Start" },
                    14175: { a: 0, r: 221, b: 60, g: 60, label: "wm_rh_S_temporal_transverse" },
                    5105: { a: 0, r: 245, b: 245, g: 245, label: "Right-Occipital-optic-radiation-waypoint" },
                    5073: { a: 0, r: 224, b: 20, g: 216, label: "Right-CST-End" },
                    14151: { a: 0, r: 100, b: 200, g: 200, label: "wm_rh_S_collat_transv_ant" },
                    5074: { a: 0, r: 232, b: 33, g: 147, label: "Left-Cingulum_Body_waypoint" },
                    14153: { a: 0, r: 221, b: 20, g: 220, label: "wm_rh_S_front_inf" },
                    5075: { a: 0, r: 243, b: 240, g: 241, label: "Left-Cingulum_Body-Start" },
                    14169: { a: 0, r: 21, b: 240, g: 20, label: "wm_rh_S_precentral-inf-part" },
                    2105: { a: 0, r: 180, b: 20, g: 20, label: "ctx-rh-G_cuneus" },
                    4151: { a: 0, r: 61, b: 220, g: 220, label: "wm-rh-S_circular_insula_superior" },
                    11107: { a: 0, r: 26, b: 75, g: 60, label: "ctx_lh_G_and_S_cingul-Mid-Ant" },
                    5077: { a: 0, r: 232, b: 33, g: 148, label: "Right-Cingulum_Body_waypoint" },
                    3176: { a: 0, r: 21, b: 60, g: 20, label: "wm-lh-S_suborbital" },
                    5078: { a: 0, r: 245, b: 240, g: 241, label: "Right-Cingulum_Body-Start" },
                    5079: { a: 0, r: 246, b: 240, g: 241, label: "Right-Cingulum_Body-End" },
                    5080: { a: 0, r: 121, b: 220, g: 185, label: "Left-Uncinate_Fasciculus_waypoint" },
                    2106: { a: 0, r: 220, b: 100, g: 20, label: "ctx-rh-G_frontal_inf-Opercular_part" },
                    14100: { a: 0, r: 0, b: 0, g: 0, label: "wm_rh_Unknown" },
                    14101: { a: 0, r: 23, b: 60, g: 220, label: "wm_rh_G_and_S_frontomargin" },
                    14102: { a: 0, r: 23, b: 180, g: 60, label: "wm_rh_G_and_S_occipital_inf" },
                    4152: { a: 0, r: 100, b: 200, g: 200, label: "wm-rh-S_collateral_transverse_ant" },
                    14104: { a: 0, r: 63, b: 220, g: 20, label: "wm_rh_G_and_S_subcentral" },
                    11108: { a: 0, r: 26, b: 150, g: 60, label: "ctx_lh_G_and_S_cingul-Mid-Post" },
                    14106: { a: 0, r: 26, b: 0, g: 60, label: "wm_rh_G_and_S_cingul-Ant" },
                    7013: { a: 0, r: 10, b: 255, g: 49, label: "Endopiriform-nucleus" },
                    14108: { a: 0, r: 26, b: 150, g: 60, label: "wm_rh_G_and_S_cingul-Mid-Post" },
                    5082: { a: 0, r: 14, b: 250, g: 46, label: "Left-Uncinate_Fasciculus-End" },
                    14110: { a: 0, r: 60, b: 25, g: 25, label: "wm_rh_G_cingul-Post-ventral" },
                    5107: { a: 0, r: 72, b: 180, g: 130, label: "Left-Occipital-optic-radiation-Start" },
                    14112: { a: 0, r: 220, b: 100, g: 20, label: "wm_rh_G_front_inf-Opercular" },
                    14113: { a: 0, r: 140, b: 60, g: 60, label: "wm_rh_G_front_inf-Orbital" },
                    13160: { a: 0, r: 61, b: 180, g: 20, label: "wm_lh_S_occipital_ant" },
                    5083: { a: 0, r: 121, b: 220, g: 186, label: "Right-Uncinate_Fasciculus_waypoint" },
                    5113: { a: 0, r: 16, b: 250, g: 46, label: "Left-Temporal-optic-radiation-start" },
                    14117: { a: 0, r: 23, b: 10, g: 10, label: "wm_rh_G_Ins_lg_and_S_cent_ins" },
                    14118: { a: 0, r: 225, b: 140, g: 140, label: "wm_rh_G_insular_short" },
                    14119: { a: 0, r: 180, b: 180, g: 60, label: "wm_rh_G_occipital_middle" },
                    14120: { a: 0, r: 20, b: 60, g: 220, label: "wm_rh_G_occipital_sup" },
                    14121: { a: 0, r: 60, b: 140, g: 20, label: "wm_rh_G_oc-temp_lat-fusifor" },
                    14122: { a: 0, r: 220, b: 140, g: 180, label: "wm_rh_G_oc-temp_med-Lingual" },
                    14123: { a: 0, r: 65, b: 20, g: 100, label: "wm_rh_G_oc-temp_med-Parahip" },
                    14124: { a: 0, r: 220, b: 20, g: 60, label: "wm_rh_G_orbital" },
                    14125: { a: 0, r: 20, b: 220, g: 60, label: "wm_rh_G_pariet_inf-Angular" },
                    14126: { a: 0, r: 100, b: 60, g: 100, label: "wm_rh_G_pariet_inf-Supramar" },
                    5115: { a: 0, r: 40, b: 167, g: 255, label: "Left-Temporal-optic-radiation-end" },
                    14128: { a: 0, r: 20, b: 140, g: 180, label: "wm_rh_G_postcentral" },
                    2107: { a: 0, r: 140, b: 60, g: 60, label: "ctx-rh-G_frontal_inf-Orbital_part" },
                    14130: { a: 0, r: 25, b: 140, g: 20, label: "wm_rh_G_precuneus" },
                    14131: { a: 0, r: 20, b: 100, g: 60, label: "wm_rh_G_rectus" },
                    14132: { a: 0, r: 60, b: 20, g: 220, label: "wm_rh_G_subcallosal" },
                    4153: { a: 0, r: 10, b: 200, g: 200, label: "wm-rh-S_collateral_transverse_post" },
                    14134: { a: 0, r: 220, b: 220, g: 60, label: "wm_rh_G_temp_sup-Lateral" },
                    11109: { a: 0, r: 25, b: 250, g: 60, label: "ctx_lh_G_cingul-Post-dorsal" },
                    14136: { a: 0, r: 25, b: 20, g: 140, label: "wm_rh_G_temp_sup-Plan_tempo" },
                    14137: { a: 0, r: 220, b: 100, g: 220, label: "wm_rh_G_temporal_inf" },
                    14138: { a: 0, r: 180, b: 60, g: 60, label: "wm_rh_G_temporal_middle" },
                    13155: { a: 0, r: 61, b: 100, g: 220, label: "wm_lh_S_front_sup" },
                    14140: { a: 0, r: 61, b: 60, g: 20, label: "wm_rh_Lat_Fis-ant-Vertical" },
                    5108: { a: 0, r: 244, b: 245, g: 245, label: "Left-Occipital-optic-radiation-waypoint" },
                    14142: { a: 0, r: 25, b: 25, g: 25, label: "wm_rh_Medial_wall" },
                    14143: { a: 0, r: 140, b: 60, g: 20, label: "wm_rh_Pole_occipital" },
                    14144: { a: 0, r: 220, b: 20, g: 180, label: "wm_rh_Pole_temporal" },
                    8001: { a: 0, r: 74, b: 181, g: 130, label: "Thalamus-Anterior" },
                    8002: { a: 0, r: 242, b: 240, g: 241, label: "Thalamus-Ventral-anterior" },
                    8003: { a: 0, r: 206, b: 78, g: 65, label: "Thalamus-Lateral-dorsal" },
                    8004: { a: 0, r: 120, b: 133, g: 21, label: "Thalamus-Lateral-posterior" },
                    8005: { a: 0, r: 195, b: 246, g: 61, label: "Thalamus-Ventral-lateral" },
                    8006: { a: 0, r: 3, b: 6, g: 147, label: "Thalamus-Ventral-posterior-medial" },
                    8007: { a: 0, r: 220, b: 163, g: 251, label: "Thalamus-Ventral-posterior-lateral" },
                    8008: { a: 0, r: 232, b: 33, g: 146, label: "Thalamus-intralaminar" },
                    8009: { a: 0, r: 4, b: 14, g: 114, label: "Thalamus-centromedian" },
                    8010: { a: 0, r: 121, b: 220, g: 184, label: "Thalamus-mediodorsal" },
                    8011: { a: 0, r: 235, b: 175, g: 11, label: "Thalamus-medial" },
                    8012: { a: 0, r: 12, b: 250, g: 46, label: "Thalamus-pulvinar" },
                    8013: { a: 0, r: 203, b: 143, g: 182, label: "Thalamus-lateral-geniculate" },
                    8014: { a: 0, r: 42, b: 167, g: 204, label: "Thalamus-medial-geniculate" },
                    12111: { a: 0, r: 180, b: 20, g: 20, label: "ctx_rh_G_cuneus" },
                    12112: { a: 0, r: 220, b: 100, g: 20, label: "ctx_rh_G_front_inf-Opercular" },
                    12113: { a: 0, r: 140, b: 60, g: 60, label: "ctx_rh_G_front_inf-Orbital" },
                    12114: { a: 0, r: 180, b: 140, g: 220, label: "ctx_rh_G_front_inf-Triangul" },
                    4154: { a: 0, r: 221, b: 20, g: 220, label: "wm-rh-S_frontal_inferior" },
                    12116: { a: 0, r: 180, b: 140, g: 20, label: "ctx_rh_G_front_sup" },
                    11110: { a: 0, r: 60, b: 25, g: 25, label: "ctx_lh_G_cingul-Post-ventral" },
                    12118: { a: 0, r: 225, b: 140, g: 140, label: "ctx_rh_G_insular_short" },
                    12119: { a: 0, r: 180, b: 180, g: 60, label: "ctx_rh_G_occipital_middle" },
                    12120: { a: 0, r: 20, b: 60, g: 220, label: "ctx_rh_G_occipital_sup" },
                    12121: { a: 0, r: 60, b: 140, g: 20, label: "ctx_rh_G_oc-temp_lat-fusifor" },
                    12122: { a: 0, r: 220, b: 140, g: 180, label: "ctx_rh_G_oc-temp_med-Lingual" },
                    5109: { a: 0, r: 233, b: 33, g: 147, label: "Left-Occipital-optic-radiation-End" },
                    12124: { a: 0, r: 220, b: 20, g: 60, label: "ctx_rh_G_orbital" },
                    12125: { a: 0, r: 20, b: 220, g: 60, label: "ctx_rh_G_pariet_inf-Angular" },
                    12126: { a: 0, r: 100, b: 60, g: 100, label: "ctx_rh_G_pariet_inf-Supramar" },
                    5093: { a: 0, r: 75, b: 181, g: 130, label: "Left-Sup-Fronto-occ-Fasc-Start" },
                    12128: { a: 0, r: 20, b: 140, g: 180, label: "ctx_rh_G_postcentral" },
                    12129: { a: 0, r: 60, b: 180, g: 140, label: "ctx_rh_G_precentral" },
                    12130: { a: 0, r: 25, b: 140, g: 20, label: "ctx_rh_G_precuneus" },
                    12131: { a: 0, r: 20, b: 100, g: 60, label: "ctx_rh_G_rectus" },
                    12132: { a: 0, r: 60, b: 20, g: 220, label: "ctx_rh_G_subcallosal" },
                    12133: { a: 0, r: 60, b: 220, g: 60, label: "ctx_rh_G_temp_sup-G_T_transv" },
                    12134: { a: 0, r: 220, b: 220, g: 60, label: "ctx_rh_G_temp_sup-Lateral" },
                    12135: { a: 0, r: 65, b: 60, g: 220, label: "ctx_rh_G_temp_sup-Plan_polar" },
                    12136: { a: 0, r: 25, b: 20, g: 140, label: "ctx_rh_G_temp_sup-Plan_tempo" },
                    12137: { a: 0, r: 220, b: 100, g: 220, label: "ctx_rh_G_temporal_inf" },
                    12138: { a: 0, r: 180, b: 60, g: 60, label: "ctx_rh_G_temporal_middle" },
                    5095: { a: 0, r: 3, b: 6, g: 149, label: "Right-Sup-Fronto-occ-Fasc_waypoint" },
                    12140: { a: 0, r: 61, b: 60, g: 20, label: "ctx_rh_Lat_Fis-ant-Vertical" },
                    12141: { a: 0, r: 61, b: 100, g: 60, label: "ctx_rh_Lat_Fis-post" },
                    12142: { a: 0, r: 25, b: 25, g: 25, label: "ctx_rh_Medial_wall" },
                    12143: { a: 0, r: 140, b: 60, g: 20, label: "ctx_rh_Pole_occipital" },
                    6e3: { a: 0, r: 0, b: 0, g: 255, label: "CST-orig" },
                    4155: { a: 0, r: 141, b: 100, g: 20, label: "wm-rh-S_frontal_middle" },
                    6002: { a: 0, r: 0, b: 255, g: 255, label: "CST-CVS" },
                    6003: { a: 0, r: 0, b: 255, g: 0, label: "CST-flirt" },
                    12148: { a: 0, r: 221, b: 140, g: 60, label: "ctx_rh_S_circular_insula_ant" },
                    12149: { a: 0, r: 221, b: 220, g: 20, label: "ctx_rh_S_circular_insula_inf" },
                    12150: { a: 0, r: 61, b: 220, g: 220, label: "ctx_rh_S_circular_insula_sup" },
                    5097: { a: 0, r: 78, b: 181, g: 130, label: "Right-Sup-Fronto-occ-Fasc-End" },
                    12152: { a: 0, r: 10, b: 200, g: 200, label: "ctx_rh_S_collat_transv_post" },
                    12153: { a: 0, r: 221, b: 20, g: 220, label: "ctx_rh_S_front_inf" },
                    6010: { a: 0, r: 236, b: 231, g: 16, label: "Left-SLF1" },
                    12155: { a: 0, r: 61, b: 100, g: 220, label: "ctx_rh_S_front_sup" },
                    12156: { a: 0, r: 141, b: 20, g: 60, label: "ctx_rh_S_interm_prim-Jensen" },
                    5098: { a: 0, r: 42, b: 167, g: 205, label: "Left-Inf-Longitudinal-Fasc_waypoint" },
                    12158: { a: 0, r: 101, b: 220, g: 60, label: "ctx_rh_S_oc_middle_and_Lunatus" },
                    12159: { a: 0, r: 21, b: 140, g: 20, label: "ctx_rh_S_oc_sup_and_transversal" },
                    12160: { a: 0, r: 61, b: 180, g: 20, label: "ctx_rh_S_occipital_ant" },
                    12161: { a: 0, r: 221, b: 20, g: 140, label: "ctx_rh_S_oc-temp_lat" },
                    12162: { a: 0, r: 141, b: 220, g: 100, label: "ctx_rh_S_oc-temp_med_and_Lingual" },
                    5099: { a: 0, r: 236, b: 175, g: 11, label: "Left-Inf-Longitudinal-Fasc-Start" },
                    6020: { a: 0, r: 237, b: 232, g: 18, label: "Right-SLF1" },
                    12165: { a: 0, r: 101, b: 20, g: 20, label: "ctx_rh_S_orbital-H_Shaped" },
                    12166: { a: 0, r: 101, b: 180, g: 100, label: "ctx_rh_S_parieto_occipital" },
                    12167: { a: 0, r: 181, b: 20, g: 220, label: "ctx_rh_S_pericallosal" },
                    12168: { a: 0, r: 21, b: 200, g: 140, label: "ctx_rh_S_postcentral" },
                    5100: { a: 0, r: 237, b: 175, g: 11, label: "Left-Inf-Longitudinal-Fasc-End" },
                    12170: { a: 0, r: 21, b: 200, g: 20, label: "ctx_rh_S_precentral-sup-part" },
                    12171: { a: 0, r: 21, b: 60, g: 20, label: "ctx_rh_S_suborbital" },
                    12172: { a: 0, r: 101, b: 60, g: 60, label: "ctx_rh_S_subparietal" },
                    12173: { a: 0, r: 21, b: 180, g: 180, label: "ctx_rh_S_temporal_inf" },
                    4105: { a: 0, r: 180, b: 20, g: 20, label: "wm-rh-G_cuneus" },
                    4156: { a: 0, r: 61, b: 100, g: 220, label: "wm-rh-S_frontal_superior" },
                    11112: { a: 0, r: 220, b: 100, g: 20, label: "ctx_lh_G_front_inf-Opercular" },
                    4159: { a: 0, r: 143, b: 220, g: 20, label: "wm-rh-S_intraparietal-and_Parietal_transverse" },
                    5102: { a: 0, r: 238, b: 175, g: 11, label: "Right-Inf-Longitudinal-Fasc-Start" },
                    3177: { a: 0, r: 101, b: 60, g: 60, label: "wm-lh-S_subparietal" },
                    6040: { a: 0, r: 236, b: 228, g: 17, label: "Right-SLF3" },
                    5103: { a: 0, r: 239, b: 175, g: 11, label: "Right-Inf-Longitudinal-Fasc-End" },
                    13175: { a: 0, r: 221, b: 60, g: 60, label: "wm_lh_S_temporal_transverse" },
                    4e3: { a: 0, r: 230, b: 230, g: 250, label: "wm-rh-unknown" },
                    4001: { a: 0, r: 230, b: 215, g: 155, label: "wm-rh-bankssts" },
                    4002: { a: 0, r: 130, b: 95, g: 155, label: "wm-rh-caudalanteriorcingulate" },
                    4003: { a: 0, r: 155, b: 255, g: 230, label: "wm-rh-caudalmiddlefrontal" },
                    4004: { a: 0, r: 135, b: 205, g: 185, label: "wm-rh-corpuscallosum" },
                    4005: { a: 0, r: 35, b: 155, g: 235, label: "wm-rh-cuneus" },
                    4006: { a: 0, r: 35, b: 245, g: 235, label: "wm-rh-entorhinal" },
                    4007: { a: 0, r: 75, b: 115, g: 35, label: "wm-rh-fusiform" },
                    4008: { a: 0, r: 35, b: 35, g: 195, label: "wm-rh-inferiorparietal" },
                    4009: { a: 0, r: 75, b: 135, g: 215, label: "wm-rh-inferiortemporal" },
                    4010: { a: 0, r: 115, b: 115, g: 235, label: "wm-rh-isthmuscingulate" },
                    4011: { a: 0, r: 235, b: 115, g: 225, label: "wm-rh-lateraloccipital" },
                    4012: { a: 0, r: 220, b: 205, g: 180, label: "wm-rh-lateralorbitofrontal" },
                    4013: { a: 0, r: 30, b: 115, g: 115, label: "wm-rh-lingual" },
                    4014: { a: 0, r: 55, b: 180, g: 220, label: "wm-rh-medialorbitofrontal" },
                    4015: { a: 0, r: 95, b: 205, g: 155, label: "wm-rh-middletemporal" },
                    4016: { a: 0, r: 235, b: 195, g: 35, label: "wm-rh-parahippocampal" },
                    4017: { a: 0, r: 195, b: 195, g: 35, label: "wm-rh-paracentral" },
                    4018: { a: 0, r: 35, b: 115, g: 75, label: "wm-rh-parsopercularis" },
                    4019: { a: 0, r: 235, b: 205, g: 155, label: "wm-rh-parsorbitalis" },
                    4020: { a: 0, r: 35, b: 235, g: 195, label: "wm-rh-parstriangularis" },
                    4021: { a: 0, r: 135, b: 195, g: 155, label: "wm-rh-pericalcarine" },
                    4022: { a: 0, r: 35, b: 235, g: 235, label: "wm-rh-postcentral" },
                    4023: { a: 0, r: 35, b: 35, g: 75, label: "wm-rh-posteriorcingulate" },
                    4024: { a: 0, r: 195, b: 35, g: 235, label: "wm-rh-precentral" },
                    4025: { a: 0, r: 95, b: 75, g: 115, label: "wm-rh-precuneus" },
                    4026: { a: 0, r: 175, b: 115, g: 235, label: "wm-rh-rostralanteriorcingulate" },
                    4027: { a: 0, r: 180, b: 130, g: 205, label: "wm-rh-rostralmiddlefrontal" },
                    4028: { a: 0, r: 235, b: 95, g: 35, label: "wm-rh-superiorfrontal" },
                    4029: { a: 0, r: 235, b: 115, g: 75, label: "wm-rh-superiorparietal" },
                    4030: { a: 0, r: 115, b: 35, g: 35, label: "wm-rh-superiortemporal" },
                    4031: { a: 0, r: 175, b: 235, g: 95, label: "wm-rh-supramarginal" },
                    4032: { a: 0, r: 155, b: 155, g: 255, label: "wm-rh-frontalpole" },
                    4033: { a: 0, r: 185, b: 185, g: 185, label: "wm-rh-temporalpole" },
                    4034: { a: 0, r: 105, b: 55, g: 105, label: "wm-rh-transversetemporal" },
                    4035: { a: 0, r: 254, b: 31, g: 191, label: "wm-rh-insula" },
                    5110: { a: 0, r: 15, b: 250, g: 46, label: "Right-Temporal-optic-radiation-start" },
                    4158: { a: 0, r: 141, b: 20, g: 60, label: "wm-rh-S_intermedius_primus-Jensen" },
                    11114: { a: 0, r: 180, b: 140, g: 220, label: "ctx_lh_G_front_inf-Triangul" },
                    2e3: { a: 0, r: 25, b: 25, g: 5, label: "ctx-rh-unknown" },
                    2001: { a: 0, r: 25, b: 40, g: 100, label: "ctx-rh-bankssts" },
                    2002: { a: 0, r: 125, b: 160, g: 100, label: "ctx-rh-caudalanteriorcingulate" },
                    2003: { a: 0, r: 100, b: 0, g: 25, label: "ctx-rh-caudalmiddlefrontal" },
                    2004: { a: 0, r: 120, b: 50, g: 70, label: "ctx-rh-corpuscallosum" },
                    2005: { a: 0, r: 220, b: 100, g: 20, label: "ctx-rh-cuneus" },
                    2006: { a: 0, r: 220, b: 10, g: 20, label: "ctx-rh-entorhinal" },
                    2007: { a: 0, r: 180, b: 140, g: 220, label: "ctx-rh-fusiform" },
                    2008: { a: 0, r: 220, b: 220, g: 60, label: "ctx-rh-inferiorparietal" },
                    2009: { a: 0, r: 180, b: 120, g: 40, label: "ctx-rh-inferiortemporal" },
                    2010: { a: 0, r: 140, b: 140, g: 20, label: "ctx-rh-isthmuscingulate" },
                    2011: { a: 0, r: 20, b: 140, g: 30, label: "ctx-rh-lateraloccipital" },
                    2012: { a: 0, r: 35, b: 50, g: 75, label: "ctx-rh-lateralorbitofrontal" },
                    2013: { a: 0, r: 225, b: 140, g: 140, label: "ctx-rh-lingual" },
                    2014: { a: 0, r: 200, b: 75, g: 35, label: "ctx-rh-medialorbitofrontal" },
                    2015: { a: 0, r: 160, b: 50, g: 100, label: "ctx-rh-middletemporal" },
                    2016: { a: 0, r: 20, b: 60, g: 220, label: "ctx-rh-parahippocampal" },
                    2017: { a: 0, r: 60, b: 60, g: 220, label: "ctx-rh-paracentral" },
                    2018: { a: 0, r: 220, b: 140, g: 180, label: "ctx-rh-parsopercularis" },
                    2019: { a: 0, r: 20, b: 50, g: 100, label: "ctx-rh-parsorbitalis" },
                    2020: { a: 0, r: 220, b: 20, g: 60, label: "ctx-rh-parstriangularis" },
                    2021: { a: 0, r: 120, b: 60, g: 100, label: "ctx-rh-pericalcarine" },
                    2022: { a: 0, r: 220, b: 20, g: 20, label: "ctx-rh-postcentral" },
                    2023: { a: 0, r: 220, b: 220, g: 180, label: "ctx-rh-posteriorcingulate" },
                    2024: { a: 0, r: 60, b: 220, g: 20, label: "ctx-rh-precentral" },
                    2025: { a: 0, r: 160, b: 180, g: 140, label: "ctx-rh-precuneus" },
                    2026: { a: 0, r: 80, b: 140, g: 20, label: "ctx-rh-rostralanteriorcingulate" },
                    2027: { a: 0, r: 75, b: 125, g: 50, label: "ctx-rh-rostralmiddlefrontal" },
                    2028: { a: 0, r: 20, b: 160, g: 220, label: "ctx-rh-superiorfrontal" },
                    2029: { a: 0, r: 20, b: 140, g: 180, label: "ctx-rh-superiorparietal" },
                    2030: { a: 0, r: 140, b: 220, g: 220, label: "ctx-rh-superiortemporal" },
                    2031: { a: 0, r: 80, b: 20, g: 160, label: "ctx-rh-supramarginal" },
                    2032: { a: 0, r: 100, b: 100, g: 0, label: "ctx-rh-frontalpole" },
                    2033: { a: 0, r: 70, b: 70, g: 70, label: "ctx-rh-temporalpole" },
                    2034: { a: 0, r: 150, b: 200, g: 150, label: "ctx-rh-transversetemporal" },
                    2035: { a: 0, r: 255, b: 32, g: 192, label: "ctx-rh-insula" }
                }
            }
        var validKeys = Object.keys(colormap.colorCoding);
        FSLUT.prototype.lookupRed = function (screenVal, imageVal) {
            return imageVal && validKeys.indexOf(imageVal.toString()) >= 0 ? colormap.colorCoding[imageVal].r : 0 
        };
        FSLUT.prototype.lookupGreen = function (screenVal, imageVal) {
            return imageVal && validKeys.indexOf(imageVal.toString()) >= 0 ? colormap.colorCoding[imageVal].g : 0 
        };
        FSLUT.prototype.lookupBlue = function (screenVal, imageVal) {
            return imageVal && validKeys.indexOf(imageVal.toString()) >= 0 ? colormap.colorCoding[imageVal].b : 0 
        };
        // images are encoded in subject-specific papaya build (spec characters convert to underscore)
        params["encodedImages"] = [
        "aparc_aseg",
        "T1",
        "wmparc"];
        // settings
        params["aseg"]  = {"lut": new FSLUT(), "alpha": 0.6};
        params["aparc_aseg"] = {"lut": new FSLUT(), "alpha": 0.7};
        params["aparc_DKTatlas_aseg"] = {"lut": new FSLUT(), "alpha": 0.4};
        params["aparc_a2009s_aseg"] = {"lut": new FSLUT(), "alpha": 0.4};
        params["wm"] = {"lut": "Overlay (Negatives)", "alpha":0.2};
        params["wmparc"] = {"lut": new FSLUT(), "alpha": 0.4}; 
        params["brainmask"]  = {"min": 0, "max": 120, "lut": "Hot-and-Cold", "alpha": 1};        
        params["T1"]  = {"min": 0, "max": 120, "lut": "Grayscale", "alpha": 0.45};                          
</script>

<!-- Wrapper -->
     <div id="wrapper">
        <!-- Header -->
        <header id="header" class="alt style1">
            <a href="../pages/indiv.landing.${subject}.html" class="logo"><strong><font size="+2">Return to Gallery | ${subject} </strong></font></a>
            <nav>
                <a href="#menu"><font size="+2">Menu</font></a>
            </nav>
        </header>
        <nav id="menu">
            <ul class="links">
                <li><a href="../index.html">Home</a></li>
                <li><a href="../pages/group.landing.html">Group Reports</a></li>
                <li><a href="../pages/indiv.landing.html">Individual Reports</a></li>
                <li><a href="../pages/references.html">References</a></li>
            </ul>
        </nav>   
        <!-- Main -->
        <div id="main" class="alt">
            <!-- One -->
            <section id="one">
                <div class="inner">
<header class="major">
                        <h1>${subject} FreeSurfer Volumes</h1>
                    </header>
                        <p><font size="+2">Explore the various atlas, mask and processed structural images obtained from the FreeSurfer cortical morphometrics and reconstruction pipeline.</font></p>
                        <p><font size="+2">The volumetric and surface atlases are automatically loaded unto the T1 image. You can select other parcellation schemes and volumes from the File menu.</p> <p>You can show/hide volumes by clicking on one of the tiles on the top right of the image viewer. See the table below for included files. </font></p>
                        <p>Hints) Sometimes a volume does not load with correct brightness/contrast values. You can adjust these by right clicking, holding control and dragging across the image. Use spacebar to cycle through different image views. Scrolling through slices is faster if you hide other overlays.</p>                    
                         <div class="table-wrapper">
                              <div class="papaya" data-params="params"></div>
                              <br>
                              <table class="alt">
                                   <thead>
                                        <tr>
                                             <th>Image</th>
                                             <th>Filename</th>
                                             <th>Description</th>
                                        </tr>
                                   </thead>
                                   <tbody>
                                        <tr>
                                             <td>T1 Weighted Siemens MPRAGE</td>
                                             <td>T1</td>
                                             <td>High resolution (1x1x1mm voxel size) structural image</td>                                             
                                        </tr>
                                   </tbody>
                                   <tbody>
                                        <tr>
                                             <td>Skull-stripped Brain Mask</td>
                                             <td>brainmask</td>             
                                             <td>Automated stripping of skull, neck and non-brain tissue used for all subsequent processing. Manual edits to skull stripping errors will appear as dark blue</td>
                                        </tr>
                                   </tbody>
                                   <tbody>
                                        <tr>
                                             <td>White Matter Tissue Probability Mask</td>
                                             <td>wm</td>                            
                                             <td>Automatically generated tissue probability map of the white matter</td>
                                        </tr>
                                   </tbody>                                    
                                   <tbody>
                                        <tr>
                                             <td>Volumetric Subcortical Segmentation</td>
                                             <td>aseg</td>
                                             <td>Automatic image segmentation of subcortical structures obtained with a probabilistic classifier trained on a manually labeled dataset.</td>
                                        </tr>
                                   </tbody>  
                                   <tbody>
                                        <tr>
                                             <td>Cortical Parcels + Subcortical Segmentation</td>
                                             <td>aparc_aseg</td>                                             
                                             <td>Cortical parcellation labels obtained from the 2006 Deskian-Killiany atlas that are transformed into volume space and superimposed on the volumetric labels</td>
                                        </tr>
                                   </tbody>                                                                      
                                   <tbody>
                                        <tr>
                                             <td>Volumetric Deskian Killiany Atlas</td>
                                             <td>aparc_DKTatlas_aseg</td>               
                                             <td>Just the surface labels from the 2006 Deskian-Killiany atlas</td>
                                        </tr>
                                   </tbody>
                                   <tbody>
                                        <tr>
                                             <td>Volumetric Cortical + Subcortical Segmentation</td>
                                             <td>aparc_a2009s_aseg</td>                            
                                             <td>The 2009 Destriuex Atlas, a finer grained surface parcellation.</td>
                                        </tr>
                                   </tbody>
                                   <tbody>
                                        <tr>
                                             <td>White Matter Parcellation</td>
                                             <td>wmparc</td>                        
                                             <td>Atlas of the white matter obtained by labeling voxels with the closest cortical parcel</td>
                                        </tr>
                                   </tbody>                                              
                                   <tfoot>
                                        <tr>
                                             <td colspan="2"></td>
                                        </tr>
                                   </tfoot>
                              </table>
                         </div>
            </section>
        </div>
    </div>
        <!-- Scripts -->
            <script src="../assets/js/jquery.min.js"></script>
            <script src="../assets/js/jquery.scrolly.min.js"></script>
            <script src="../assets/js/jquery.scrollex.min.js"></script>
            <script src="../assets/js/skel.min.js"></script>
            <script src="../assets/js/util.js"></script>
            <!--[if lte IE 8]><script src="../assets/js/ie/respond.min.js"></script><![endif]-->
            <script src="../assets/js/main.js"></script>    		
	</body>
</html>
EOF
echo -e "  💾  writing ${outfile}${NC}\n"
printf "${page}" > ${outfile}
}
export -f surfergems_html_init_tile_papaya
####################################################################################################################
## DEFINE FUNCTION
#  write landing page html to file 
####################################################################################################################
function surfergems_html_init_landing(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_init_landing $@"		
	local configfile=${1} && export landing=${2}
	[ ! -f ${configfile} ] && echo -e "\n\n${BRED} ERROR: ${configfile} does not exit${NC}" >&2 && exit 1
	surfergems_html_init_load_config ${REPORTDIR}/config/group.landing.txt
	local outfile=${REPORTDIR}/pages/${LANDING}.html
	printf "%s\r${YELLOW}❍ building landing page${NC} ${REPORTDIR}/pages/${LANDING}.html" $(tput el)
	[ ! -d ${REPORTDIR}/pages ] && mkdir -v ${REPORTDIR}/pages	
	read -r -d '' LANDINGPAGE <<EOF
<!DOCTYPE HTML>
<!--
	Forty by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
	<head>
		<title>${PAGETITLE}</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<link rel="stylesheet" href="../assets/css/main.css" />
	</head>
	<body>

		<!-- Wrapper -->
			<div id="wrapper">

				<!-- Header -->
					<header id="header" class="alt">
						<a href="../index.html" class="logo"><strong>${PROJECTNAME}</strong></a>
						<nav>
							<a href="#menu">Menu</a>
						</nav>
					</header>

				<!-- Menu -->
					<nav id="menu">
						<ul class="links">
							<li><a href="../index.html">Home</a></li>
							<li><a href="../pages/group.landing.html">Group Reports</a></li>
							<li><a href="../pages/indiv.landing.html">Individual Reports</a></li>
							<li><a href="../pages/references.html">References</a></li>
						</ul>
					</nav>

				<!-- Banner -->
					<section id="banner" class="major">
						<div class="inner">
							<header class="major">
								<h1>${HEADERNAME}</h1>
							</header>
							<div class="content">
								<p><font size="+2">${DESCRIPTION}</font></p>
								<ul class="actions">
									<li><a href="#one" class="button next scrolly">Explore Data</a></li>
								</ul>
							</div>
						</div>
					</section>
				<!-- Main -->
					<div id="main">

						<!-- One -->
							<section id="one" class="tiles">					
EOF
printf "${LANDINGPAGE}" > ${outfile}
##
local counter=0
for TILE in "${TILES[@]}"; do
	TILEPIC="${TILEPICS[$counter]}"
	TILEDESCRIPTION="${TILEDESCRIPTIONS[$counter]}"
	TILEPAGE="${TILEPAGES[$counter]}"
read -r -d '' LANDINGTILE <<EOF
								<article>
									<span class="image">
										<img src="../assets/images/${TILEPIC}.png" alt="" />
									</span>
									<header class="major">
										<h3><a href="../pages/${TILEPAGE}.html" class="link">${TILE}</a></h3>
										${TILEDESCRIPTION}
									</header>
								</article>
EOF
# append to file
printf "${LANDINGTILE}" >> ${outfile}
((counter++))
done
##
read -r -d '' LANDINGEND <<EOF

					</div>
				<!-- Footer -->
					<footer id="footer">
						<div class="inner">
							<ul class="icons">
								<li><a href="https://github.com/seldamat/Surfer-webgems.git" class="icon alt fa-github"><span class="label">GitHub</span> Fork me on GitHub! </a></li>
							</ul>
							<ul class="copyright">
								<li>&copy; <a href="https://seldamat.github.io"> Shady El Damaty</a></li><li>Design: <a href="https://html5up.net">HTML5 UP</a></li>
							</ul>
						</div>
					</footer>

			</div>

		<!-- Scripts -->
			<script src="../assets/js/jquery.min.js"></script>
			<script src="../assets/js/jquery.scrolly.min.js"></script>
			<script src="../assets/js/jquery.scrollex.min.js"></script>
			<script src="../assets/js/skel.min.js"></script>
			<script src="../assets/js/util.js"></script>
			<!--[if lte IE 8]><script src="../assets/js/ie/respond.min.js"></script><![endif]-->
			<script src="../assets/js/main.js"></script>

	</body>
</html>
EOF
	printf "${LANDINGEND}" >> ${outfile}
	[ ! -f ${outfile} ] && exit 1
	printf "%s\r  💾  wrote ${outfile} \n" $(tput el)
}
export -f surfergems_html_init_landing
####################################################################################################################
### DEFINE FUNCTION
#   make index.html (main page)
####################################################################################################################
function surfergems_html_init_index(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_html_init_index $@"		
	local configfile=${1}
	[ ! -f ${configfile} ] && echo -e "\n\n${BRED} ERROR: ${configfile} does not exit${NC}" >&2  && exit 1
	surfergems_html_init_load_config ${configfile}
	##
	read -r -d '' INDEX <<EOF
<!DOCTYPE HTML>
<!--
	Forty by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
	<head>
		<title>${PAGETITLE}</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<link rel="stylesheet" href="assets/css/main.css" />
	</head>
	<body>

		<!-- Wrapper -->
			<div id="wrapper">

				<!-- Header -->
				<!-- Note: The "styleN" class below should match that of the banner element. -->
					<header id="header" class="alt style2">
						<a href="index.html" class="logo"><strong>${PROJECTNAME}</strong></a>
						<nav>
							<a href="#menu">Menu</a>
						</nav>
					</header>

				<!-- Menu -->
					<nav id="menu">
						<ul class="links">
							<li><a href="index.html">Home</a></li>
							<li><a href="pages/group.landing.html">Template Average Summary</a></li>
							<li><a href="pages/indiv.landing.html">Individual Participant Reports</a></li>
							<li><a href="references.html">References</a></li>
						</ul>
					</nav>

				<!-- Banner -->
				<!-- Note: The "styleN" class below should match that of the header element. -->
					<section id="banner" class="style2">
						<div class="inner">
							<span class="image">
								<img src="assets/images/sulc.png" alt="" />
							</span>
							<header class="major">
								<h1>${HEADERNAME}</h1>
							</header>
							<div class="content">
								<p><font size="+2">${DESCRIPTION}</font></p>
							</div>
						</div>
					</section>

				<!-- Main -->
					<div id="main">

						<!-- Two -->
							<section id="two" class="spotlights">
								<section>
									<div class="content">
										<div class="inner">
											<header class="major">
												<h3>Study Average Reports</h3>
											</header>
											<p>Summaries and visualizations averaged across participants.</p>
											<ul class="actions">
												<li><a href="pages/group.landing.html" class="button special">View Data</a></li>
											</ul>
										</div>
									</div>
								</section>
								<section>
									<div class="content">
										<div class="inner">
											<header class="major">
												<h3>Individual Participant Reports</h3>
											</header>
											<p>See volumes and surfaces by participant.</p>
											<ul class="actions">
												<li><a href="pages/indiv.landing.html" class="button special">View Data</a></li>
											</ul>
										</div>
									</div>
								</section>
							</section>
						</div>
				<!-- Footer -->
					<footer id="footer">
						<div class="inner">
							<ul class="icons">
								<li><a href="https://github.com/seldamat/Surfer-webgems.git" class="icon alt fa-github"><span class="label">GitHub</span> Fork me on GitHub! </a></li>
							</ul>
							<ul class="copyright">
								<li>&copy; <a href="https://seldamat.github.io"> Shady El Damaty</a></li><li>Design: <a href="https://html5up.net">HTML5 UP</a></li>
							</ul>
						</div>
					</footer>

			</div>

		<!-- Scripts -->
			<script src="assets/js/jquery.min.js"></script>
			<script src="assets/js/jquery.scrolly.min.js"></script>
			<script src="assets/js/jquery.scrollex.min.js"></script>
			<script src="assets/js/skel.min.js"></script>
			<script src="assets/js/util.js"></script>
			<!--[if lte IE 8]><script src="assets/js/ie/respond.min.js"></script><![endif]-->
			<script src="assets/js/main.js"></script>

	</body>
</html>	
EOF
	printf "${INDEX}" > ${REPORTDIR}/index.html 
	[ ! -f ${REPORTDIR}'/index.html' ] && exit 1
	printf '%s\r  💾  wrote '${REPORTDIR}'/index.html' $(tput el)
}
export -f surfergems_html_init_index
####################################################################################################################
# PARSE OPTIONS
####################################################################################################################
### DEFINE FUNCTION
####################################################################################################################
function surfergems_verifysubs() {
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_verifysubs $@"			
	local userinput="$@"
	local insubjectsdir="$(find ${SUBJECTS_DIR} -name 'recon-all.log' \
						   | awk '{print $NF}' \
						   | sed "s|${SUBJECTS_DIR}||g" \
						   | sed "s|/| |g" \
						   | awk '{print $1}' \
						   | sort -u)"
# check to see if input string matches list of subjects with logs
printf '%s\n' ${insubjectsdir} | sort > /tmp/surfergems-sublist.tmp
printf '%s\n' ${userinput} | sort -u > /tmp/surfergems-sublist-input.tmp
local nomatch=$(comm -13 --nocheck-order <(printf '%s\n' "${insubjectsdir}") <(printf '%s\n' $(printf '%s\n' $(cat /tmp/surfergems-sublist-input.tmp))))
# exit if there is no match
if [ "${nomatch}" ]; then
	 >&2 echo -e "\n${YELLOW} ⚠️  WARNING: ${NC}SUBJECT $(printf '"%s" ' ${nomatch}) NOT FOUND IN ${SUBJECTS_DIR}"
	return 1
else
	# $(eval `echo printf '▻%.0s' {1..$(echo ${SUBJECTS_DIR} | wc -c)}`)
	 >&2 printf "${GREEN}INPUT MATCHES SUBJECT MANIFEST${GREY}\t🏄‍♂️${SUBJECTS_DIR}${NC}\n" 
	 return 0
fi	
}
####################################################################################################################
### DEFINE FUNCTION
####################################################################################################################
function surfergems_parseopts(){
	# print usage and exit
	if [ "$#" = 0 ]; then
		surfergems_usage
		exit 0
	fi
	if [ "$(echo $@ | grep '\help\|-h\|\?\|usage')" ]; then
		HELP='hi, can i have some help?'
	fi
	# check for debug
	[ "$(printf "%s " "$@" | grep -E -- "(-log|--log|-l|--debug|-debug|-d)")" ] && DEBUG="${SOURCEPATH}/surfergems.runtime"
	[ ! ${DEBUG} ] && export debugerr='/dev/null' && export debugout='/dev/null'
	[ ${DEBUG} ] && export debugerr=${DEBUG}.err && export debugout=${DEBUG}.out
	# load default parameters
	surfergems_defaults 2>>${debugerr} 1>>${debugout}
	SUBJECTS+=($(printf '%s ' "$@" | grep -oE -- '(-s |--subjects ).*?\s' | sed 's|-s ||g' | sed 's| ||g'))
	# loop across input
	while (( "$#" )); do
	    case ${1} in
	    --stats|-i)
			RECONSTATS='getdetails'
		    ;;		    	    	
	    --files|-f)
			FILECHECK='checkemall'
			 STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${BLUE}done${NC}" "${YELLOW}failed${NC}" "${LRED}incomplete${NC}")
		    ;;
		--edits-summary|-es)
			if [ -n "$2" ]; then 
				if [ $(echo "$2" | grep '^-') ] || [ $(echo "$2" | grep 'subject') ]; then
					EDITSUMMARY='subject'
				elif [ $(echo "$2" | grep 'group') ]; then
					EDITSUMMARY='group'
				else
		    		echo -e ${BRED}'ERROR: '${NC}'legal values for --edits-summary|-es are "subject" or "group". User input was "'${2}'"\n...exiting'
		    		exit 1
				fi
			else					
				EDITSUMMARY='subject'
			fi
			;;
	    --overwrite|-ow)
			OVERWRITE=" ⚡︎ ${BRED}OVERWRITING EXISTING FILES${NC}"
		    ;;					
		--make-average|-ma)
		    if [ -n "$2" ]; then
				if [ "$(echo "$2" | grep '^-')" ]; then
					AVERAGENAME='average'	
				else
					AVERAGENAME=${2}
					shift
				fi
			else
				AVERAGENAME='average'
		    fi					
			;;									
		--morph-stats|-ms)
			MORPHSTATS='getstatistics'
		    if [ -n "$2" ] && [ ! $(echo ${2} | grep -e '^-') ] ; then
		    	MEASURES+=("${2}")
		    	shift
			else
				MEASURES=('area' 'volume' 'thickness' 'thicknessstd' 'meancurv' 'gauscurv' 'foldind' 'curvind')
				ATLAS=('aseg' 'aparc.a2009s')
		    fi
			;;		    					    						    	
	    --kill-jobs|-kj)
			KILLJOBS='hangup'
		    ;;			
		--subjects_dir|-sd)
		    if [ -n "$2" ]; then
				declare -g SUBJECTS_DIR=${2}
				shift
		    else
				echo -e "${BRED}ERROR: ${NC}-sd --subjects-dir requires a non empty option argument.\n" >&2
				exit 1
		    fi
		    ;;
	    --status|-st)
		    if [ -n "$2" ]; then
		    	if [ "$(echo "$2" | grep '^-')" ]; then
		    		declare -g STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${YELLOW}failed${NC}")
		    	else
			    	if [ "$2" = 'active' ]; then
			    		declare -g STATUS+=("${GREY}${2}${NC}")
			    	elif [ "$2" = 'done' ]; then
			    		declare -g STATUS+=("${BLUE}${2}${NC}")
			    	elif [ "$2" = 'failed' ]; then
			    		declare -g STATUS+=("${RED}${2}${NC}")
			    	elif [ "$2" = 'incomplete' ]; then
			    		declare -g STATUS+=("${RED}${2}${NC}")			    		
			    	elif [ "$2" = 'success' ]; then
			    		declare -g STATUS+=("${GREEN}${2}${NC}")			    		
			    	elif [ "$(echo ${OPTS} | grep -oE -- ${2})" ]; then
			    		declare -g STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${YELLOW}failed${NC}")
			    	else
			    		echo -e ${BRED}'ERROR: '${NC}'legal values for --status are "active" "success" "failed" "done" "incomplete". User input was "'${2}'"\n...exiting'
			    	fi
					shift
				fi
			else
				[ ! ${STATUS} ] && declare -g STATUS=("${GREY}active${NC}" "${GREEN}success${NC}" "${YELLOW}failed${NC}")
		    fi
		    ;;		    
		--subjects|-s)
			if [ $# -gt 1 ]; then
				shift				
			else
				echo -e "${BRED}\nERROR: ${NC}-s --subjects requires a non empty option argument." >&2
				exit 1		
			fi
		    ;;		    			
		--deface|-df)
			DEFACE='defacefiles'
		    if [ -n "$2" ]; then
				if [ "$(echo "$2" | grep '^-')" ]; then
					DEFACEFILES=('orig' 'T1' '001')
				else
					declare -g DEFACEFILES+=("${2}")
					shift
				fi		    	
			else
				DEFACEFILES=('orig' 'T1' '001')
		    fi			
			;;								    	    	
		--convert-vol|-cv)
			CONVERTVOL='yes'
		    if [ -n "$2" ]; then
				if [ "$(echo "$2" | grep '^-')" ]; then
					declare -g CONVERTVOLFILES=("orig" "T1" "001")
				else
					declare -g CONVERTVOLFILES+=("${2}")
					shift
				fi		    	
			else
				declare -g CONVERTVOLFILES=("orig" "T1" "001")
		    fi			
			;;
		--convert-surf|-cs)
			CONVERTSURF='yes'
		    if [ -n "$2" ]; then
				if [ "$(echo "$2" | grep '^-')" ]; then
					declare -g CONVERTSURFFILES=("lh.pial" "lh.white" "rh.inflated" "rh.pial" "rh.white" "rh.inflated")
				else
					declare -g CONVERTSURFFILES+=("${2}")
					shift
				fi		    	
			else
				declare -g CONVERTSURFFILES=("lh.pial" "lh.white" "lh.inflated" "rh.pial" "rh.white" "rh.inflated")
		    fi			
			;;			
		--in_ext|-ie)
		    if [ -n "$2" ]; then
				IEXT="${2}"
				shift
			else
				echo -e "${BRED}ERROR: ${NC}--in_ext requires a non empty option argument.\n" >&2
				exit 1				
		    fi		
			;;
		--out_ext|-oe)			
		    if [ -n "$2" ]; then
				OEXT="${2}"
				shift
			else
				echo -e "${BRED}ERROR: ${NC}--out_ext requires a non empty option argument.\n" >&2
				exit 1			
		    fi		
			;;
		--web-report|-wr)
		    if [ -n "$2" ] && [ ! $(echo ${2} | grep -e '^-') ] ; then
		    	if [ "$2" = 'active' ]; then
		    		declare -g STATUS+=("${GREY}${2}${NC}")
		    	elif [ "$2" = 'done' ]; then
		    		declare -g STATUS+=("${GREEN}${2}${NC}")
		    	elif [ "$2" = 'failed' ]; then
		    		declare -g STATUS+=("${YELLOW}${2}${NC}")
		    	elif [ "$(echo ${OPTS} | grep -oE -- ${2})" ]; then
		    		declare -g STATUS=("${GREY}active${NC}" "${GREEN}done${NC}" "${YELLOW}failed${NC}")
		    	else
		    		echo -e ${BRED}'ERROR: '${NC}'legal values for --status are "active" "done" "failed". User input was "'${2}'"\n...exiting'
		    		exit 1
		    	fi
		    	shift
			else
				declare -g STATUS=("${GREEN}done${NC}")
		    fi
			HTMLREPORT='makereport'
			;;
		--web-report-dir|-wrd)
		    if [ -n "$2" ]; then
				REPORTDIR="${2}" && HTMLREPORT='makereport'
				shift
			else
				echo -e "${BRED}ERROR: ${NC}--web-report-dir -wrd requires a non empty option argument.\n" >&2
				exit 1	
		    fi
			;;					    		    				    		    	    		    					
	    -log|--log|-l|--debug|-debug|-d)
			DEBUG="${SOURCEPATH}/surfergems.runtime"
		    ;;
	    --verbose|-v)
			VERBOSE='givemeinfo'
		    ;;
		--no-colors|--plain|-nc)
			PRETTY='plainjane' && surfergems_defaults
			;;
		\?|--usage|-usage|-u|usage)
			HELP='help'
			surfergems_usage
			exit
			;;
		--help|-help|-h|help)
			HELP='more'
			surfergems_usage
			exit
			;;
		*)
			echo $@
		    printf '\n'${YELLOW}' Warning: '${NC}'Unknown option: "%s"\n' "${1}" >&2
		  	;;
	    esac
	    shift
	done
	[ ${DEBUG} ] && echo -e "surfergems $(date)\n  🕷🔨 ${YELLOW}DEBUG STDOUT${GREY} $(date) surfergems_parseopts $@${BLUE}" > ${DEBUG}.out
	[ ${DEBUG} ] && echo -e "surfergems $(date)\n  🕷🔨 ${YELLOW}DEBUG ERRORS${GREY} $(date) surfergems_parseopts $@${BLUE}" > ${DEBUG}.err	
	if [ ! "${SUBJECTS}" ] && [ ! ${HELP} ]; then
		if [ -d ${SUBJECTS_DIR} ]; then
			declare -g SUBJECTS=($(find ${SUBJECTS_DIR} -name 'recon-all.log' | awk '{print $NF}' | sed "s|${SUBJECTS_DIR}||g" | sed "s|/| |g" | awk '{print $1}' | sort -u))
		else
			echo -e "\033[33;5m${BRED}ERROR: ${GREY}${SUBJECTS_DIR} does not exist\033[33;5m${NC}" >&2
			exit
		fi
	fi		
	[ ! "${REPORTDIR}" ] && REPORTDIR="${HOME}/Surfer-webgems"	
	# check specified subjects exist in subjects dir
	surfergems_verifysubs "${SUBJECTS[@]}" 2>>${debugerr} 
}
export -f surfergems_parseopts
####################################################################################################################
## DEFINE FUNCTION
#  check for requirements and install them
####################################################################################################################
## TODO add conda + nilearn to dependencies 
function surfergems_dependencies(){
	## TODO -- hefty decision here, not all users may want to install this
	# add prompt, proceed only if user accepts, problem with redirection of output?	
	if [ $(uname) = 'Darwin' ]; then
		# Install HomeBrew Package Manager
		if [ -z $(which brew) ]; then
			ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
			brew tap caskroom/cask
		fi
		# check for latest version of bash
		if [ "$(bash --version | grep -oE "version.[0-9].*?" | head -n 1 | awk '{print $NF}')" -lt 4 ]; then
			printf "${YELLOW}◀︎|⁃‣WARNING${NC}  Running Outdated Bash $(bash --version)"
			brew install bash
			sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells'
			sudo chsh -s /usr/local/bin/bash
		fi
		# check for coreutils
		if [ ! $(brew list | grep 'coreutils') ]; then
			brew install coreutils
			export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
			export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
			echo -e '\n#add coreutils to path\nexport PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"\nMANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"\n'  >> ${HOME}/.bash_profile
		fi
		if [ ! $(brew cask list | grep 'java') ]; then
			brew cask install java
		fi
		if [ -z $(which parallel) ]; then
			brew install parallel
		fi	
		if [ -z $(which zenity) ]; then
			brew install zenity
		fi				
		# check date in path is coreutils date
		if [ ! "$(date --version 2&> /dev/null | grep 'GNU coreutils')" ]; then
			export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
			export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
		fi
	elif [ $(uname) = 'Linux' ]; then
		# check for parallel 
		if [ -z $(which parallel) ]; then
	    	## TODO compile for linux
	    	echo "GNU parallel does not exist on this system.. this installation is complicated.. please download->build first then run this again.. sorry! exiting.." >2&
	    	exit 1
		fi
		# TODO compile all utilities for LINUX
	fi
	# check for freesurfer (same across platforms)
	if [ -z ${FREESURFER_HOME} ] || [ ! -d ${FREESURFER_HOME} ]; then
		echo -e "\033[33;5m${BRED}ERROR: ${GREY}FreeSurfer Installation Check Failed! \n\t ⚒︎ \${FREESURFER_HOME} does not exist \n\t see: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall\033[33;5m${NC}" >&2
		exit 1
	else
		# print version information with verbose call
		[ "${VERBOSE}" ] && echo -e "\033[33;5m${GREY}⍄ ${NC}${GREEN}$(cat ${FREESURFER_HOME}/VERSION)${NC}\n"
		# check freesurfer version
		if freesurfer --version | grep 'v6' > /dev/null; then
			# check for patch
			if mri_aparc2aseg --all-info | grep -oE '1.48.2.6' > /dev/null ; then
				echo -e "\033[33;5m${YELLOW} Warning: ${NC}\t⚒︎ ${GREY}FreeSurfer v6.0.0 has not been patched!${NC}\n\t\t make average subject and aparc mapping to aseg may fail\n\t\t consider adding patched binaries to ${FREESURFER_HOME}/bin and setting 755 permissions..\n\t\t find updated binaries (mri_aparc2aseg, make_average_[subject|surface]) in ${SOURCEPATH}/bin/" >&2
			else
				[ "${VERBOSE}" ] && echo -e "\033[33;5m${GREEN} FreeSurfer v6.0.0 (patched) Detected with mri_aparc2aseg 1.48.2.6${NC}\n"
			fi
		elif freesurfer --version | grep 'v5' > /dev/null; then
			echo -e "\033[33;5m${YELLOW} Warning: ${NC}\t⚒︎ ${GREY}Old FreeSurfer v5 Detected, consider upgrading to v6 \n\t see: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall\033[33;5m${NC}" >&2
		else
			echo -e "\033[33;5m${YELLOW} Warning: ${NC}\t⚒︎ ${GREY}Unknown FreeSurfer Version Detected, consider installing v6.\n\t\t see: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall\033[33;5m${NC}" >&2
		fi		
		# check if freesufer binaries are in path
		if [ -z $(echo ${PATH} | grep "${FREESURFER_HOME}") ]; then
			echo -e "\033[33;5m${YELLOW}WARNING: ${GREY}FreeSurfer Binaries are Not in Path! \n\t see: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall\033[33;5m${NC}" >&2
		fi
	fi
	# check java version 
	if [ "$(java -version 2>&1 | grep -o "\"[0-9].?*\"" | sed 's|"||g')" -lt 7 ]; then
		echo -e "\033[33;5m${YELLOW}WARNING: Java 7 or higher is required for web reports! $(java -version) installed ${NC}"  >&2
	fi		
}
export -f surfergems_dependencies
####################################################################################################################
### DEFINE FUNCTION
#   Usage info
####################################################################################################################
##  TODO comprehensive explanation of input options and output
function surfergems_usage(){
	>&2 echo -e "  🕷🔨 ${YELLOW}DEBUG${NC} surfergems_usage $@"
	surfergems_defaults
read -r -d '' HELPMESSAGE <<EOF

Usage :: ${0##*/} \n
\n
Operations\n
\t --stats|-i \t print current status, run time, host\n
\t --files|-f \t check subject data against file manifest\n
\t --morph-stats|-ms volume|thickness|curv|... \t print morphometric statistics\n
\t --make-average|-ma AVERAGENAME \t compute average subject (can specify list)\n
\t --edits-summary|-es subject|group \t Summarize edits (default subject)
\t --deface|-df BASENAME \t deface BASENAME\n
\t --convert-vol BASENAME \t convert volumes (default: ${CONVERTVOLFILES}) \n
\t --convert-surfs SURF \t convert volumes (default: ${CONVERTSURFFILES}) \n
\t\t --iext \t required for conversion, input extension of files \n
\t\t --oext \t required for conversion, output extension of files \n
\n
Filters for Operations\n
\t --status|-st active|done|failed \t list jobs by status, can also be used to filter subjects for other commands \n 
\t --subjects|-s LIST \t execute only on specified subjects, useful for filtering, (default: all in SUBJECTS_DIR) \n
\t --subjects_dir|-sd SUBJECTS_DIR \t define subjects directory (default: ${SUBJECTS_DIR})\n
\n
Grid Management\n
\t --kill-jobs PATTERN \t kills current jobs (default kill -9 ${KILLPATTERN}) and deletes IsRunning lockfiles\n
\n
Reports & Tables\n
\t --web-report active|done|failed \t generate a web report \n
\t --web-report-dir|-wrd DIR \t path to web report directory \n
\n
Miscallaneous\n
\t --overwrite\t overwrite existin files \n
\t --no-colors|--plain|-nc \t suppress my inner beauty \n
\t --verbose|-v \t make everything much more detailed \n
\t --debug|-d
\n
More Help\n
\t --usage|usage -h|--help|help|?|\n
EOF
if [ "${HELP}" = 'more' ]; then
read -r -d '' HELPMESSAGE <<EOF
\n\033[33;5m✨\033[0m${BLUE}The Magical Surfer-gem Box${BLUE}\033[33;5m✨\033[0m\n\n

This program contains a bounty of gems for working with FreeSurfer Datasets.

\n\n ${BBLUE}■ ${GREY}Summarizing Jobs${NC}
\n\n\t ${GREY}checking a single subject${NC}
\n\t >> ${0##*/} -s SUBJECTID 
\n\n\t ${GREY}also works for lists${NC}
\n\t >> ${0##*/} -s SUBJECT-1 SUBJECT-2 SUBJECT-3
\n\n\t ${GREY}get more information${NC}
\n\t >> ${0##*/} -s SUBJECT-1 SUBJECT-2 SUBJECT-3 -v
\n\n\t ${GREY}summarize all data in SUBJECTS_DIR${NC}
\n\t >> ${0##*/} --status
\n\n\t ${GREY}check only failed${NC}
\n\t >> ${0##*/} --status failed
\n\n\t ${GREY}check only currently running jobs${NC}
\n\t >> ${0##*/} --status active
\n\n\t ${GREY}check only completed jobs${NC}
\n\t >> ${0##*/} --status done
\n\n\t ${GREY}check only completed and failed jobs${NC}
\n\t >> ${0##*/} --status failed --status done
\n\n\t ${GREY}find which subjects in a list are completed${NC}
\n\t >> ${0##*/} --status done -s SUBJECT-1 SUBJECT-2 SUBJECT-3
\n\n\t${GREY} ℹ️   You can always add${NC} -v${GREY} for more information${NC}

\n\n ${BBLUE}■ ${GREY}Check Data for Complete File Manifest${NC}
\n\n\t ${GREY}check all subjects in SUBJECTS_DIR${NC}
\n\t >> ${0##*/} -f
\n\n\t ${GREY}print details about which files are missing for a specific subject ${NC}
\n\t >> ${0##*/} -s SUBJECTID -f -v 

\n\n ${BBLUE}■ ${GREY}Compile Summary Statistics${NC}
\n\t >> ${0##*/} -s SUBJECTID --stats

\n\n ${BBLUE}■ ${GREY}Convert MGZs into NII.GZ${NC}
\n\t >> ${0##*/} -s SUBJECTID --convert
\n\n\t ${GREY}leave off the SUBJECTID to convert all subjects in SUBJECTS_DIR${NC} -v
\n\t >> ${0##*/} --convert

\n\n ${BBLUE}■ ${GREY}Deface Identifying Images for all in SUBJECTS_DIR${NC}
\n\t >> ${0##*/} --deface
\n\n\t ${GREY}or just deface a specific subject${NC}
\n\t >> ${0##*/} -s SUBJECTID --deface
\n\n\t ${GREY}specify the basename of volumes to deface${NC}
\n\t >> ${0##*/} -s SUBJECTID --deface 001 --deface T1

\n\n ${BBLUE}■ ${GREY}Create HTML webreport with Surfer-webgems for all in SUBJECTS_DIR${NC}
\n\t >> ${0##*/} --web-report --web-report-dir ~/My-Demo-WebReport
\n\n\t ${GREY}or just make for specific subject(s)${NC}
\n\t >> ${0##*/} -s SUBJECTID --web-report 'done' --we-report-dir ~/SUBJECTID-WebReport

\n\n ${BBLUE}■ ${GREY}Getting Help${NC}
\n\t >> ${0##*/}
\n\t >> ${0##*/} -h
\n\t >> ${0##*/} -u
\n\t >> ${0##*/} --help
\n\t >> ${0##*/} --usage

\n\n ${BBLUE}■ ${GREY}No Colors (Plain Text)${NC}
\n\t >> ${0##*/} -nc  --help
\n\t >> ${0##*/} -s SUBJECTID -nc

EOF
	echo -e ${HELPMESSAGE} | fold -w 200 -s # print and wrap
else
	echo -e ${HELPMESSAGE} |  column -s $'\t' -t | fold -w 200 -s # print and wrap
fi
}
export -f surfergems_usage
####################################################################################################################
## DEFINE FUNCTION
#  TOP LEVEL FLOW CONTROL
###############################
function surfergems(){	
	# check subject status
	if [ ! ${STATUSCHECK} ] && [ ${STATUS} ]; then
		(if surfergems_status 2>> ${debugerr}
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  surfergems_status\n" >> ${debugout}
			echo 'return 0' > /tmp/surfergems-return-val
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  surfergems_status FAILED\n" >>${debugerr} >&2
			echo 'return 1' > /tmp/surfergems-return-val	
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)
	fi	
	# check for file manifest
	if [ ${FILECHECK} ]; then
		(if surfergems_files 2>> ${debugerr}
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  surfergems_files\n" >> ${debugout}
			echo 'return 0' > /tmp/surfergems-return-val
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  surfergems_files FAILED\n" >>${debugerr} >&2
			echo 'return 1' > /tmp/surfergems-return-val	
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)
	fi		
	# get statistics for jobs
	if [ ${RECONSTATS} ]; then
		(if surfergems_stats "${SUBJECTS[@]}" 4>>${debugout} 2>>${debugerr} 
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC}  surfergems_stats ${SUBJECTS[@]}\n" >> ${debugout}
			echo 'return 0' > /tmp/surfergems-return-val
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  surfergems_stats ${SUBJECTS[@]} FAILED\n" >> ${debugerr}
			echo 'return 1' > /tmp/surfergems-return-val	
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)
	fi
	# get morphometric statistics
	if [ ${MORPHSTATS} ]; then
		(if surfergems_morph_stats "${SUBJECTS[@]}" 4>>${debugout} 2>>${debugerr} 
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC}  surfergems_morph_stats ${SUBJECTS[@]}\n" >> ${debugout}
			echo 'return 0' > /tmp/surfergems-return-val
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  surfergems_morph_stats ${SUBJECTS[@]} FAILED\n" >> ${debugerr}
			echo 'return 1' > /tmp/surfergems-return-val	
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)
	fi	
	# # create edit summaries		
	if [ ${EDITSUMMARY} ]; then 
		(if parallel -k --link surfergems_subject_edits ::: ${SUBJECTS[@]}  4>>${debugout} 2>>${debugerr} >(zenity --progress --pulsate --auto-kill --auto-close --title="💎🏄‍♂️ Surfer Gems | Edits" --text="<span>Summarizing Edits</span>" --width=300 --height=100)
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} surfergems_subject_edits\n" >> ${debugout}			
				echo 'return 0' > /tmp/surfergems-return-val
			if [ ${EDITSUMMARY} = 'group' ]; then 
				if surfergems_group_edits; then
					printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC} surfergems_group_edits\n" >> ${debugout}
					echo 'return 0' > /tmp/surfergems-return-val
				else
					printf "\r${BRED}◀︎|⁃‣ERROR${NC}  Group Edits surfergems_group_edits FAILED\n" >> ${debugerr}
					echo 'return 1' > /tmp/surfergems-return-val
				fi
			fi
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  surfergems_subject_edits FAILED\n" >> ${debugerr}
			return 1
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)
	fi
	# kill SGE jobs, delete isRunning files
	if [ ${KILLJOBS} ]; then
		if (surfergems_killJobs | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr}
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC}  Kill Jobs\n" >> ${debugout}
			return 0
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  Kill Jobs Failed\n" >> ${debugerr}
			return 1
		fi		
	fi		
	# convert files
	local convert=''
	if [ ! -z "${CONVERTVOL}" ] || [ ! -z "${CONVERTSURF}" ]; then 
		[ ! -z "${CONVERTVOL}" ] && convert+='vol'		
		[ ! -z "${CONVERTSURF}" ] && convert+='surf '
		[ -z ${IEXT} ] && IEXT='null'
		for c in ${convert}; do
			# populate with user input / default values
			[ "${c}" = 'vol' ] && local files=${CONVERTVOLFILES[@]}		
			[ "${c}" = 'surf' ] && local files=${CONVERTSURFFILES[@]}		
			# switch default file ext from vol to surf
			[ "${c}" = 'surf' ] && [ "${IEXT}" = 'mgz' ] && IEXT='null'
			[ "${c}" = 'surf' ] && [ "${OEXT}" = 'nii.gz' ] && OEXT='gii'
			# parent command is grouped in subshell to capture exit status within if/else prior to tee
			# exit status is needed to access ERROR message
			# subshells can't export variables (no return), so need to write status to file and exe outside
			(if parallel -k --link surfergems_convert ${c} ${IEXT} ${OEXT} {} ${files} ::: ${SUBJECTS[@]} 4>>${debugout} 2>>${debugerr} >(zenity --progress --pulsate --auto-kill --auto-close --title="💎🏄‍♂️ Surfer Gems | Convert" --text="<span>Converting Files to ${OEXT}</span>" --width=300 --height=100)
			then
				printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  parallel -k --link surfergems_convert ${IEXT} ${OEXT} {} ${CONVERTVOLFILES[*]} ::: ${SUBJECTS[*]}${NC}\n" >> ${debugout}
				echo -e "\n${GREEN}◀︎|⁃‣${GREY}Conversion Complete${NC}"
				echo 'return 0' > /tmp/surfergems-return-val
			else
				printf "\r${BRED}◀︎|⁃‣ERROR${NC}  parallel -k --link surfergems_convert ${IEXT} ${OEXT} {} ${CONVERTVOLFILES[*]} ::: ${SUBJECTS[*]}\n" >>${debugerr} >&2
				echo 'return 1' > /tmp/surfergems-return-val
			fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)
		done
	fi
	# anonymize subjects
	if [ "${DEFACE}" ]; then 
		(if parallel -k --link surfergems_deface {} ${IEXT} ${DEFACEFILES[@]} ::: ${SUBJECTS[@]}  4>>${debugout} 2>>${debugerr} >(zenity --progress --pulsate --auto-kill --auto-close --title="💎🏄‍♂️ Surfer Gems | Deface" --text="Defacing ${DEFACEFILES[@]}" --width=300 --height=100)
		then
			printf "${GREEN}◀︎|⁃‣SUCCESS${GREY}  parallel -k --link surfergems_deface {} ${DEFACEFILES[@]} ::: ${SUBJECTS[*]}${NC}\n" >> ${debugout}
			echo -e "\n${GREEN}◀︎|⁃‣${GREY}Deface Complete${NC}\n"
			echo 'return 0' > /tmp/surfergems-return-val
		else
			printf "${BRED}◀︎|⁃‣ERROR${NC}  parallel -k --link surfergems_deface {} ${DEFACEFILES[@]} ::: ${SUBJECTS[*]}${NC}\n" >>${debugerr} >&2
			echo 'return 1' > /tmp/surfergems-return-val
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)		
	fi		
	return 0		
	# # make HTML webreport	
	if [ "${HTMLREPORT}" ]; then
		(if surfergems_html 2>> ${debugerr}
		then
			printf "\r${GREEN}◀︎|⁃‣SUCCESS${GREY}  surfergems_status\n" >> ${debugout}
			open ${REPORTDIR}/index.html
			echo 'return 0' > /tmp/surfergems-return-val
		else
			printf "\r${BRED}◀︎|⁃‣ERROR${NC}  surfergems_status FAILED\n" >>${debugerr} >&2
			echo 'return 1' > /tmp/surfergems-return-val	
		fi | tee -a ${debugout}) 3>&1 1>&2 2>&3 | tee -a ${debugerr} && eval $(cat /tmp/surfergems-return-val)			
	fi  
	# [ "${HTMLREPORT}" ] && surfergems_html #&& 
}
export -f surfergems
#############################
#### MAIN BODY
#### (fx called here)
#############################
# check dependencies
# if surfergems_dependencies; then
# 	printf "\r${GREEN}◀︎|⁃‣SUCCESS${NC}  Dependency Check\n" >> ${debugout}
# else
# 	printf "\r${BRED}◀︎|⁃‣ERROR${NC}  Dependency Check Failed\n" >> ${debugerr}
# fi
# trace call path
surfergems_whereami	
# parse user input	
surfergems_parseopts "$@"
##### do yo thangs surfa manes 🏄‍♂️
if surfergems "$@"; then
	echo -e "\n⌛️ the task was completed in ${SECONDS} seconds"
	echo -e "\n👤 $(whoami)@$(hostname)\n🗓  $(date)"
else
	printf "${BRED}◀︎|⁃‣ERROR${NC} $(echo surfergems "$@") FAILED\n"
fi
[ ${DEBUG} ] && echo -e "\n${GREY}Writing debugging log${NC}\n OUTPUT :: ${DEBUG}.out\n ERROR :: ${DEBUG}.err"		
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
