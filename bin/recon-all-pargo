#!/bin/bash
# Import data and parallelize recon-all on a batch of subjects
#
# TODO :: only supports raw data dir where subjects have their own dirs
#	Shady El Damaty 22 July 2016
# ------------------------------------------------------------------------------------------------------------
# System default arguments
cd ~/..
me=$(whoami)
# time the script
ds=$(date)
s=$(date -u "+%s")                              
# Program defaults
subdir=$SUBJECTS_DIR                            # name of folder where subject data will live, can be empty for default SUBJECTS_DIR
group=''                                        # group name, can be empty
rawdatadir='./'                                 # name of directory in project directory where raw data live
rawdataregexp="Anat/*.nii"					    # subdirectory
subsfile='subjects.list'                        # what to call list of subjects
reconstr="-all -qcache -3T -sd $subdir -noappend"
#parstr="--progress --joblog $subdir/recon-all-pargo.log --memfree 1G"
parstr="--progress --joblog $subdir/recon-all-pargo.log"
## Enable advanced pattern matching
shopt -s extglob
#
# ------------------------------------------------------------------------------------------------------------
# Help Function
show_help() {
    cat <<EOF

    Usage  ::  ${0##*/} [-h|--help]  [-sd|--subjectdir PATH] [-s|--subjlist FILE] [-g|--group STRING] ...
    		 				[-rd|--rawdatadir PATH] [-rexp|--regexp PATTERN] ...
    		 				[-ro|--reconopts FILE] [-po|--paropts FILE]
                                
    Invokes GNU Parallel to parallelize recon-all on a batch of subjects. Supports grouping of subjects 
    for different treatments or time points.

    Options :: 
    -h    --help           displays help
    -sd   --subjectdir     output of recon-all will be saved here (can be empty)
    -s    --subjlist       name of subject list to run reconstruction on (created if not defined)
    -g    --group          grouping flag for subjects (can be empty)     
    -rd   --rawdatadir     absolute path to raw data
    -rexp --regexp         regular expression for path to data

    Special Options ::
    -ro --reconopts 	   file containing options for recon-all
    -po --paropts 		   file containing options for parallel
    

    Example :: 

     1. The following call sets the subjects directory to the default defined in .bash_profile. 
        Raw data is looked for in the current directory ('./'). Data assumed to be organized 
        for each subject under the following regular expression "Anat/*.nii"

             recon-all-pargo 

     2. The following call sets the subjects directory to the default defined in .bash_profile.
        Raw data is defined as an input argument.  Images are assumed to be .img.

            recon-all-pargo -rd /Volumes/CFMI/FreeSurfer/data/raw -rexp "MPRAGE/*.img"

     3. The following call sets the subjects directory to default.  Raw data is defined as input. 
        Images are assumed to be .img.  Processed subjects are appended with group flag "alzheimer"

            recon-all-pargo -rd /Volumes/CFMI/FreeSurfer/data/raw -rexp "MPRAGE/*.img" -g 'alzheimer'

     4. Given the existence of a project directory: /Volumes/CFMI/FreeSurfer/data.
            This directory is further assumed to contain:
                                                            ./ads.subjects
                                                            ./ads.subjects/subjects.list
                                                            ./raw/w1/<subjid>/Anat/Anat*.nii

         The following call will set the subject directory as defined, import from the specified raw data
         directory and only process those images defined in the subjects list.

            recon-all-pargo -sd /Volumes/CFMI/FreeSurfer/data/ads.subjects  \ 
                            -rd /Volumes/CFMI/FreeSurfer/data/raw/w1 \ 
                            -rexp "/Anat/*.nii" \
                            -s subjects.list \ 
                            -g w1

     5. Run recon-all with modified arguments (ex. single stage)
     		echo "-autorecon1" > .reconopts
        	recon-all-pargo -ro .reconopts

     6. Run with specified paralell options

     		echo "--joblog --progress analysis-1.log --memfree 3G" > .paropts
     		recon-all-pargo -po .paropts

    Default behavior ::  
        
        Subjects Directory         --           $subdir
        Grouping Pattern           --           $group (empty by default)
        Subjects List Name         --           $subsfile
        Raw Data Directory         --           $rawdatadir
        Raw Data Pattern           --           $rawdatadir<subjid>/$rawdataregexp
        Recon Options 		   -- 		$reconstr
        Parallel Options 	   -- 		$parstr

        Subject directory is set to SUBJECTS_DIR. No grouping variable is defined. Raw data is current working
        directory. The script assumes raw data directory has folders for each subject.  Each subject is assumed
        to have their anatomical scan organized under the convention "Anat/*.nii." Looks for a subject list 
        in the SUBJECTS_DIR.  If the list does not exist, one is created based on the directory names in the 
        raw subject directory. Will not run if necessary paths are not detected.

        The default recon options are to run all stages assuming a 3T seimens scanner.  Log files are not appended
        from successive runs.  Smoothed data for qdec analysis is also computed.

        The default parallel options are to output a progress bar and save a job log in the subjects directory.

    IMPORTANT!

    * Can handle multiple raw MPRAGE scans. However this means you must make sure to only include those
      scans in your raw data directory that pass quality control.  Multiple MPRAGE acquisitions are averaged 
      together to create a high quality image.  Thus the quality of the final image can be impaired if 
      bad scans are not initially removed from the raw data directory.

    * Run time statistics and hardware information is appended to a file recon-all-pargo.completed.<date&time>.info

EOF
}
# ------------------------------------------------------------------------------------------------------------
# Option Parsing
while :; do
    case $1 in
        -h|--help)
        show_help
        exit 
        ;;  
        -sd|--subjectdir)
            if [ -n "$2" ]; then
                subdir=$2
                shift
            else
                echo "ERROR:  -sd --subjectdir requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -rd|--rawdatadir)
            if [ -n "$2" ]; then
                rawdatadir=$2
                shift
            else
                echo "ERROR:  -rd --rawdatadir requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -rexp|--regexp)
            if [ -n "$2" ]; then
                rawdataregexp=$2
                shift
            else
                echo "ERROR:  -rexp --regexp requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;                          
        -s|--subjlist)
            if [ -n "$2" ]; then
                subsfile=$2
                shift
            else
                echo "ERROR:  -s --subjlist requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -g|--group)
            if [ -n "$2" ]; then
                group=$2
                shift
            else
                echo "ERROR:  -g --group requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -ro|--reconopts)
            if [ -n "$2" ]; then
                reconstr=$(cat $2)
                shift
            else
                echo "ERROR:  -ro --reconopts requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -po|--paropts)
            if [ -n "$2" ]; then
                parstr=$(cat $2)
                shift
            else
                echo "ERROR:  -po --paropts requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;                        
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            break
    esac

    shift
done
# ------------------------------------------------------------------------------------------------------------
# Update default arguments
## set subdir to default if empty
if [ ! $subdir ]; then
	subdir=$SUBJECTS_DIR
fi
## set subsfile path and subsfilename
subsfilename=$subsfile
subsfile=$subdir'/'$subsfilename
# delimit group from subject name...
if [ ! -z $group ]; then
	group="-$group"
fi
# ------------------------------------------------------------------------------------------------------------
# Output variables to terminal
cat <<EOF

üìç ${0##*/} was invoked by  :   $me   on   $ds   with the following options:

üîπ SUBJECT GROUP                       =  $group
üîπ SUBJECT DIRECTORY                   =  $subdir
üîπ RAW DATA DIRECTORY                  =  $rawdatadir
üîπ RAW DATA PATTERN 		      =  $rawdatadir/<subjid>/$rawdataregexp
üîπ SUBJECT LIST FILE                   =  $subsfile
üîπ RECON OPTIONS                       =  $reconstr
üîπ PARALLEL OPTIONS                    =  $parstr


EOF
# ------------------------------------------------------------------------------------------------------------
# Check all of the inputs
if [ ! -d $subdir ]; then
    echo " ‚ùå‚ùå‚ùå ERROR! Path to Subject Directory Could Not Be Found ‚ùå‚ùå‚ùå"
    exit 
elif [ ! -d $rawdatadir ]; then
    echo "‚ùå‚ùå‚ùå ERROR! Path to Raw Data Directory Could Not Be Found ‚ùå‚ùå‚ùå"
    exit 
fi
# ------------------------------------------------------------------------------------------------------------
# Check for and read subject list
if [ -f $subsfile ]; then
    echo ' üìÇ Reading List of Subjects: ' $subsfile
    echo ' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . '
    subs=$(cat $subsfile)
    echo 'The following Subjects will be loaded:  '
    echo $subs
else
    echo -e '** No List of Subjects Found!\n'
    echo -e '** Loading All Subjects in Raw Data Directory: ' $rawdatadir'\n'
    echo -e '** List of Subjects with Raw Data: ' $subsfile'\n'
    cd $rawdatadir 
    ls -d !(*.*) > $subsfile
    subs=$(cat $subsfile)
    # you can add a conditional here if subs are empty then read assuming no subject dirs and that
    # each file in the raw data folder is a .nii file with the subject name as the file name of the image
fi
cd $subdir
# ------------------------------------------------------------------------------------------------------------
# Run Recon-All in Parallel
# todo :: perhaps add control flow for -i flag (only import data if it doesnt exist?)
echo "$(cat $subsfile)" | parallel $parstr recon-all -s {}"$group" -i "$rawdatadir/"{}"/$rawdataregexp" $reconstr
# ------------------------------------------------------------------------------------------------------------
# End Timer
de=$(date)
e=$(date -u "+%s")
d=$((e-s))
# ------------------------------------------------------------------------------------------------------------
# Save run time and hardware statistics
statsfn=$subdir/"recon-all-pargo.completed.$(date "+%Y-%m-%d@%H:%M:%S").info"
echo -e "üìù Recon-All Stats & System Profile\n" >> $statsfn
echo -e "$me@$(uname -n)" >> $statsfn
echo -e "$(uname -v)\n" >> $statsfn
echo -e "$(wc -l $subsfile | cut -f 1 -d " ") subjects processed\n" >> $statsfn
echo -e "Start Time     ::  $ds" >> $statsfn
echo -e "End Time       ::  $de" >> $statsfn
echo -e "Total Run Time :: $(($d / 3600)) hours $(($d %3600 / 60)) minutes and $(($d % 60)) seconds \n" >> $statsfn
echo -e "$(system_profiler SPHardwareDataType)" >> $statsfn
# ------------------------------------------------------------------------------------------------------------