#!/bin/bash
# Cross Correlate Two Data Sets

# defs
x=foo
y=bar
k="$SPM_PATH/toolbox/FieldMap/brainmask.nii"
m='pearson'
s=$(pwd)

# help
show_help() {
cat <<EOF

	Usage :: ${0##*/} [-x|--dataset1 LIST ] [-y|--dataset2 LIST] [-k|--mask FILE ] [-m|--method STRING] [s|--savedir DIR] [-h|--help]

			Calculate the 2D cross correlation matrix between two datasets X and Y.
			
			Y and X should be composed as a list of nifti files such that:

				Y = [y1 y2 .. yK]		X = [x1 x2 .. xK]

			The similarity/overlap/correlation between each pair-wise comparison of 
			the elements in X & Y is indicated by the specified method (jaccard, dice, pearson).

			All images are masked such that only the relevant field of view contributes
			to the correlation.

			Options	::

				inputs.
				-x|--dataset1	[LIST]		path to file containing list of images
				-y|--dataset2 	[LIST]		path to file containing 2nd list of images
				-k|--mask 	[FILE]		path to file containing mask
				-s|--savedir 	[DIR]		directory path to save output

				methods.
				-m|--methods 	[STRING]	Pearson, Jaccard, DICE (see mricalc_xcorr -h)

				information.
				-h --help

			Default Behavior ::

				dataset1 		--		$x
				dataset2 		--		$y
				mask 			--		$k
				method 			--		$m
				savedir 		--		$s

			Example Usage ::

				${0##*/} -x $x -y $y -s $s -m $m

EOF

}

# assign input
while :; do
    case $1 in
        -h|--help)
        	show_help
        	exit 
        ;;
        -x|--dataset1)
            if [ -n "$2" ]; then
                x=$2
                shift
            else
                echo "ERROR:  -x --dataset1 requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;
        -y|--dataset2)
            if [ -n "$2" ]; then
                y=$2
                shift
            else
                echo "ERROR:  -y --dataset2 requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;
        -k|--mask)
            if [ -n "$2" ]; then
                k=$2
                shift
            else
                echo "ERROR:  -k --mask requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;
        -s|--savedir)
            if [ -n "$2" ]; then
                s=$2
                shift
            else
                echo "ERROR:  -s --savedir requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;                                                                                     
        -m|--method)
            if [ -n "$2" ]; then
                m=$2
                shift
            else
                echo "ERROR:  -m --method requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;                                                                                             
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
        ;;
        *)
            break
    esac

    shift
done

# check if mri_convert and mri_info software exists
if [ ! -e $(which mricalc_xcorr) ]; then
	echo -e " ⚠️  WARNING !! missing dependency :: mricalc_xcorr\n\n find it here :: http://github.com/seldamat/Surfer-gems.git"
	exit
fi

# create savedir
if [ ! -d $s ]; then
	mkdir -p $s
fi

xn=$(dirname $(echo "$x" | head -1))
yn=$(dirname $(echo "$y" | head -1))
xn=$(echo ${xn##*/})
yn=$(echo ${yn##*/})

output=$s'/'$xn'.v.'$yn'.'$m'.txt'
if [ ! -e $output ]; then
	touch $output
else
	rm $output
fi

# define save dir for intermediate files
s=$s'/'$xn'.v.'$yn

# compute cross correlation matrix
for xx in $x; do
	data=( )
	for yy in $y; do
		if [ $m == "pearson" ]; then
			data+=$(mricalc_xcorr -x $xx -y $yy -m $k -s $s -p | grep "r(X,Y)" | cut -f2 -d "=")
			#mricalc_xcorr -x $xx -y $yy -m $k -s $s -p
		fi
		if [ $m == "dice" ]; then
			#data+=$(mricalc_xcorr -x $xx -y $yy -m $k -s $s -d | grep "dice =" | cut -f2 -d "=")
            mricalc_xcorr -x $xx -y $yy -m $k -s $s -d
		fi		
		if [ $m == "jaccard" ]; then
			data+=$(mricalc_xcorr -x $xx -y $yy -m $k -s $s -j | grep "jaccard =" | cut -f2 -d "=")
		fi		
	done
	echo $data >> $output
done

##
#
#  Shady El Damaty 