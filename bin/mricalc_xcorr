#!/bin/bash



# Default Arguments
cd ~/..
me=$(whoami)
usrpth=$(pwd)
usrpth=$usrpth/$me
binpth="$usrpth/bin/"
cd $usrpth
dte=$(date)

# image files
image1=foo.nii
image2=bar.nii
# save output here
savedir=$usrpth/mricalc_xcorr
# define mask to be used
mask="$SPM_PATH/toolbox/FieldMap/brainmask.nii"
# default is silent
showinfo=''
# default method is pearson
p=''
d=''
j=''
# ------------------------------------------------------------------------------------------------------------
# Help Function

show_help() {
cat <<EOF
	
	Usage :: ${0##*/} [-x--image1 FILE] [-y|--image2 FILE] [-m|--mask FILE] [-s|--savedir PATH] ...
	 						[-d|--dice] [-p|--pearson] [-j|--jaccard]
	 						[-i|--showinfo] [-h|--help]
	
	Use this program to compute the spatial cross correlation p(X,Y) between two images, X and Y, 
	within a user-defined mask. Several correlation metrics are available (Pearson, Jaccard, Dice)

	üî¨  The use of a mask allows the spatial correlation to be computed across appropriate data points. 
	    In other words, we can use the mask to exclude points outside of the image region of interest that 
	    would never be correlated anyway! (i.e. out of field of view or interest)

	Options  :: 

		inputs.
		-x --image1 	[FILE] 		full path to first image
		-y --image2 	[FILE]		full path to second image
		-m --mask   	[FILE]		full path to mask
		-s --savedir 	[DIRECTORY]	all outputs and intermediate files will be saved here
				
		methods.
		-p --pearson 	use this flag to indicate calculation of pearson's coefficient
		-d --dice 		use this flag to indicate calculation of dice coefficient
		-j --jaccard    use this flag to indicate calculation of jaccard coefficient

		information.
		-i --showinfo 		print information about input files to the screen (useful for debugging)
		-h --help			displays help									
	
	Default Behavior ::
	
		The spm12 brain mask is selected by default. If the mask cannot be found then
		the user will be prompted to specify the full path to a mask.  If you do not want to mask
		the image then you can specify the intersection between both images as the mask. An empty
		file also works.

		All ouputs are saved to the home directory by default unless otherwise specified.

        	    Image 1     	--      $image1
            	    Image 2	        --      $image2
            	    Mask File 		--	$mask
            	    Save directory	--	$savedir           
            	    methods 		--  	$p $k $j

        	Information will not be printed by default! You must specify this if desired with the -i flag. 

    	Example Usage ::

    		üìå  Compute Pearson's cross correlation between two images and put the results in ./results

    			mricalc_xcorr -x ~/DMN_estimate.nii -y ~/DMN_canonical.nii -s ./results

    		üìå  Compute all correlative metrics

    			mricalc_xcorr -x ~/DMN_estimate.nii -y ~/DMN_canonical.nii -s ./results -p -d -j

	    	üìå  Use a custom mask

			mricalc_xcorr -x ~/DMN_estimate.nii -y ~/DMN_canonical.nii -s ./results -m ~/brainmask.nii			    		
    
    ..........................................................................................................
    
    üëì   Helpful Information ::


      * Pearson's Correlation Coefficient is defined as the covariance between X and Y divided by
        the product of the standard deviation of X and Y.  

					  cov(X,Y)
				p = ____________________

					std(X)*std(Y)

        We can write the covariance as the product of X and Y's deviations from their mean.  We define
        the mean of X as E(X) and the mean of Y as E(Y).  Thus the covariance is written as:

				cov(X,Y) = E([X-E(X)]*[Y-E(Y)])

	The standard deviation is defined as the root of the of sum of squared deviations from the mean.

				std(X) = sqrt(E([X-E(X)]^2))


      * The DICE similarity coefficient is computed as the weighted proportion between the number of 
        elements in the intersecting set between X and Y divided by the sum of elements within X and Y.

		This can be written as:

				d =     2| X ‚à© Y |
				    __________________

				         |X| + |Y|

     * The JACCARD similarity index is computed as the ratio between the intersecting and union of images
       X and Y.  This is defined as:

	    			j = 	    | X ‚à© Y |
	    				_________________

	    			    	    | X U Y |
EOF
}
# ------------------------------------------------------------------------------------------------------------
# Option Parsing
while :; do
    case $1 in
        -h|--help)
        	show_help
        	exit 
        ;;
        -i|--showinfo)
			showinfo='showmetheinfo'
		;;
		-p|--pearson)
			p='pearson'
		;;
		-d|--dice)
			d='dice'
		;;
		-j|--jaccard)
			j='jaccard'
		;;
        -x|--image1)
            if [ -n "$2" ]; then
                image1=$2
                shift
            else
                echo "ERROR:  -x --image1 requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;
        -y|--image2)
            if [ -n "$2" ]; then
                image2=$2
                shift
            else
                echo "ERROR:  -y --image2 requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;
        -m|--mask)
            if [ -n "$2" ]; then
                mask=$2
                shift
            else
                echo "ERROR:  -m --mask requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;
        -s|--savedir)
            if [ -n "$2" ]; then
                savedir=$2
                shift
            else
                echo "ERROR:  -s --savedir requires a non-empty option argument.\n" >&2
                exit 
            fi
        ;;                                                                                     
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
        ;;
        *)
            break
    esac

    shift
done
# ------------------------------------------------------------------------------------------------------------
# Check inputs and required programs

# check if mask exists
while [ ! -e $SPM_PATH ]; do
	echo -e " ‚ö†Ô∏è  PATH TO MASK NOT FOUND\n"
	read -p "Please provide the full path to the mask" mask
done
# create save directory if it does not exist
if [ ! -d "$savedir" ] || [ ! -d "$savedir/temp" ]; then
	echo -e " üìÇ Saving Results in :: $savedir"
	mkdir -p "$savedir/temp"
	cd $savedir
fi
# check if mri_convert and mri_info software exists
if [ ! -d $DYLD_FALLBACK_LIBRARY_PATH ]; then
	echo -e " ‚ö†Ô∏è  WARNING !! AFNI and its tools are not properly installed.\n\n"
	if [ $(which afni_system_check.py) ]; then
		afni_system_check.py -check_all
	fi
	exit
fi
# ------------------------------------------------------------------------------------------------------------
# Display Input Arguments 
cat <<EOF


üéõ  Computing Overlap Between Defined Pair of Images


	Input Arguments ::

		image1 		-- 		$image1
		image2 		--		$image2
		mask 		-- 		$mask
		savedir 	--		$savedir
		method 		-- 		$p  $d

EOF
# ------------------------------------------------------------------------------------------------------------
### Generate labels for image 1 file naming 
filename=$(basename "$image1")
extension="${filename##*.}"
conimage1=$(echo ${image1##*/}) 					
conimage1=$(echo ${conimage1%*.*})
if [ $extension='gz' ]; then
	conimage1=$(echo ${conimage1%*.*})
fi
### Generate labels for image 2 file naming 
filename=$(basename "$image2")
extension="${filename##*.}"
conimage2=$(echo ${image2##*/})
conimage2=$(echo ${conimage2%*.*})
if [ $extension='gz' ]; then
	conimage2=$(echo ${conimage2%*.*})
fi

i1n=$(dirname $(echo "$image1" | head -1))
i2n=$(dirname $(echo "$image2" | head -1))
i1n=$(echo ${i1n##*/})
i2n=$(echo ${i2n##*/})

conimage1=$(echo "$conimage1-$i1n")
conimage2=$(echo "$conimage2-$i2n")

# ------------------------------------------------------------------------------------------------------------
### Print Information about Mask & Image Pairs to Screen
if [ ! -z $showinfo ]; then
	echo -e "\n\n üìã  Mask Header Information :: \n"
	3dinfo $mask 2> /dev/null
	echo -e "\n\n üìã  Image 1 Information :: \n"
	3dinfo $image1 2> /dev/null
	echo -e "\n\n üìã  Image 2 Information :: \n"
	3dinfo $image2 2> /dev/null
fi
# ------------------------------------------------------------------------------------------------------------
# Match Image Properties (must be same size and space)

echo -e "\n\n üîß Conforming Input Images to Mask Dimensions & Orientation"
#if [ -e $savedir/$conimage2-conformed.nii ] || [ -e $savedir/$conimage1-conformed.nii ]; then
	#rm $savedir/$conimage1-conformed.nii $savedir/$conimage2-conformed.nii
#fi
3dresample -master $mask -inset $image1 -prefix "$savedir/$conimage1-conformed.nii" 2> /dev/null
3dresample -master $mask -inset $image2 -prefix "$savedir/$conimage2-conformed.nii" 2> /dev/null

image1=$savedir/$conimage1-conformed.nii
image2=$savedir/$conimage2-conformed.nii

# Determine Space for Mask
mspace=$(3dinfo $mask 2> /dev/null | grep Template)
mspace=${mspace##*:}
# Determine Space for Image 1
i1space=$(3dinfo $image1 2> /dev/null | grep Template)
i1space=${i1space##*:}
# Determine Space for Image 2
i2space=$(3dinfo $image2 2> /dev/null | grep Template)
i2space=${i2space##*:}

# First check if the two input images are in the same space
# -- if not, then change them to mask image space
if [ ! "$i1space"="$i2space" ]; then
	echo -e "\n ‚ö†Ô∏è  Image 1 and 2 are in conflicting spaces - $i1space, $i2space\n\n"
	echo -e "\tüìê  Warping Both Images to Mask Space ($mspace) with AFNI's 3drefit"
	3drefit -space $mspace $image1 
	3drefit -space $mspace $image2 
else
	echo -e "\n\t ‚ÑπÔ∏è  Image 1 and 2 are in $i1space space\n"
	if [ ! "$i1space"="$mspace" ]; then
		echo -e "\t\n ‚ö†Ô∏è  Input images do not match mask space - $mspace\n\n"
		echo "\t\t  üìê  Warping Both Images to Mask Space ($mspace)\n"
		3drefit -space $mspace $image1 
		3drefit -space $mspace $image2 
	else
		echo -e "\t ‚úÖ  Images 1 and 2 are now also in the mask space - $mspace\n\n "
	fi
fi

# Binarize Images
#echo -e "\n Binarizing Images ... "
#fslmaths $image1 -bin $savedir/$conimage1-binarized-conformed.nii
#fslmaths $image2 -bin $savedir/$conimage2-binarized-conformed.nii

#image1=$savedir/$conimage1-binarized-conformed.nii.gz
#image2=$savedir/$conimage2-binarized-conformed.nii.gz

# ------------------------------------------------------------------------------------------------------------
if [ $p ]; then
	echo -e "** Calculating Pearson's Correlation Coefficient\n"
	#####################################################################
	# Compute Pearson's Correlation Coefficient Within a Masked Image	#														  #
	#####################################################################
	#
	#							E([X-E(X)]*[Y-E(Y)])
	#						p = ____________________
	#
	#								std(X)*std(Y)
	#
	#	* Where std(X)*std(Y) = sqrt( E([X-E(X)]^2)*E([Y-E(Y)]^2))
	#
	#   * Only voxels in the mask will be used to compute the correlation.
    #
	#		####################################################
	#		#  First determine the covariance between X and Y  #
	#		####################################################
    #
	# 1a. calculate the mean within the masked images 
	m1=$(fslstats $image1 -k $mask -m) # E(X)
	m2=$(fslstats $image2 -k $mask -m) # E(Y)
	# 1b. calculate the deviation from the mean of each voxel (demeaning)
	fslmaths $image1 -sub $m1 -mas $mask $savedir"/temp/$conimage1.demeaned" -odt float # X-E(X)
	fslmaths $image2 -sub $m2 -mas $mask $savedir"/temp/$conimage2.demeaned" -odt float # Y-E(Y)
	# 1c. calculate the products of the demeaned pair of images :: [X-E(X)]*[Y-E(Y)]
	fslmaths $savedir"/temp/$conimage1.demeaned" -mul $savedir"/temp/$conimage2.demeaned" $savedir"/temp/$conimage1.x.$conimage2.covariance"
	# 1d. calculated the expected value (mean) from 1c :: E([X-E(X)]*[Y-E(Y)])
	num=$(fslstats $savedir"/temp/$conimage1.x.$conimage2.covariance" -k $mask -m)
    #
	#		####################################################
	#		#   Second determine the std dev between X and Y   #
	#		####################################################
    #
	# 2a. calculate the squared deviation from the mean 
	fslmaths $savedir"/temp/$conimage1.demeaned" -sqr $savedir"/temp/$conimage1.variance" # [X-E(X)]^2
	fslmaths $savedir"/temp/$conimage2.demeaned" -sqr $savedir"/temp/$conimage2.variance" # [Y-E(Y)]^2
	# 2b. calculate the variance as the mean of the squared deviation from the mean
	den1=$(fslstats $savedir"/temp/$conimage1.variance" -k $mask -m)	# E([X-E(X)]^2)
	den2=$(fslstats $savedir"/temp/$conimage2.variance" -k $mask -m)	# E([Y-E(Y)]^2)
	# 2c. compute the product of the standard deviations :: sqrt( E([X-E(X)]^2)*E([Y-E(Y)]^2))
	denprod=$(echo "scale=4; sqrt($den1*$den2)" | bc -l) 
    #
	#	####################################################
	#	#   Lastly Calculate Pearson's Correlation Coeff   #
	#	####################################################
    #
	rho=$(echo "scale=4; $num/$denprod" | bc -l)
	# ------------------------------------------------------------------------------------------------------------
	# clean up
	# rm
fi
### DICE
if [ $d ]; then
	echo -e "\n** Calculating DICE Similarity Coefficient\n"
	# First generate overlap between two images
	fslmaths $image1 -mas $image2 $savedir/"$conimage1.$conimage2.intersection"
	# Now count number of voxels within the intersection masked by the brainmask (count only relevant vox)
	numinter=$(3dBrickStat -non-zero -count -mask $mask $savedir/$conimage1.$conimage2.intersection.nii.gz 2> /dev/null)
	# Now count total number of voxels within each of the clusters
	num1=$(3dBrickStat -non-zero -count $image1 2> /dev/null)
	num2=$(3dBrickStat -non-zero -count $image2 2> /dev/null)
	dice=$(echo "scale=4; ($numinter*2)/($num1+$num2)" | bc -l)
fi
## JACCARD
if [ $j ]; then
	echo -e "\n** Calculating Jaccard Similarity Index\n"
	# First generate intersection between two images
	fslmaths $image1 -mas $image2 $savedir/"$conimage1.$conimage2.intersection"
	# Now count number of voxels within the intersection masked by the brainmask (count only relevant vox)
	numinter=$(3dBrickStat -non-zero -count -mask $mask $savedir/$conimage1.$conimage2.intersection.nii.gz 2> /dev/null)
	# Next generate the union
	fslmaths $image1 -add $image2 -bin $savedir/"$conimage1.$conimage2.union"
	# Count the number of voxels in the union
	numunion=$(3dBrickStat -non-zero -count -mask $mask $savedir/$conimage1.$conimage2.union.nii.gz 2> /dev/null)
	jaccard=$(echo "scale=4; $numinter/$numunion"| bc -l)
fi
## TODO!!
## MUTUAL INFORMATION
#hx=$(fslstats $image1 -k $mask -e)
#hy=$(fslstats $image2 -k $mask -e)
# Generate union to calculate joint entropy
#fslmaths $image1 -add $image2 -bin $savedir/"$conimage1.$conimage2.union"
#hxy=$(fslstats $savedir/"$conimage1.$conimage2.union" -k $mask -e)
# ------------------------------------------------------------------------------------------------------------
# Create an Output File Containing the Statistics
echo -e "\n üìù  Printing Stats\n"
statsfile=$savedir/$conimage1.$conimage2.similarity.info
if [ ! -e $statsfile ]; then
	touch $statsfile
#else
	#rm $statsfile
fi
if [ ! -z $j ]; then
	echo -e "\n----------------------------------------" >> $statsfile
	echo -e "Jaccard Coefficient \t\t $jaccard" >> $statsfile
	echo -e "\tjaccard = $jaccard"
fi
if [ ! -z $d ]; then
	echo -e "\n----------------------------------------" >> $statsfile
	echo -e "Dice Coefficient \t\t $dice\n" >> $statsfile
	echo -e "Number of Intersecting Voxels \t\t $numinter\n" >> $statsfile
	echo -e "Number of Non-Zero Voxels in Image 1 \t\t $num1\n" >> $statsfile
	echo -e "Number of Non-Zero Voxels in Image 2 \t\t $num2\n" >> $statsfile
	echo -e "\tdice = $dice"
fi
if [ ! -z $p ]; then
	echo -e "\nPearson's R \t\t $rho\n" >> $statsfile
	echo -e "cov(X,Y) \t\t $num\n" >> $statsfile
	echo -e "std(X)*std(Y) \t\t $denprod\n" >> $statsfile
	echo -e "\tr(X,Y) = $rho"
fi
# Add extra information to info file
echo -e "\n----------------------------------------" >> $statsfile
echo -e "image1 \t\t $image1\n" >> $statsfile
echo -e "image2 \t\t $image2\n" >> $statsfile
echo -e "mask \t\t $mask\n" >> $statsfile
echo -e "date \t\t $dte\n" >> $statsfile
echo -e "user \t\t $me\n" >> $statsfile
##
#
#  Shady El Damaty @ CFMI  
#  1 November 2016 -- first draft (yay it works - but is it accurate?)
#  5 November 2016 -- major debugging and feature upgrades
#					  **  switched from FreeSurfer to AFNI for checking image properties
#					  **  checks if AFNI is installed and runs system check if AFNI path isn't found
#					  **  added showinfo option to print information about input images to screen
#					  **  uses 3dresample to convert input images to same size & orientation as mask
#					  **  uses 3drefit to explicitly change the space to the same as the mask
#					  **  checks images to make sure they are in the same space
#					  **  now deletes intermediate files used to compute pearson's r
#					  **  added method functionality for specifying formula for computing xcorr
#                                         **  automatically binarizes images
################################################
